ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLFClk.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	lfclkPosedgeWdtCounter0Enabled:
  22 0000 00000000 		.space	4
  23              		.align	2
  24              	lfclkPosedgeWdtCounter0Mode:
  25 0004 00000000 		.space	4
  26              		.align	2
  27              	disableServicedIsr:
  28 0008 00000000 		.space	4
  29              		.data
  30              		.align	2
  31              		.type	wdtIsrMask, %object
  32              		.size	wdtIsrMask, 4
  33              	wdtIsrMask:
  34 0000 04040400 		.word	263172
  35              		.section	.rodata
  36              		.align	2
  37              		.type	counterIntMaskTbl, %object
  38              		.size	counterIntMaskTbl, 12
  39              	counterIntMaskTbl:
  40 0000 04000000 		.word	4
  41 0004 00040000 		.word	1024
  42 0008 00000400 		.word	262144
  43              		.bss
  44              		.align	2
  45              	cySysWdtCallback:
  46 000c 00000000 		.space	12
  46      00000000 
  46      00000000 
  47              		.section	.text.CySysClkIloStart,"ax",%progbits
  48              		.align	2
  49              		.global	CySysClkIloStart
  50              		.code	16
  51              		.thumb_func
  52              		.type	CySysClkIloStart, %function
  53              	CySysClkIloStart:
  54              	.LFB0:
  55              		.file 1 "Generated_Source\\PSoC4\\CyLFClk.c"
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 2


   1:Generated_Source\PSoC4/CyLFClk.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLFClk.c **** * \file .c
   3:Generated_Source\PSoC4/CyLFClk.c **** * \version 1.10
   4:Generated_Source\PSoC4/CyLFClk.c **** *
   5:Generated_Source\PSoC4/CyLFClk.c **** * \brief
   6:Generated_Source\PSoC4/CyLFClk.c **** *  This file provides the source code for configuring watchdog timers WDTs, 
   7:Generated_Source\PSoC4/CyLFClk.c **** *  low frequency clocks (LFCLK) and the Real-time Clock (RTC) component in
   8:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC Creator for the PSoC 4 families.
   9:Generated_Source\PSoC4/CyLFClk.c **** *
  10:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
  11:Generated_Source\PSoC4/CyLFClk.c **** * \copyright
  12:Generated_Source\PSoC4/CyLFClk.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CyLFClk.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CyLFClk.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CyLFClk.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CyLFClk.c **** 
  18:Generated_Source\PSoC4/CyLFClk.c **** 
  19:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLFClk.h"
  20:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLib.h"
  21:Generated_Source\PSoC4/CyLFClk.c **** 
  22:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
  23:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void);
  24:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
  25:Generated_Source\PSoC4/CyLFClk.c **** 
  26:Generated_Source\PSoC4/CyLFClk.c **** 
  27:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
  28:Generated_Source\PSoC4/CyLFClk.c ****     /* Default Ilo Trim Register value for ILO trimming*/
  29:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint16 defaultIloTrimRegValue = CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE;
  30:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
  31:Generated_Source\PSoC4/CyLFClk.c **** 
  32:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  33:Generated_Source\PSoC4/CyLFClk.c ****     /* CySysClkLfclkPosedgeCatch() / CySysClkLfclkPosedgeRestore() */
  34:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Enabled = 0u;
  35:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Mode    = CY_SYS_WDT_MODE_NONE;
  36:Generated_Source\PSoC4/CyLFClk.c **** 
  37:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableServicedIsr = 0uL;
  38:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 wdtIsrMask = CY_SYS_WDT_COUNTER0_INT |\
  39:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER1_INT |\
  40:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER2_INT;
  41:Generated_Source\PSoC4/CyLFClk.c **** 
  42:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterIntMaskTbl[CY_WDT_NUM_OF_WDT] = {CY_SYS_WDT_COUNTER0_INT,
  43:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER1_INT,
  44:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER2_INT};
  45:Generated_Source\PSoC4/CyLFClk.c **** 
  46:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void);
  47:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void);
  48:Generated_Source\PSoC4/CyLFClk.c **** 
  49:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void);
  50:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void);
  51:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  52:Generated_Source\PSoC4/CyLFClk.c **** 
  53:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
  54:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void);
  55:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableTimerServicedIsr = 0uL;
  56:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 timerIsrMask = CY_SYS_TIMER0_INT |\
  57:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER1_INT |\
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 3


  58:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER2_INT;
  59:Generated_Source\PSoC4/CyLFClk.c **** 
  60:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterTimerIntMaskTbl[CY_SYS_NUM_OF_TIMERS] = {CY_SYS_TIMER0_INT,
  61:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER1_INT,
  62:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER2_INT};
  63:Generated_Source\PSoC4/CyLFClk.c **** 
  64:Generated_Source\PSoC4/CyLFClk.c ****     static cyTimerCallback cySysTimerCallback[CY_SYS_NUM_OF_TIMERS] = {(void *)0, (void *)0, (void 
  65:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_DWT_EN) */
  66:Generated_Source\PSoC4/CyLFClk.c **** 
  67:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  68:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback[CY_WDT_NUM_OF_WDT] = {(void *)0, (void *)0, (void *)0};
  69:Generated_Source\PSoC4/CyLFClk.c **** #else
  70:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback = (void *)0;
  71:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  72:Generated_Source\PSoC4/CyLFClk.c **** 
  73:Generated_Source\PSoC4/CyLFClk.c **** 
  74:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  75:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStart
  76:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  77:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  78:Generated_Source\PSoC4/CyLFClk.c **** *  Enables ILO.
  79:Generated_Source\PSoC4/CyLFClk.c **** *
  80:Generated_Source\PSoC4/CyLFClk.c **** *  Refer to the device datasheet for the ILO startup time.
  81:Generated_Source\PSoC4/CyLFClk.c **** *
  82:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  83:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStart(void)
  84:Generated_Source\PSoC4/CyLFClk.c **** {
  56              		.loc 1 84 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 7, -8
  63              		.cfi_offset 14, -4
  64 0002 00AF     		add	r7, sp, #0
  65              		.cfi_def_cfa_register 7
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  66              		.loc 1 85 0
  67 0004 044B     		ldr	r3, .L2
  68 0006 044A     		ldr	r2, .L2
  69 0008 1268     		ldr	r2, [r2]
  70 000a 8021     		movs	r1, #128
  71 000c 0906     		lsls	r1, r1, #24
  72 000e 0A43     		orrs	r2, r1
  73 0010 1A60     		str	r2, [r3]
  86:Generated_Source\PSoC4/CyLFClk.c **** }
  74              		.loc 1 86 0
  75 0012 C046     		nop
  76 0014 BD46     		mov	sp, r7
  77              		@ sp needed
  78 0016 80BD     		pop	{r7, pc}
  79              	.L3:
  80              		.align	2
  81              	.L2:
  82 0018 04010B40 		.word	1074462980
  83              		.cfi_endproc
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 4


  84              	.LFE0:
  85              		.size	CySysClkIloStart, .-CySysClkIloStart
  86              		.section	.text.CySysClkIloStop,"ax",%progbits
  87              		.align	2
  88              		.global	CySysClkIloStop
  89              		.code	16
  90              		.thumb_func
  91              		.type	CySysClkIloStop, %function
  92              	CySysClkIloStop:
  93              	.LFB1:
  87:Generated_Source\PSoC4/CyLFClk.c **** 
  88:Generated_Source\PSoC4/CyLFClk.c **** 
  89:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStop
  91:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  92:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  93:Generated_Source\PSoC4/CyLFClk.c **** *  Disables the ILO.
  94:Generated_Source\PSoC4/CyLFClk.c **** *
  95:Generated_Source\PSoC4/CyLFClk.c **** *  This function has no effect if WDT is locked (CySysWdtLock() is
  96:Generated_Source\PSoC4/CyLFClk.c **** *  called). Call CySysWdtUnlock() to unlock WDT and stop ILO.
  97:Generated_Source\PSoC4/CyLFClk.c **** *
  98:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 / PSoC 4200: Note that ILO is required for WDT's operation.
  99:Generated_Source\PSoC4/CyLFClk.c **** *
 100:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / 
 101:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M:
 102:Generated_Source\PSoC4/CyLFClk.c **** *  Stopping ILO affects the peripheral clocked by LFCLK, if
 103:Generated_Source\PSoC4/CyLFClk.c **** *  LFCLK is configured to be sourced by ILO.
 104:Generated_Source\PSoC4/CyLFClk.c **** *
 105:Generated_Source\PSoC4/CyLFClk.c **** *  If the ILO is disabled, all blocks run by ILO will stop functioning.
 106:Generated_Source\PSoC4/CyLFClk.c **** *
 107:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 108:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStop(void)
 109:Generated_Source\PSoC4/CyLFClk.c **** {
  94              		.loc 1 109 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 8
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 0000 90B5     		push	{r4, r7, lr}
  99              		.cfi_def_cfa_offset 12
 100              		.cfi_offset 4, -12
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 83B0     		sub	sp, sp, #12
 104              		.cfi_def_cfa_offset 24
 105 0004 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSV2)
 111:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 112:Generated_Source\PSoC4/CyLFClk.c **** 
 113:Generated_Source\PSoC4/CyLFClk.c ****         /* Do nothing if WDT is locked or ILO is disabled */
 114:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtLocked())
 107              		.loc 1 114 0
 108 0006 FFF7FEFF 		bl	CySysWdtLocked
 109 000a 031E     		subs	r3, r0, #0
 110 000c 17D1     		bne	.L6
 115:Generated_Source\PSoC4/CyLFClk.c ****         {
 116:Generated_Source\PSoC4/CyLFClk.c ****             if (0u != CySysClkIloEnabled())
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 5


 111              		.loc 1 116 0
 112 000e FFF7FEFF 		bl	CySysClkIloEnabled
 113 0012 031E     		subs	r3, r0, #0
 114 0014 13D0     		beq	.L6
 117:Generated_Source\PSoC4/CyLFClk.c ****             {
 118:Generated_Source\PSoC4/CyLFClk.c **** 
 119:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 120:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_ILO == CySysClkGetLfclkSource())
 121:Generated_Source\PSoC4/CyLFClk.c ****                 {
 122:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 123:Generated_Source\PSoC4/CyLFClk.c **** 
 124:Generated_Source\PSoC4/CyLFClk.c ****                 interruptState = CyEnterCriticalSection();
 115              		.loc 1 124 0
 116 0016 FC1D     		adds	r4, r7, #7
 117 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 118 001c 0300     		movs	r3, r0
 119 001e 2370     		strb	r3, [r4]
 125:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeCatch();
 120              		.loc 1 125 0
 121 0020 FFF7FEFF 		bl	CySysClkLfclkPosedgeCatch
 126:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 122              		.loc 1 126 0
 123 0024 084B     		ldr	r3, .L7
 124 0026 084A     		ldr	r2, .L7
 125 0028 1268     		ldr	r2, [r2]
 126 002a 5200     		lsls	r2, r2, #1
 127 002c 5208     		lsrs	r2, r2, #1
 128 002e 1A60     		str	r2, [r3]
 127:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeRestore();
 129              		.loc 1 127 0
 130 0030 FFF7FEFF 		bl	CySysClkLfclkPosedgeRestore
 128:Generated_Source\PSoC4/CyLFClk.c ****                 CyExitCriticalSection(interruptState);
 131              		.loc 1 128 0
 132 0034 FB1D     		adds	r3, r7, #7
 133 0036 1B78     		ldrb	r3, [r3]
 134 0038 1800     		movs	r0, r3
 135 003a FFF7FEFF 		bl	CyExitCriticalSection
 136              	.L6:
 129:Generated_Source\PSoC4/CyLFClk.c **** 
 130:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 131:Generated_Source\PSoC4/CyLFClk.c ****                 }
 132:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 133:Generated_Source\PSoC4/CyLFClk.c ****                 {
 134:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 135:Generated_Source\PSoC4/CyLFClk.c ****                 }
 136:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 137:Generated_Source\PSoC4/CyLFClk.c **** 
 138:Generated_Source\PSoC4/CyLFClk.c ****             }
 139:Generated_Source\PSoC4/CyLFClk.c ****         }
 140:Generated_Source\PSoC4/CyLFClk.c ****     #else
 141:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_ILO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_ILO_CONFIG_ENABLE);
 142:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
 143:Generated_Source\PSoC4/CyLFClk.c **** }
 137              		.loc 1 143 0
 138 003e C046     		nop
 139 0040 BD46     		mov	sp, r7
 140 0042 03B0     		add	sp, sp, #12
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 6


 141              		@ sp needed
 142 0044 90BD     		pop	{r4, r7, pc}
 143              	.L8:
 144 0046 C046     		.align	2
 145              	.L7:
 146 0048 04010B40 		.word	1074462980
 147              		.cfi_endproc
 148              	.LFE1:
 149              		.size	CySysClkIloStop, .-CySysClkIloStop
 150              		.section	.text.CySysClkIloStartMeasurement,"ax",%progbits
 151              		.align	2
 152              		.global	CySysClkIloStartMeasurement
 153              		.code	16
 154              		.thumb_func
 155              		.type	CySysClkIloStartMeasurement, %function
 156              	CySysClkIloStartMeasurement:
 157              	.LFB2:
 144:Generated_Source\PSoC4/CyLFClk.c **** 
 145:Generated_Source\PSoC4/CyLFClk.c **** 
 146:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 147:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStartMeasurement
 148:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 149:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 150:Generated_Source\PSoC4/CyLFClk.c **** * Starts the ILO accuracy measurement.
 151:Generated_Source\PSoC4/CyLFClk.c **** *
 152:Generated_Source\PSoC4/CyLFClk.c **** * This function is non-blocking and needs to be called before using the 
 153:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloTrim() and CySysClkIloCompensate() API.
 154:Generated_Source\PSoC4/CyLFClk.c **** *
 155:Generated_Source\PSoC4/CyLFClk.c **** * This API configures measurement counters to be sourced by SysClk (Counter 1)
 156:Generated_Source\PSoC4/CyLFClk.c **** * and ILO (Counter 2). 
 157:Generated_Source\PSoC4/CyLFClk.c **** *
 158:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 159:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 160:Generated_Source\PSoC4/CyLFClk.c **** *
 161:Generated_Source\PSoC4/CyLFClk.c **** * In addition, this API stores the factory ILO trim settings on the first call 
 162:Generated_Source\PSoC4/CyLFClk.c **** * after reset. This stored factory setting is used by the 
 163:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloRestoreFactoryTrim() API to restore the ILO factory trim. 
 164:Generated_Source\PSoC4/CyLFClk.c **** * Hence, it is important to call this API before restoring the ILO 
 165:Generated_Source\PSoC4/CyLFClk.c **** * factory trim settings.
 166:Generated_Source\PSoC4/CyLFClk.c **** *
 167:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 168:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStartMeasurement(void)
 169:Generated_Source\PSoC4/CyLFClk.c **** {
 158              		.loc 1 169 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 170:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 171:Generated_Source\PSoC4/CyLFClk.c ****     static uint8 iloTrimTrig = 0u;
 172:Generated_Source\PSoC4/CyLFClk.c **** 
 173:Generated_Source\PSoC4/CyLFClk.c ****     /* Write default ILO trim value while ILO starting ( Cypress ID 225244 )*/
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 7


 174:Generated_Source\PSoC4/CyLFClk.c ****     if (0u == iloTrimTrig)
 175:Generated_Source\PSoC4/CyLFClk.c ****     {
 176:Generated_Source\PSoC4/CyLFClk.c ****         defaultIloTrimRegValue = ((uint8)(CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK));
 177:Generated_Source\PSoC4/CyLFClk.c ****         iloTrimTrig = 1u;
 178:Generated_Source\PSoC4/CyLFClk.c ****     }
 179:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 180:Generated_Source\PSoC4/CyLFClk.c **** 
 181:Generated_Source\PSoC4/CyLFClk.c ****     /* Configure measurement counters to source by SysClk (Counter 1) and ILO (Counter 2)*/
 182:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG = (CY_SYS_CLK_DFT_REG & (uint32) ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK) |
 168              		.loc 1 182 0
 169 0004 094B     		ldr	r3, .L10
 170 0006 094A     		ldr	r2, .L10
 171 0008 1268     		ldr	r2, [r2]
 172 000a 0949     		ldr	r1, .L10+4
 173 000c 0A40     		ands	r2, r1
 174 000e 8021     		movs	r1, #128
 175 0010 4900     		lsls	r1, r1, #1
 176 0012 0A43     		orrs	r2, r1
 177 0014 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 184:Generated_Source\PSoC4/CyLFClk.c **** 
 185:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_TST_DDFT_CTRL_REG = (CY_SYS_TST_DDFT_CTRL_REG & (uint32) ~ CY_SYS_TST_DDFT_CTRL_REG_DEFA
 178              		.loc 1 185 0
 179 0016 074B     		ldr	r3, .L10+8
 180 0018 064A     		ldr	r2, .L10+8
 181 001a 1268     		ldr	r2, [r2]
 182 001c 0649     		ldr	r1, .L10+12
 183 001e 0A40     		ands	r2, r1
 184 0020 0649     		ldr	r1, .L10+16
 185 0022 0A43     		orrs	r2, r1
 186 0024 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 187:Generated_Source\PSoC4/CyLFClk.c **** }
 187              		.loc 1 187 0
 188 0026 C046     		nop
 189 0028 BD46     		mov	sp, r7
 190              		@ sp needed
 191 002a 80BD     		pop	{r7, pc}
 192              	.L11:
 193              		.align	2
 194              	.L10:
 195 002c 10010B40 		.word	1074462992
 196 0030 FFF0FFFF 		.word	-3841
 197 0034 08000340 		.word	1073938440
 198 0038 C0C0FFFF 		.word	-16192
 199 003c 01020000 		.word	513
 200              		.cfi_endproc
 201              	.LFE2:
 202              		.size	CySysClkIloStartMeasurement, .-CySysClkIloStartMeasurement
 203              		.section	.text.CySysClkIloStopMeasurement,"ax",%progbits
 204              		.align	2
 205              		.global	CySysClkIloStopMeasurement
 206              		.code	16
 207              		.thumb_func
 208              		.type	CySysClkIloStopMeasurement, %function
 209              	CySysClkIloStopMeasurement:
 210              	.LFB3:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 8


 188:Generated_Source\PSoC4/CyLFClk.c **** 
 189:Generated_Source\PSoC4/CyLFClk.c **** 
 190:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 191:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStopMeasurement
 192:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 193:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 194:Generated_Source\PSoC4/CyLFClk.c **** * Stops the ILO accuracy measurement.
 195:Generated_Source\PSoC4/CyLFClk.c **** *
 196:Generated_Source\PSoC4/CyLFClk.c **** * Calling this function immediately stops the the ILO frequency measurement.
 197:Generated_Source\PSoC4/CyLFClk.c **** * This function should be called before placing the device to deepsleep, if 
 198:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API was called before. 
 199:Generated_Source\PSoC4/CyLFClk.c **** *
 200:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 201:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStopMeasurement(void)
 202:Generated_Source\PSoC4/CyLFClk.c **** {
 211              		.loc 1 202 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 80B5     		push	{r7, lr}
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 203:Generated_Source\PSoC4/CyLFClk.c ****     /* Set default configurations in 11...8 DFT register bits to zero */
 204:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG &= ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK;
 221              		.loc 1 204 0
 222 0004 044B     		ldr	r3, .L13
 223 0006 044A     		ldr	r2, .L13
 224 0008 1268     		ldr	r2, [r2]
 225 000a 0449     		ldr	r1, .L13+4
 226 000c 0A40     		ands	r2, r1
 227 000e 1A60     		str	r2, [r3]
 205:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 206:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_TST_DDFT_CTRL_REG &= ((uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 207:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 208:Generated_Source\PSoC4/CyLFClk.c **** }
 228              		.loc 1 208 0
 229 0010 C046     		nop
 230 0012 BD46     		mov	sp, r7
 231              		@ sp needed
 232 0014 80BD     		pop	{r7, pc}
 233              	.L14:
 234 0016 C046     		.align	2
 235              	.L13:
 236 0018 10010B40 		.word	1074462992
 237 001c FFF0FFFF 		.word	-3841
 238              		.cfi_endproc
 239              	.LFE3:
 240              		.size	CySysClkIloStopMeasurement, .-CySysClkIloStopMeasurement
 241              		.global	__aeabi_uidiv
 242              		.section	.text.CySysClkIloCompensate,"ax",%progbits
 243              		.align	2
 244              		.global	CySysClkIloCompensate
 245              		.code	16
 246              		.thumb_func
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 9


 247              		.type	CySysClkIloCompensate, %function
 248              	CySysClkIloCompensate:
 249              	.LFB4:
 209:Generated_Source\PSoC4/CyLFClk.c **** 
 210:Generated_Source\PSoC4/CyLFClk.c **** 
 211:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 212:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloCompensate
 213:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 214:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 215:Generated_Source\PSoC4/CyLFClk.c **** * This API measures the current ILO accuracy.
 216:Generated_Source\PSoC4/CyLFClk.c **** *
 217:Generated_Source\PSoC4/CyLFClk.c **** * Basing on the measured frequency the required number of ILO cycles for a 
 218:Generated_Source\PSoC4/CyLFClk.c **** * given delay (in microseconds) is obtained. The desired delay that needs to 
 219:Generated_Source\PSoC4/CyLFClk.c **** * be compensated is passed through the desiredDelay parameter. The compensated 
 220:Generated_Source\PSoC4/CyLFClk.c **** * cycle count is returned through the compesatedCycles pointer.
 221:Generated_Source\PSoC4/CyLFClk.c **** * The compensated ILO cycles can then be used to define the WDT period value, 
 222:Generated_Source\PSoC4/CyLFClk.c **** * effectively compensating for the ILO inaccuracy and allowing a more 
 223:Generated_Source\PSoC4/CyLFClk.c **** * accurate WDT interrupt generation.
 224:Generated_Source\PSoC4/CyLFClk.c **** *
 225:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API should be called prior to calling this API. 
 226:Generated_Source\PSoC4/CyLFClk.c **** *
 227:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 228:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 229:Generated_Source\PSoC4/CyLFClk.c **** *
 230:Generated_Source\PSoC4/CyLFClk.c **** * \note If the System clock frequency is changed in runtime, the CyDelayFreq() 
 231:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 232:Generated_Source\PSoC4/CyLFClk.c **** * called before calling a next CySysClkIloCompensate().
 233:Generated_Source\PSoC4/CyLFClk.c **** *
 234:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS.
 235:Generated_Source\PSoC4/CyLFClk.c **** *
 236:Generated_Source\PSoC4/CyLFClk.c **** * \param desiredDelay Required delay in microseconds.
 237:Generated_Source\PSoC4/CyLFClk.c **** *
 238:Generated_Source\PSoC4/CyLFClk.c **** * \param *compensatedCycles The pointer to the variable in which the required
 239:Generated_Source\PSoC4/CyLFClk.c **** * number of ILO cycles for the given delay will be returned.
 240:Generated_Source\PSoC4/CyLFClk.c **** *
 241:Generated_Source\PSoC4/CyLFClk.c **** * \details
 242:Generated_Source\PSoC4/CyLFClk.c **** * The value returned in *compensatedCycles pointer is not valid until the 
 243:Generated_Source\PSoC4/CyLFClk.c **** * function returns CYRET_SUCCESS.
 244:Generated_Source\PSoC4/CyLFClk.c **** *
 245:Generated_Source\PSoC4/CyLFClk.c **** * The desiredDelay parameter value should be in next range: <br>From 100 to 
 246:Generated_Source\PSoC4/CyLFClk.c **** * 2 000 000 microseconds for PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
 247:Generated_Source\PSoC4/CyLFClk.c **** * Coprocessor devices.<br>From 100 to 4 000 000 000 microseconds for 
 248:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE /
 249:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L / PSoC 4100M /PSoC 4200M devices.
 250:Generated_Source\PSoC4/CyLFClk.c **** *
 251:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - The compensation process is complete and the 
 252:Generated_Source\PSoC4/CyLFClk.c **** * compensated cycles value is returned in the compensatedCycles pointer.
 253:Generated_Source\PSoC4/CyLFClk.c **** *
 254:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. It is 
 255:Generated_Source\PSoC4/CyLFClk.c **** * strongly recommended to do not make pauses between API calling. The 
 256:Generated_Source\PSoC4/CyLFClk.c **** * function should be called repeatedly until the API returns CYRET_SUCCESS.
 257:Generated_Source\PSoC4/CyLFClk.c **** *
 258:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates that measurement not started. 
 259:Generated_Source\PSoC4/CyLFClk.c **** * The user should call CySysClkIloStartMeasurement() API before calling 
 260:Generated_Source\PSoC4/CyLFClk.c **** * this API.
 261:Generated_Source\PSoC4/CyLFClk.c **** *
 262:Generated_Source\PSoC4/CyLFClk.c **** * \note For a correct WDT or DeepSleep Timers functioning with ILO compensating 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 10


 263:Generated_Source\PSoC4/CyLFClk.c **** * the CySysClkIloCompensate() should be called before WDT or DeepSleep Timers 
 264:Generated_Source\PSoC4/CyLFClk.c **** * enabling.
 265:Generated_Source\PSoC4/CyLFClk.c **** *
 266:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 267:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloCompensate(uint32 desiredDelay , uint32* compensatedCycles)
 268:Generated_Source\PSoC4/CyLFClk.c **** {
 250              		.loc 1 268 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 24
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 90B5     		push	{r4, r7, lr}
 255              		.cfi_def_cfa_offset 12
 256              		.cfi_offset 4, -12
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 87B0     		sub	sp, sp, #28
 260              		.cfi_def_cfa_offset 40
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 264 0008 3960     		str	r1, [r7]
 269:Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 270:Generated_Source\PSoC4/CyLFClk.c ****     uint32 desiredDelayInCounts;
 271:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 272:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 273:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 274:Generated_Source\PSoC4/CyLFClk.c **** 
 275:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 265              		.loc 1 275 0
 266 000a 474B     		ldr	r3, .L27
 267 000c 1B68     		ldr	r3, [r3]
 268 000e 474A     		ldr	r2, .L27+4
 269 0010 1340     		ands	r3, r2
 270 0012 FB60     		str	r3, [r7, #12]
 276:Generated_Source\PSoC4/CyLFClk.c **** 
 277:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if CySysStartMeasurement was called before */
 278:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) && 
 271              		.loc 1 278 0
 272 0014 FA68     		ldr	r2, [r7, #12]
 273 0016 8023     		movs	r3, #128
 274 0018 5B00     		lsls	r3, r3, #1
 275 001a 9A42     		cmp	r2, r3
 276 001c 00D0     		beq	.LCB190
 277 001e 7CE0     		b	.L16	@long jump
 278              	.LCB190:
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 279              		.loc 1 279 0 discriminator 1
 280 0020 434B     		ldr	r3, .L27+8
 281 0022 1B68     		ldr	r3, [r3]
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 282              		.loc 1 278 0 discriminator 1
 283 0024 434A     		ldr	r2, .L27+12
 284 0026 9342     		cmp	r3, r2
 285 0028 00D0     		beq	.LCB195
 286 002a 76E0     		b	.L16	@long jump
 287              	.LCB195:
 288              		.loc 1 279 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 11


 289 002c 7B68     		ldr	r3, [r7, #4]
 290 002e 424A     		ldr	r2, .L27+16
 291 0030 9342     		cmp	r3, r2
 292 0032 00D9     		bls	.LCB199
 293 0034 71E0     		b	.L16	@long jump
 294              	.LCB199:
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 295              		.loc 1 280 0
 296 0036 7B68     		ldr	r3, [r7, #4]
 297 0038 632B     		cmp	r3, #99
 298 003a 6ED9     		bls	.L16
 281:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 299              		.loc 1 281 0
 300 003c 3B68     		ldr	r3, [r7]
 301 003e 002B     		cmp	r3, #0
 302 0040 6BD0     		beq	.L16
 282:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 283:Generated_Source\PSoC4/CyLFClk.c ****     {
 284:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_TRIM_OR_COMP_FINISHED != compensateRunningStatus)
 303              		.loc 1 284 0
 304 0042 3E4B     		ldr	r3, .L27+20
 305 0044 1B68     		ldr	r3, [r3]
 306 0046 002B     		cmp	r3, #0
 307 0048 5CD0     		beq	.L17
 285:Generated_Source\PSoC4/CyLFClk.c ****         {
 286:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait until counter 1 stopped counting and after it calculate compensated cycles */
 287:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 308              		.loc 1 287 0
 309 004a 3D4B     		ldr	r3, .L27+24
 310 004c 1B68     		ldr	r3, [r3]
 311 004e 002B     		cmp	r3, #0
 312 0050 55DA     		bge	.L18
 288:Generated_Source\PSoC4/CyLFClk.c ****             {
 289:Generated_Source\PSoC4/CyLFClk.c ****                 if (0u != CY_SYS_CNT_REG2_REG)
 313              		.loc 1 289 0
 314 0052 3C4B     		ldr	r3, .L27+28
 315 0054 1B68     		ldr	r3, [r3]
 316 0056 002B     		cmp	r3, #0
 317 0058 4ED0     		beq	.L19
 290:Generated_Source\PSoC4/CyLFClk.c ****                 {
 291:Generated_Source\PSoC4/CyLFClk.c ****                     /* Calculate required number of ILO cycles for given delay */
 292:Generated_Source\PSoC4/CyLFClk.c ****                     #if(CY_IP_SRSSV2)
 293:Generated_Source\PSoC4/CyLFClk.c ****                         if (CY_SYS_CLK_DELAY_COUNTS_LIMIT < desiredDelay)
 318              		.loc 1 293 0
 319 005a 7B68     		ldr	r3, [r7, #4]
 320 005c 3A4A     		ldr	r2, .L27+32
 321 005e 9342     		cmp	r3, r2
 322 0060 1ED9     		bls	.L20
 294:Generated_Source\PSoC4/CyLFClk.c ****                         {
 295:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = (desiredDelay / CY_SYS_CLK_ILO_PERIOD);
 323              		.loc 1 295 0
 324 0062 7B68     		ldr	r3, [r7, #4]
 325 0064 1F21     		movs	r1, #31
 326 0066 1800     		movs	r0, r3
 327 0068 FFF7FEFF 		bl	__aeabi_uidiv
 328 006c 0300     		movs	r3, r0
 329 006e BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 12


 296:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
 297:Generated_Source\PSoC4/CyLFClk.c ****                             (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_
 330              		.loc 1 297 0
 331 0070 344B     		ldr	r3, .L27+28
 332 0072 1A68     		ldr	r2, [r3]
 333 0074 354B     		ldr	r3, .L27+36
 334 0076 1B68     		ldr	r3, [r3]
 335 0078 5A43     		muls	r2, r3
 336 007a 344B     		ldr	r3, .L27+36
 337 007c 1B68     		ldr	r3, [r3]
 338 007e 9B0A     		lsrs	r3, r3, #10
 339 0080 1900     		movs	r1, r3
 340 0082 1000     		movs	r0, r2
 341 0084 FFF7FEFF 		bl	__aeabi_uidiv
 342 0088 0300     		movs	r3, r0
 343 008a 5C09     		lsrs	r4, r3, #5
 298:Generated_Source\PSoC4/CyLFClk.c ****                                 CY_SYS_CLK_ILO_FREQ_2MSB) * (desiredDelayInCounts / CY_SYS_CLK_ILO_
 344              		.loc 1 298 0
 345 008c BA68     		ldr	r2, [r7, #8]
 346 008e FA23     		movs	r3, #250
 347 0090 9900     		lsls	r1, r3, #2
 348 0092 1000     		movs	r0, r2
 349 0094 FFF7FEFF 		bl	__aeabi_uidiv
 350 0098 0300     		movs	r3, r0
 296:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
 351              		.loc 1 296 0
 352 009a 6343     		muls	r3, r4
 353 009c 7B61     		str	r3, [r7, #20]
 354 009e 22E0     		b	.L21
 355              	.L20:
 299:Generated_Source\PSoC4/CyLFClk.c ****                         }
 300:Generated_Source\PSoC4/CyLFClk.c ****                         else
 301:Generated_Source\PSoC4/CyLFClk.c ****                         {
 302:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + 
 356              		.loc 1 302 0
 357 00a0 7B68     		ldr	r3, [r7, #4]
 358 00a2 6422     		movs	r2, #100
 359 00a4 5343     		muls	r3, r2
 360 00a6 2A4A     		ldr	r2, .L27+40
 361 00a8 9446     		mov	ip, r2
 362 00aa 6344     		add	r3, r3, ip
 363 00ac 2949     		ldr	r1, .L27+44
 364 00ae 1800     		movs	r0, r3
 365 00b0 FFF7FEFF 		bl	__aeabi_uidiv
 366 00b4 0300     		movs	r3, r0
 367 00b6 BB60     		str	r3, [r7, #8]
 303:Generated_Source\PSoC4/CyLFClk.c ****                                                      CY_SYS_CLK_HALF_OF_CLOCK) / CY_SYS_CLK_ILO_PER
 304:Generated_Source\PSoC4/CyLFClk.c **** 
 305:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 368              		.loc 1 305 0
 369 00b8 224B     		ldr	r3, .L27+28
 370 00ba 1A68     		ldr	r2, [r3]
 371 00bc 234B     		ldr	r3, .L27+36
 372 00be 1B68     		ldr	r3, [r3]
 373 00c0 5A43     		muls	r2, r3
 306:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 374              		.loc 1 306 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 13


 375 00c2 224B     		ldr	r3, .L27+36
 376 00c4 1B68     		ldr	r3, [r3]
 377 00c6 9B0A     		lsrs	r3, r3, #10
 305:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 378              		.loc 1 305 0
 379 00c8 1900     		movs	r1, r3
 380 00ca 1000     		movs	r0, r2
 381 00cc FFF7FEFF 		bl	__aeabi_uidiv
 382 00d0 0300     		movs	r3, r0
 383 00d2 1A00     		movs	r2, r3
 384              		.loc 1 306 0
 385 00d4 BB68     		ldr	r3, [r7, #8]
 386 00d6 5A43     		muls	r2, r3
 305:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 387              		.loc 1 305 0
 388 00d8 FA23     		movs	r3, #250
 389 00da D901     		lsls	r1, r3, #7
 390 00dc 1000     		movs	r0, r2
 391 00de FFF7FEFF 		bl	__aeabi_uidiv
 392 00e2 0300     		movs	r3, r0
 393 00e4 7B61     		str	r3, [r7, #20]
 394              	.L21:
 307:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 308:Generated_Source\PSoC4/CyLFClk.c ****                         }
 309:Generated_Source\PSoC4/CyLFClk.c ****                     #else /* (CY_IP_SRSSLT) */
 310:Generated_Source\PSoC4/CyLFClk.c ****                         desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + CY_SYS_
 311:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 312:Generated_Source\PSoC4/CyLFClk.c ****                         if(CY_SYS_CLK_MAX_LITE_NUMBER < desiredDelayInCounts)
 313:Generated_Source\PSoC4/CyLFClk.c ****                         {
 314:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydel
 315:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 316:Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 317:Generated_Source\PSoC4/CyLFClk.c ****                         }
 318:Generated_Source\PSoC4/CyLFClk.c ****                         else
 319:Generated_Source\PSoC4/CyLFClk.c ****                         {
 320:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 322:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 323:Generated_Source\PSoC4/CyLFClk.c ****                         }
 324:Generated_Source\PSoC4/CyLFClk.c ****                     #endif /* (CY_IP_SRSSV2) */
 325:Generated_Source\PSoC4/CyLFClk.c **** 
 326:Generated_Source\PSoC4/CyLFClk.c ****                     *compensatedCycles = iloCompensatedCycles;
 395              		.loc 1 326 0
 396 00e6 3B68     		ldr	r3, [r7]
 397 00e8 7A69     		ldr	r2, [r7, #20]
 398 00ea 1A60     		str	r2, [r3]
 327:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 399              		.loc 1 327 0
 400 00ec 134B     		ldr	r3, .L27+20
 401 00ee 0022     		movs	r2, #0
 402 00f0 1A60     		str	r2, [r3]
 328:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 403              		.loc 1 328 0
 404 00f2 0023     		movs	r3, #0
 405 00f4 3B61     		str	r3, [r7, #16]
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 406              		.loc 1 284 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 14


 407 00f6 12E0     		b	.L25
 408              	.L19:
 329:Generated_Source\PSoC4/CyLFClk.c ****                 }
 330:Generated_Source\PSoC4/CyLFClk.c ****                 else
 331:Generated_Source\PSoC4/CyLFClk.c ****                 {
 332:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus  = CYRET_INVALID_STATE;
 409              		.loc 1 332 0
 410 00f8 1123     		movs	r3, #17
 411 00fa 3B61     		str	r3, [r7, #16]
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 412              		.loc 1 284 0
 413 00fc 0FE0     		b	.L25
 414              	.L18:
 333:Generated_Source\PSoC4/CyLFClk.c ****                 }
 334:Generated_Source\PSoC4/CyLFClk.c ****             }
 335:Generated_Source\PSoC4/CyLFClk.c ****             else
 336:Generated_Source\PSoC4/CyLFClk.c ****             {
 337:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 415              		.loc 1 337 0
 416 00fe 0723     		movs	r3, #7
 417 0100 3B61     		str	r3, [r7, #16]
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 418              		.loc 1 284 0
 419 0102 0CE0     		b	.L25
 420              	.L17:
 338:Generated_Source\PSoC4/CyLFClk.c ****             }
 339:Generated_Source\PSoC4/CyLFClk.c ****         }
 340:Generated_Source\PSoC4/CyLFClk.c ****         else
 341:Generated_Source\PSoC4/CyLFClk.c ****         {
 342:Generated_Source\PSoC4/CyLFClk.c ****             /* Reload CNTR 1 count value for next measurement cycle*/
 343:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CNT_REG1_REG = (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER);
 421              		.loc 1 343 0
 422 0104 0E4A     		ldr	r2, .L27+24
 423 0106 114B     		ldr	r3, .L27+36
 424 0108 1B68     		ldr	r3, [r3]
 425 010a 9B0A     		lsrs	r3, r3, #10
 426 010c 1360     		str	r3, [r2]
 344:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 427              		.loc 1 344 0
 428 010e 0B4B     		ldr	r3, .L27+20
 429 0110 0122     		movs	r2, #1
 430 0112 1A60     		str	r2, [r3]
 345:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 431              		.loc 1 345 0
 432 0114 0723     		movs	r3, #7
 433 0116 3B61     		str	r3, [r7, #16]
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 434              		.loc 1 284 0
 435 0118 01E0     		b	.L25
 436              	.L16:
 346:Generated_Source\PSoC4/CyLFClk.c ****         }
 347:Generated_Source\PSoC4/CyLFClk.c ****     }
 348:Generated_Source\PSoC4/CyLFClk.c ****     else
 349:Generated_Source\PSoC4/CyLFClk.c ****     {
 350:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 437              		.loc 1 350 0
 438 011a 1123     		movs	r3, #17
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 15


 439 011c 3B61     		str	r3, [r7, #16]
 440              	.L25:
 351:Generated_Source\PSoC4/CyLFClk.c ****     }
 352:Generated_Source\PSoC4/CyLFClk.c **** 
 353:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 441              		.loc 1 353 0
 442 011e 3B69     		ldr	r3, [r7, #16]
 354:Generated_Source\PSoC4/CyLFClk.c **** }
 443              		.loc 1 354 0
 444 0120 1800     		movs	r0, r3
 445 0122 BD46     		mov	sp, r7
 446 0124 07B0     		add	sp, sp, #28
 447              		@ sp needed
 448 0126 90BD     		pop	{r4, r7, pc}
 449              	.L28:
 450              		.align	2
 451              	.L27:
 452 0128 10010B40 		.word	1074462992
 453 012c 3F3F0000 		.word	16191
 454 0130 08000340 		.word	1073938440
 455 0134 01020000 		.word	513
 456 0138 00286BEE 		.word	-294967296
 457 013c 18000000 		.word	compensateRunningStatus.4836
 458 0140 18000340 		.word	1073938456
 459 0144 1C000340 		.word	1073938460
 460 0148 60D10000 		.word	53600
 461 014c 00000000 		.word	cydelayFreqHz
 462 0150 0D030000 		.word	781
 463 0154 350C0000 		.word	3125
 464              		.cfi_endproc
 465              	.LFE4:
 466              		.size	CySysClkIloCompensate, .-CySysClkIloCompensate
 467              		.section	.text.CySysClkIloEnabled,"ax",%progbits
 468              		.align	2
 469              		.code	16
 470              		.thumb_func
 471              		.type	CySysClkIloEnabled, %function
 472              	CySysClkIloEnabled:
 473              	.LFB5:
 355:Generated_Source\PSoC4/CyLFClk.c **** 
 356:Generated_Source\PSoC4/CyLFClk.c **** 
 357:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 358:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 359:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkIloEnabled
 360:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 361:Generated_Source\PSoC4/CyLFClk.c ****     *
 362:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 363:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the ILO enable state.
 364:Generated_Source\PSoC4/CyLFClk.c ****     *
 365:Generated_Source\PSoC4/CyLFClk.c ****     * \return
 366:Generated_Source\PSoC4/CyLFClk.c ****     * 1 if ILO is enabled, and 0 if ILO is disabled.
 367:Generated_Source\PSoC4/CyLFClk.c ****     *
 368:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 369:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************/
 370:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void)
 371:Generated_Source\PSoC4/CyLFClk.c ****     {
 474              		.loc 1 371 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 16


 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 1, uses_anonymous_args = 0
 478 0000 80B5     		push	{r7, lr}
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 7, -8
 481              		.cfi_offset 14, -4
 482 0002 00AF     		add	r7, sp, #0
 483              		.cfi_def_cfa_register 7
 372:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal to 0 */
 373:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_ILO_CONFIG_REG & (uint32)(CY_SYS_CLK_ILO_CONFIG_ENABLE))) ?
 484              		.loc 1 373 0
 485 0004 044B     		ldr	r3, .L33
 486 0006 1B68     		ldr	r3, [r3]
 374:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 487              		.loc 1 374 0
 488 0008 002B     		cmp	r3, #0
 489 000a 01DA     		bge	.L30
 490              		.loc 1 374 0 is_stmt 0 discriminator 1
 491 000c 0123     		movs	r3, #1
 373:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 492              		.loc 1 373 0 is_stmt 1 discriminator 1
 493 000e 00E0     		b	.L32
 494              	.L30:
 495              		.loc 1 374 0 discriminator 2
 496 0010 0023     		movs	r3, #0
 497              	.L32:
 375:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 0u);
 376:Generated_Source\PSoC4/CyLFClk.c ****     }
 498              		.loc 1 376 0 discriminator 1
 499 0012 1800     		movs	r0, r3
 500 0014 BD46     		mov	sp, r7
 501              		@ sp needed
 502 0016 80BD     		pop	{r7, pc}
 503              	.L34:
 504              		.align	2
 505              	.L33:
 506 0018 04010B40 		.word	1074462980
 507              		.cfi_endproc
 508              	.LFE5:
 509              		.size	CySysClkIloEnabled, .-CySysClkIloEnabled
 510              		.section	.text.CySysWdtLock,"ax",%progbits
 511              		.align	2
 512              		.global	CySysWdtLock
 513              		.code	16
 514              		.thumb_func
 515              		.type	CySysWdtLock, %function
 516              	CySysWdtLock:
 517              	.LFB6:
 377:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
 378:Generated_Source\PSoC4/CyLFClk.c **** 
 379:Generated_Source\PSoC4/CyLFClk.c **** 
 380:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 381:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 382:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloTrim
 383:Generated_Source\PSoC4/CyLFClk.c **** *****************************************************************************//**
 384:Generated_Source\PSoC4/CyLFClk.c **** * \brief
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 17


 385:Generated_Source\PSoC4/CyLFClk.c **** * The API trims the ILO frequency to +/- 10% accuracy range using accurate 
 386:Generated_Source\PSoC4/CyLFClk.c **** * SysClk.
 387:Generated_Source\PSoC4/CyLFClk.c **** *
 388:Generated_Source\PSoC4/CyLFClk.c **** * The API can be blocking or non-blocking depending on the value of the mode 
 389:Generated_Source\PSoC4/CyLFClk.c **** * parameter passed. The accuracy of ILO after trimming in parts per thousand 
 390:Generated_Source\PSoC4/CyLFClk.c **** * is returned through the iloAccuracyInPPT pointer. A positive number indicates 
 391:Generated_Source\PSoC4/CyLFClk.c **** * that the ILO is running fast and a negative number indicates that the ILO is 
 392:Generated_Source\PSoC4/CyLFClk.c **** * running slowly. This error is relative to the error in the reference clock 
 393:Generated_Source\PSoC4/CyLFClk.c **** * (SysClk), so the absolute error will be higher and depends on the accuracy 
 394:Generated_Source\PSoC4/CyLFClk.c **** * of the reference.
 395:Generated_Source\PSoC4/CyLFClk.c **** *
 396:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to calling this 
 397:Generated_Source\PSoC4/CyLFClk.c **** * API. Otherwise it will return CYRET_INVALID_STATE as the measurement was not 
 398:Generated_Source\PSoC4/CyLFClk.c **** * started.
 399:Generated_Source\PSoC4/CyLFClk.c **** *
 400:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 401:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 402:Generated_Source\PSoC4/CyLFClk.c **** *
 403:Generated_Source\PSoC4/CyLFClk.c **** * \note If System clock frequency is changed in runtime, the CyDelayFreq() 
 404:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 405:Generated_Source\PSoC4/CyLFClk.c **** * called before next CySysClkIloCompensate() usage.
 406:Generated_Source\PSoC4/CyLFClk.c **** *
 407:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS
 408:Generated_Source\PSoC4/CyLFClk.c **** * or CYRET_TIMEOUT.
 409:Generated_Source\PSoC4/CyLFClk.c **** *
 410:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices with ILO trim capability. This excludes 
 411:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4000 / PSoC 4100 / PSoC 4200 / PSoC 4000S / PSoC 4100S / PSoC
 412:Generated_Source\PSoC4/CyLFClk.c **** * Analog Coprocessor devices.
 413:Generated_Source\PSoC4/CyLFClk.c **** *
 414:Generated_Source\PSoC4/CyLFClk.c **** * \param mode
 415:Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_BLOCKING -  The function does not return until the ILO is 
 416:Generated_Source\PSoC4/CyLFClk.c **** * within +/-10% accuracy range or time out has occurred.<br>
 417:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_NON_BLOCKING - The function returns immediately after 
 418:Generated_Source\PSoC4/CyLFClk.c **** * performing a single iteration of the trim process. The function should be 
 419:Generated_Source\PSoC4/CyLFClk.c **** * called repeatedly until the trimming is completed successfully.
 420:Generated_Source\PSoC4/CyLFClk.c **** *
 421:Generated_Source\PSoC4/CyLFClk.c **** * \param *iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 422:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned.
 423:Generated_Source\PSoC4/CyLFClk.c **** *
 424:Generated_Source\PSoC4/CyLFClk.c **** * \details The value returned in *iloAccuracyInPPT pointer is not valid 
 425:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. ILO accuracy in PPT is given by:
 426:Generated_Source\PSoC4/CyLFClk.c **** *
 427:Generated_Source\PSoC4/CyLFClk.c **** * IloAccuracyInPPT = ((MeasuredIloFreq - DesiredIloFreq) * 
 428:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_PERTHOUSAND) / DesiredIloFreq);
 429:Generated_Source\PSoC4/CyLFClk.c **** *
 430:Generated_Source\PSoC4/CyLFClk.c **** * DesiredIloFreq  = 32000, CY_SYS_CLK_PERTHOUSAND = 1000;
 431:Generated_Source\PSoC4/CyLFClk.c **** *
 432:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates trimming is complete. This value indicates 
 433:Generated_Source\PSoC4/CyLFClk.c **** * trimming is successful and iloAccuracyInPPT is within +/- 10%.
 434:Generated_Source\PSoC4/CyLFClk.c **** *
 435:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. This is applicable 
 436:Generated_Source\PSoC4/CyLFClk.c **** * only for non-blocking mode.
 437:Generated_Source\PSoC4/CyLFClk.c **** *
 438:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful. You should 
 439:Generated_Source\PSoC4/CyLFClk.c **** * call CySysClkIloStartMeasurement() before calling this API.
 440:Generated_Source\PSoC4/CyLFClk.c **** *
 441:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_TIMEOUT - Indicates trimming was unsuccessful. This is applicable 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 18


 442:Generated_Source\PSoC4/CyLFClk.c **** * only for blocking mode. Timeout means the trimming was tried 5 times without 
 443:Generated_Source\PSoC4/CyLFClk.c **** * success (i.e. ILO accuracy > +/- 10%). The user can call the API again for 
 444:Generated_Source\PSoC4/CyLFClk.c **** * another try or wait for some time before calling it again (to let the system 
 445:Generated_Source\PSoC4/CyLFClk.c **** * to settle to another operating point change in temperature etc.) and continue 
 446:Generated_Source\PSoC4/CyLFClk.c **** * using the previous trim value till the next call.
 447:Generated_Source\PSoC4/CyLFClk.c **** *
 448:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 449:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloTrim(uint32 mode, int32* iloAccuracyInPPT)
 450:Generated_Source\PSoC4/CyLFClk.c **** {
 451:Generated_Source\PSoC4/CyLFClk.c ****     uint32 timeOutClocks = CY_SYS_CLK_TIMEOUT;
 452:Generated_Source\PSoC4/CyLFClk.c ****     uint32 waitUntilCntr1Stops;
 453:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 454:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 455:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 456:Generated_Source\PSoC4/CyLFClk.c **** 
 457:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 458:Generated_Source\PSoC4/CyLFClk.c **** 
 459:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if DFT and CTRL registers were configures in CySysStartMeasurement*/
 460:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) &&
 461:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 462:Generated_Source\PSoC4/CyLFClk.c ****        (iloAccuracyInPPT != NULL))
 463:Generated_Source\PSoC4/CyLFClk.c ****     {
 464:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_BLOCKING == mode)
 465:Generated_Source\PSoC4/CyLFClk.c ****         {
 466:Generated_Source\PSoC4/CyLFClk.c ****             waitUntilCntr1Stops = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 467:Generated_Source\PSoC4/CyLFClk.c ****             do
 468:Generated_Source\PSoC4/CyLFClk.c ****             {
 469:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for measuring cycle*/
 470:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER; 
 471:Generated_Source\PSoC4/CyLFClk.c **** 
 472:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait until counter CNTR 1 will finish down-counting */
 473:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u == (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 474:Generated_Source\PSoC4/CyLFClk.c ****                 {
 475:Generated_Source\PSoC4/CyLFClk.c ****                     waitUntilCntr1Stops--;
 476:Generated_Source\PSoC4/CyLFClk.c ****                     if (0u == waitUntilCntr1Stops)
 477:Generated_Source\PSoC4/CyLFClk.c ****                     {
 478:Generated_Source\PSoC4/CyLFClk.c ****                         break;
 479:Generated_Source\PSoC4/CyLFClk.c ****                     }
 480:Generated_Source\PSoC4/CyLFClk.c ****                 }
 481:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 482:Generated_Source\PSoC4/CyLFClk.c ****                 timeOutClocks--;
 483:Generated_Source\PSoC4/CyLFClk.c **** 
 484:Generated_Source\PSoC4/CyLFClk.c ****             /* Untill ILO accuracy will be in range less than +/- 10% or timeout occurs*/
 485:Generated_Source\PSoC4/CyLFClk.c ****             } while((CYRET_SUCCESS != trimRunningStatus) && 
 486:Generated_Source\PSoC4/CyLFClk.c ****               (CYRET_INVALID_STATE != trimRunningStatus) && 
 487:Generated_Source\PSoC4/CyLFClk.c ****                                (0u != timeOutClocks));
 488:Generated_Source\PSoC4/CyLFClk.c **** 
 489:Generated_Source\PSoC4/CyLFClk.c ****             if (CYRET_SUCCESS == trimRunningStatus)
 490:Generated_Source\PSoC4/CyLFClk.c ****             {
 491:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_SUCCESS;
 492:Generated_Source\PSoC4/CyLFClk.c ****             }
 493:Generated_Source\PSoC4/CyLFClk.c ****             else
 494:Generated_Source\PSoC4/CyLFClk.c ****             {
 495:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u == timeOutClocks)
 496:Generated_Source\PSoC4/CyLFClk.c ****                 {
 497:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 498:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_TIMEOUT;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 19


 499:Generated_Source\PSoC4/CyLFClk.c ****                 }
 500:Generated_Source\PSoC4/CyLFClk.c ****                 else
 501:Generated_Source\PSoC4/CyLFClk.c ****                 {
 502:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_INVALID_STATE;
 503:Generated_Source\PSoC4/CyLFClk.c ****                 }
 504:Generated_Source\PSoC4/CyLFClk.c ****             }
 505:Generated_Source\PSoC4/CyLFClk.c ****         }
 506:Generated_Source\PSoC4/CyLFClk.c ****         /* Non - blocking mode */
 507:Generated_Source\PSoC4/CyLFClk.c ****         else
 508:Generated_Source\PSoC4/CyLFClk.c ****         {
 509:Generated_Source\PSoC4/CyLFClk.c ****             if (CY_SYS_CLK_TRIM_OR_COMP_FINISHED != trimRunningStatus)
 510:Generated_Source\PSoC4/CyLFClk.c ****             {
 511:Generated_Source\PSoC4/CyLFClk.c ****                 /* Checking if the counter CNTR 1 finished down-counting */
 512:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 513:Generated_Source\PSoC4/CyLFClk.c ****                 {
 514:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 515:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 516:Generated_Source\PSoC4/CyLFClk.c ****                 }
 517:Generated_Source\PSoC4/CyLFClk.c ****                 else
 518:Generated_Source\PSoC4/CyLFClk.c ****                 {
 519:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_STARTED;
 520:Generated_Source\PSoC4/CyLFClk.c ****                 }
 521:Generated_Source\PSoC4/CyLFClk.c ****             }
 522:Generated_Source\PSoC4/CyLFClk.c ****             else
 523:Generated_Source\PSoC4/CyLFClk.c ****             {
 524:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for next measuring */
 525:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 526:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 527:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 528:Generated_Source\PSoC4/CyLFClk.c ****             }
 529:Generated_Source\PSoC4/CyLFClk.c ****         }
 530:Generated_Source\PSoC4/CyLFClk.c ****     }
 531:Generated_Source\PSoC4/CyLFClk.c ****     else
 532:Generated_Source\PSoC4/CyLFClk.c ****     {
 533:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 534:Generated_Source\PSoC4/CyLFClk.c ****     }
 535:Generated_Source\PSoC4/CyLFClk.c **** 
 536:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 537:Generated_Source\PSoC4/CyLFClk.c **** }
 538:Generated_Source\PSoC4/CyLFClk.c **** 
 539:Generated_Source\PSoC4/CyLFClk.c **** 
 540:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 541:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloUpdateTrimReg
 542:Generated_Source\PSoC4/CyLFClk.c **** *********************************************************************************
 543:Generated_Source\PSoC4/CyLFClk.c **** *
 544:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 545:Generated_Source\PSoC4/CyLFClk.c **** * Function calculates ILO accuracy and check is error range is higher than 
 546:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10%. If Measured frequency is higher than +/- 10% function updates 
 547:Generated_Source\PSoC4/CyLFClk.c **** * ILO Trim register.
 548:Generated_Source\PSoC4/CyLFClk.c **** *
 549:Generated_Source\PSoC4/CyLFClk.c **** * \param
 550:Generated_Source\PSoC4/CyLFClk.c **** * iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 551:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned. The value returned in this pointer is not valid 
 552:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. If ILO frequency error is lower 
 553:Generated_Source\PSoC4/CyLFClk.c **** * than +/- 10% then the value returned in this pointer will be updated.
 554:Generated_Source\PSoC4/CyLFClk.c **** *
 555:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates that ILO frequency error is lower than 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 20


 556:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and no actions are required.
 557:Generated_Source\PSoC4/CyLFClk.c **** *
 558:Generated_Source\PSoC4/CyLFClk.c **** * \return  CYRET_STARTED - Indicates that ILO frequency error is higher than 
 559:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and ILO Trim register was updated.
 560:Generated_Source\PSoC4/CyLFClk.c **** *
 561:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful.
 562:Generated_Source\PSoC4/CyLFClk.c **** *
 563:Generated_Source\PSoC4/CyLFClk.c **** * Post #1 - To obtain 10% ILO accuracy the calculated accuracy should be equal 
 564:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_ERROR_RANGE = 5.6%. Error value should take to account IMO error of 
 565:Generated_Source\PSoC4/CyLFClk.c **** * +/-2% (+/-0.64kHz), trim step of 2.36kHz (+/-1.18kHz) and error while ILO 
 566:Generated_Source\PSoC4/CyLFClk.c **** * frequency measuring.
 567:Generated_Source\PSoC4/CyLFClk.c **** *
 568:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 569:Generated_Source\PSoC4/CyLFClk.c **** *
 570:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 571:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT)
 572:Generated_Source\PSoC4/CyLFClk.c **** {
 573:Generated_Source\PSoC4/CyLFClk.c ****     uint32 measuredIloFreq;
 574:Generated_Source\PSoC4/CyLFClk.c ****     uint32 currentIloTrimValue;
 575:Generated_Source\PSoC4/CyLFClk.c ****     int32 iloAccuracyValue;
 576:Generated_Source\PSoC4/CyLFClk.c ****     int32 trimStep;
 577:Generated_Source\PSoC4/CyLFClk.c ****     cystatus errorRangeStatus;
 578:Generated_Source\PSoC4/CyLFClk.c **** 
 579:Generated_Source\PSoC4/CyLFClk.c ****     if(0u != CY_SYS_CNT_REG2_REG)
 580:Generated_Source\PSoC4/CyLFClk.c ****     {
 581:Generated_Source\PSoC4/CyLFClk.c ****         measuredIloFreq = (CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_SYS_
 582:Generated_Source\PSoC4/CyLFClk.c **** 
 583:Generated_Source\PSoC4/CyLFClk.c ****         /* Calculate value of error in PPT according to formula - 
 584:Generated_Source\PSoC4/CyLFClk.c ****         *       ((measuredIlofrequency - iloDesired freaquency) * 1000 / iloDesired freaquency) */
 585:Generated_Source\PSoC4/CyLFClk.c ****         iloAccuracyValue = (((int32) measuredIloFreq - (int32) CY_SYS_CLK_ILO_DESIRED_FREQ_HZ) * \
 586:Generated_Source\PSoC4/CyLFClk.c ****                             ((int32) CY_SYS_CLK_PERTHOUSAND)) / ((int32) CY_SYS_CLK_ILO_DESIRED_FRE
 587:Generated_Source\PSoC4/CyLFClk.c **** 
 588:Generated_Source\PSoC4/CyLFClk.c ****         /* Check if ILO accuracy is more than +/- CY_SYS_CLK_ERROR_RANGE. See post #1 of API descri
 589:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_ERROR_RANGE < (uint32) (CY_SYS_CLK_ABS_MACRO(iloAccuracyValue)))
 590:Generated_Source\PSoC4/CyLFClk.c ****         {
 591:Generated_Source\PSoC4/CyLFClk.c ****             if (0 < iloAccuracyValue)
 592:Generated_Source\PSoC4/CyLFClk.c ****             {
 593:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) + 
 594:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 595:Generated_Source\PSoC4/CyLFClk.c ****             }
 596:Generated_Source\PSoC4/CyLFClk.c ****             else
 597:Generated_Source\PSoC4/CyLFClk.c ****             {
 598:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) - 
 599:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 600:Generated_Source\PSoC4/CyLFClk.c ****             }
 601:Generated_Source\PSoC4/CyLFClk.c ****             currentIloTrimValue = (CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK);
 602:Generated_Source\PSoC4/CyLFClk.c ****             trimStep = (int32) currentIloTrimValue - trimStep;
 603:Generated_Source\PSoC4/CyLFClk.c **** 
 604:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep > CY_SYS_CLK_FOURBITS_MAX)
 605:Generated_Source\PSoC4/CyLFClk.c ****             {
 606:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = CY_SYS_CLK_FOURBITS_MAX;
 607:Generated_Source\PSoC4/CyLFClk.c ****             }
 608:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep < 0)
 609:Generated_Source\PSoC4/CyLFClk.c ****             {
 610:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = 0;
 611:Generated_Source\PSoC4/CyLFClk.c ****             }
 612:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = (CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MASK
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 21


 613:Generated_Source\PSoC4/CyLFClk.c ****                                                                  ((uint32) trimStep);
 614:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_STARTED;
 615:Generated_Source\PSoC4/CyLFClk.c ****         } /* Else return success because error is in +/- 10% range*/
 616:Generated_Source\PSoC4/CyLFClk.c ****         else
 617:Generated_Source\PSoC4/CyLFClk.c ****         {
 618:Generated_Source\PSoC4/CyLFClk.c ****             /* Write trimmed ILO accuracy through pointer. */
 619:Generated_Source\PSoC4/CyLFClk.c ****             *iloAccuracyInPPT = iloAccuracyValue;
 620:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_SUCCESS;
 621:Generated_Source\PSoC4/CyLFClk.c ****         }
 622:Generated_Source\PSoC4/CyLFClk.c ****     }
 623:Generated_Source\PSoC4/CyLFClk.c ****     else
 624:Generated_Source\PSoC4/CyLFClk.c ****     {
 625:Generated_Source\PSoC4/CyLFClk.c ****         errorRangeStatus = CYRET_INVALID_STATE;
 626:Generated_Source\PSoC4/CyLFClk.c ****     }
 627:Generated_Source\PSoC4/CyLFClk.c **** return (errorRangeStatus);
 628:Generated_Source\PSoC4/CyLFClk.c **** }
 629:Generated_Source\PSoC4/CyLFClk.c **** 
 630:Generated_Source\PSoC4/CyLFClk.c **** 
 631:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 632:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloRestoreFactoryTrim
 633:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 634:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 635:Generated_Source\PSoC4/CyLFClk.c **** * Restores the ILO Trim Register to factory value.
 636:Generated_Source\PSoC4/CyLFClk.c **** *
 637:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to 
 638:Generated_Source\PSoC4/CyLFClk.c **** * calling this API. Otherwise CYRET_UNKNOWN will be returned.
 639:Generated_Source\PSoC4/CyLFClk.c **** *
 640:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices except for PSoC 4000 / PSoC 4100 / PSoC 4200 
 641:Generated_Source\PSoC4/CyLFClk.c **** * / PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices.
 642:Generated_Source\PSoC4/CyLFClk.c **** *
 643:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Operation was successful. 
 644:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_UNKNOWN - CySysClkIloStartMeasurement() was not called 
 645:Generated_Source\PSoC4/CyLFClk.c **** * before this API. Hence the trim value cannot be updated.
 646:Generated_Source\PSoC4/CyLFClk.c **** *
 647:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 648:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloRestoreFactoryTrim(void)
 649:Generated_Source\PSoC4/CyLFClk.c **** {
 650:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus = CYRET_SUCCESS;
 651:Generated_Source\PSoC4/CyLFClk.c **** 
 652:Generated_Source\PSoC4/CyLFClk.c ****     /* Check was defaultIloTrimRegValue modified in CySysClkIloStartMeasurement */
 653:Generated_Source\PSoC4/CyLFClk.c ****     if(CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE != defaultIloTrimRegValue)
 654:Generated_Source\PSoC4/CyLFClk.c ****         {
 655:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = ((CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MAS
 656:Generated_Source\PSoC4/CyLFClk.c ****                                        (defaultIloTrimRegValue & CY_SYS_CLK_ILO_TRIM_MASK));
 657:Generated_Source\PSoC4/CyLFClk.c ****         }
 658:Generated_Source\PSoC4/CyLFClk.c ****         else
 659:Generated_Source\PSoC4/CyLFClk.c ****         {
 660:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_UNKNOWN;
 661:Generated_Source\PSoC4/CyLFClk.c ****         }
 662:Generated_Source\PSoC4/CyLFClk.c **** 
 663:Generated_Source\PSoC4/CyLFClk.c ****         return (returnStatus);
 664:Generated_Source\PSoC4/CyLFClk.c **** }
 665:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 666:Generated_Source\PSoC4/CyLFClk.c **** 
 667:Generated_Source\PSoC4/CyLFClk.c **** 
 668:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
 669:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 22


 670:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkGetLfclkSource
 671:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
 672:Generated_Source\PSoC4/CyLFClk.c **** *
 673:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 674:Generated_Source\PSoC4/CyLFClk.c **** *  Gets the clock source for the LFCLK clock.
 675:Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4100M /
 676:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M / PSoC 4200L.
 677:Generated_Source\PSoC4/CyLFClk.c **** *
 678:Generated_Source\PSoC4/CyLFClk.c **** * \return The LFCLK source:
 679:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
 680:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
 681:Generated_Source\PSoC4/CyLFClk.c **** *
 682:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 683:Generated_Source\PSoC4/CyLFClk.c **** *
 684:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 685:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void)
 686:Generated_Source\PSoC4/CyLFClk.c ****     {
 687:Generated_Source\PSoC4/CyLFClk.c ****         uint32 lfclkSource;
 688:Generated_Source\PSoC4/CyLFClk.c ****         lfclkSource = CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK;
 689:Generated_Source\PSoC4/CyLFClk.c ****         return (lfclkSource);
 690:Generated_Source\PSoC4/CyLFClk.c ****     }
 691:Generated_Source\PSoC4/CyLFClk.c **** 
 692:Generated_Source\PSoC4/CyLFClk.c ****     
 693:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 694:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkSetLfclkSource
 695:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 696:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 697:Generated_Source\PSoC4/CyLFClk.c **** *  Sets the clock source for the LFCLK clock.
 698:Generated_Source\PSoC4/CyLFClk.c **** *
 699:Generated_Source\PSoC4/CyLFClk.c **** * The switch between LFCLK sources must be done between the positive edges of
 700:Generated_Source\PSoC4/CyLFClk.c **** * LFCLK, because the glitch risk is around the LFCLK positive edge. To ensure
 701:Generated_Source\PSoC4/CyLFClk.c **** * that the switch can be done safely, the WDT counter value is read until it
 702:Generated_Source\PSoC4/CyLFClk.c **** * changes.
 703:Generated_Source\PSoC4/CyLFClk.c **** *
 704:Generated_Source\PSoC4/CyLFClk.c **** * That means that the positive edge just finished and the switch is performed.
 705:Generated_Source\PSoC4/CyLFClk.c **** * The enabled WDT counter is used for that purpose. If no counters are enabled,
 706:Generated_Source\PSoC4/CyLFClk.c **** * counter 0 is enabled. And after the LFCLK source is switched, counter 0
 707:Generated_Source\PSoC4/CyLFClk.c **** * configuration is restored.
 708:Generated_Source\PSoC4/CyLFClk.c **** *
 709:Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for devices with more than one source for 
 710:Generated_Source\PSoC4/CyLFClk.c **** * LFCLK - PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 4100M / PSoC 4200M / 
 711:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L.
 712:Generated_Source\PSoC4/CyLFClk.c **** *
 713:Generated_Source\PSoC4/CyLFClk.c **** * \note For PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices LFCLK can
 714:Generated_Source\PSoC4/CyLFClk.c **** * only be sourced from ILO even though WCO is available.
 715:Generated_Source\PSoC4/CyLFClk.c **** *
 716:Generated_Source\PSoC4/CyLFClk.c **** * \param
 717:Generated_Source\PSoC4/CyLFClk.c **** * source
 718:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO - Internal Low Frequency (32 kHz) 
 719:Generated_Source\PSoC4/CyLFClk.c **** * Oscillator (ILO).<br>
 720:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO - Low Frequency Watch Crystal Oscillator (WCO).
 721:Generated_Source\PSoC4/CyLFClk.c **** *
 722:Generated_Source\PSoC4/CyLFClk.c **** * \details
 723:Generated_Source\PSoC4/CyLFClk.c **** * This function has no effect if WDT is locked (CySysWdtLock() is called). 
 724:Generated_Source\PSoC4/CyLFClk.c **** * Call CySysWdtUnlock() to unlock WDT.
 725:Generated_Source\PSoC4/CyLFClk.c **** *
 726:Generated_Source\PSoC4/CyLFClk.c **** * Both the current source and the new source must be running and stable before
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 23


 727:Generated_Source\PSoC4/CyLFClk.c **** * calling this function.
 728:Generated_Source\PSoC4/CyLFClk.c **** *
 729:Generated_Source\PSoC4/CyLFClk.c **** * Changing the LFCLK clock source may change the LFCLK clock frequency and
 730:Generated_Source\PSoC4/CyLFClk.c **** * affect the functionality that uses this clock. For example, watchdog timer
 731:Generated_Source\PSoC4/CyLFClk.c **** * "uses this clock" or "this clock uses" (WDT) is clocked by LFCLK.
 732:Generated_Source\PSoC4/CyLFClk.c **** *
 733:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 734:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetLfclkSource(uint32 source)
 735:Generated_Source\PSoC4/CyLFClk.c ****     {
 736:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 737:Generated_Source\PSoC4/CyLFClk.c **** 
 738:Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetLfclkSource() != source)
 739:Generated_Source\PSoC4/CyLFClk.c ****         {
 740:Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
 741:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeCatch();
 742:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = (CY_SYS_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_LFCLK_SEL_MASK)) 
 743:Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_LFCLK_SEL_MASK);
 744:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeRestore();
 745:Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
 746:Generated_Source\PSoC4/CyLFClk.c ****         }
 747:Generated_Source\PSoC4/CyLFClk.c ****     }
 748:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
 749:Generated_Source\PSoC4/CyLFClk.c **** 
 750:Generated_Source\PSoC4/CyLFClk.c **** 
 751:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO)
 752:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 753:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStart
 754:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 755:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 756:Generated_Source\PSoC4/CyLFClk.c ****     *  Enables Watch Crystal Oscillator (WCO).
 757:Generated_Source\PSoC4/CyLFClk.c ****     * 
 758:Generated_Source\PSoC4/CyLFClk.c ****     * This API enables WCO which is used as a source for LFCLK. Similar to ILO, 
 759:Generated_Source\PSoC4/CyLFClk.c ****     * WCO is also available in all modes except Hibernate and Stop modes.
 760:Generated_Source\PSoC4/CyLFClk.c ****     * \note In PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices
 761:Generated_Source\PSoC4/CyLFClk.c ****     * WCO cannot be a source for the LFCLK. 
 762:Generated_Source\PSoC4/CyLFClk.c ****     *
 763:Generated_Source\PSoC4/CyLFClk.c ****     *  WCO is always enabled in High Power Mode (HPM). Refer to the device
 764:Generated_Source\PSoC4/CyLFClk.c ****     *  datasheet for the  WCO startup time. Once WCO becomes stable it can be
 765:Generated_Source\PSoC4/CyLFClk.c ****     *  switched to Low Power Mode (LPM). Note that oscillator can be unstable
 766:Generated_Source\PSoC4/CyLFClk.c ****     *  during a switch and hence its output should not be used at that moment.
 767:Generated_Source\PSoC4/CyLFClk.c ****     *
 768:Generated_Source\PSoC4/CyLFClk.c ****     *  The CySysClkWcoSetPowerMode() function configures the WCO power mode.
 769:Generated_Source\PSoC4/CyLFClk.c ****     *
 770:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 771:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoStart(void)
 772:Generated_Source\PSoC4/CyLFClk.c ****     {
 773:Generated_Source\PSoC4/CyLFClk.c ****         CySysClkWcoSetHighPowerMode();
 774:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 775:Generated_Source\PSoC4/CyLFClk.c ****     }
 776:Generated_Source\PSoC4/CyLFClk.c **** 
 777:Generated_Source\PSoC4/CyLFClk.c **** 
 778:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 779:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStop
 780:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 781:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 782:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the 32 KHz Crystal Oscillator.
 783:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 24


 784:Generated_Source\PSoC4/CyLFClk.c ****     * API switch of WCO.
 785:Generated_Source\PSoC4/CyLFClk.c ****     * \note PSoC 4100S / PSoC Analog Coprocessor: WCO is required for DeepSleep 
 786:Generated_Source\PSoC4/CyLFClk.c ****     * Timer's operation.
 787:Generated_Source\PSoC4/CyLFClk.c ****     *
 788:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 789:Generated_Source\PSoC4/CyLFClk.c ****     void  CySysClkWcoStop(void)
 790:Generated_Source\PSoC4/CyLFClk.c ****     {
 791:Generated_Source\PSoC4/CyLFClk.c ****         #if (CY_IP_SRSSV2)
 792:Generated_Source\PSoC4/CyLFClk.c ****             uint8  interruptState;
 793:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
 794:Generated_Source\PSoC4/CyLFClk.c **** 
 795:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 796:Generated_Source\PSoC4/CyLFClk.c ****         {
 797:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_SRSSV2)
 798:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_WCO == CySysClkGetLfclkSource())
 799:Generated_Source\PSoC4/CyLFClk.c ****                 {
 800:Generated_Source\PSoC4/CyLFClk.c ****                     interruptState = CyEnterCriticalSection();
 801:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeCatch();
 802:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 803:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeRestore();
 804:Generated_Source\PSoC4/CyLFClk.c ****                     CyExitCriticalSection(interruptState);
 805:Generated_Source\PSoC4/CyLFClk.c ****                 }
 806:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 807:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_SRSSV2) */
 808:Generated_Source\PSoC4/CyLFClk.c ****             {
 809:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 810:Generated_Source\PSoC4/CyLFClk.c ****             }
 811:Generated_Source\PSoC4/CyLFClk.c ****         } /* Otherwise do nothing. WCO configuration cannot be changed. */
 812:Generated_Source\PSoC4/CyLFClk.c ****     }
 813:Generated_Source\PSoC4/CyLFClk.c **** 
 814:Generated_Source\PSoC4/CyLFClk.c **** 
 815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoEnabled
 817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal Reports the WCO enable state.
 819:Generated_Source\PSoC4/CyLFClk.c ****     *
 820:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 if WCO is enabled
 821:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 if WCO is disabled.
 822:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 823:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 824:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoEnabled(void)
 825:Generated_Source\PSoC4/CyLFClk.c ****     {
 826:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE))) ?
 827:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 1u :
 828:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 0u);
 829:Generated_Source\PSoC4/CyLFClk.c ****     }
 830:Generated_Source\PSoC4/CyLFClk.c **** 
 831:Generated_Source\PSoC4/CyLFClk.c **** 
 832:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 833:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoSetPowerMode
 834:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 835:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 836:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the power mode for the 32 KHz WCO.
 837:Generated_Source\PSoC4/CyLFClk.c ****     *
 838:Generated_Source\PSoC4/CyLFClk.c ****     * By default (if this function is not called), the WCO is in High power mode 
 839:Generated_Source\PSoC4/CyLFClk.c ****     * during Active and device's low power modes
 840:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 25


 841:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
 842:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_HPM - The High Power mode.<br>
 843:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_LPM - The Low Power mode.
 844:Generated_Source\PSoC4/CyLFClk.c ****     *
 845:Generated_Source\PSoC4/CyLFClk.c ****     * \return A previous power mode. The same as the parameters.
 846:Generated_Source\PSoC4/CyLFClk.c ****     *
 847:Generated_Source\PSoC4/CyLFClk.c ****     * \note
 848:Generated_Source\PSoC4/CyLFClk.c ****     * The WCO Low Power mode is applicable for PSoC 4100 BLE / PSoC 4200 BLE devices.
 849:Generated_Source\PSoC4/CyLFClk.c ****     *
 850:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 851:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoSetPowerMode(uint32 mode)
 852:Generated_Source\PSoC4/CyLFClk.c ****     {
 853:Generated_Source\PSoC4/CyLFClk.c ****         uint32 powerModeStatus;
 854:Generated_Source\PSoC4/CyLFClk.c **** 
 855:Generated_Source\PSoC4/CyLFClk.c ****         powerModeStatus = CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_LPM_EN;
 856:Generated_Source\PSoC4/CyLFClk.c **** 
 857:Generated_Source\PSoC4/CyLFClk.c ****         switch(mode)
 858:Generated_Source\PSoC4/CyLFClk.c ****         {
 859:Generated_Source\PSoC4/CyLFClk.c ****         case CY_SYS_CLK_WCO_HPM:
 860:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkWcoSetHighPowerMode();
 861:Generated_Source\PSoC4/CyLFClk.c ****             break;
 862:Generated_Source\PSoC4/CyLFClk.c **** 
 863:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_PSOC4_4100BL || CY_PSOC4_4200BL)
 864:Generated_Source\PSoC4/CyLFClk.c ****             case CY_SYS_CLK_WCO_LPM:
 865:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkWcoSetLowPowerMode();
 866:Generated_Source\PSoC4/CyLFClk.c ****                 break;
 867:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_PSOC4_4100BL || CY_PSOC4_4200BL) */
 868:Generated_Source\PSoC4/CyLFClk.c **** 
 869:Generated_Source\PSoC4/CyLFClk.c ****         default:
 870:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 871:Generated_Source\PSoC4/CyLFClk.c ****             break;
 872:Generated_Source\PSoC4/CyLFClk.c ****         }
 873:Generated_Source\PSoC4/CyLFClk.c **** 
 874:Generated_Source\PSoC4/CyLFClk.c ****         return (powerModeStatus);
 875:Generated_Source\PSoC4/CyLFClk.c ****     }
 876:Generated_Source\PSoC4/CyLFClk.c **** 
 877:Generated_Source\PSoC4/CyLFClk.c **** 
 878:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 879:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkWcoClockOutSelect
 880:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 881:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 882:Generated_Source\PSoC4/CyLFClk.c **** * Selects the WCO block output source.
 883:Generated_Source\PSoC4/CyLFClk.c **** *
 884:Generated_Source\PSoC4/CyLFClk.c **** * In addition to generating 32.768 kHz clock from external crystals, WCO 
 885:Generated_Source\PSoC4/CyLFClk.c **** * can be sourced by external clock source using wco_out pin. The API help to
 886:Generated_Source\PSoC4/CyLFClk.c **** * lets you select between the sources: External crystal or external pin.
 887:Generated_Source\PSoC4/CyLFClk.c **** *
 888:Generated_Source\PSoC4/CyLFClk.c **** * If you want to use external pin to drive WCO the next procedure is required:
 889:Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
 890:Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive the wco_out pin to an external signal source.
 891:Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_PIN).
 892:Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO and wait for 15 us before clocking the XO pad at the high 
 893:Generated_Source\PSoC4/CyLFClk.c **** * potential. Let's assume you are using the 1.6v clock amplitude, then the
 894:Generated_Source\PSoC4/CyLFClk.c **** * sequence would start at 1.6v, then 0v, then 1.6v etc at a chosen frequency.
 895:Generated_Source\PSoC4/CyLFClk.c **** *
 896:Generated_Source\PSoC4/CyLFClk.c **** * If you want to use WCO after using an external pin source:
 897:Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 26


 898:Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive off wco_out pin with external signal source.
 899:Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_CRYSTAL).
 900:Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO.
 901:Generated_Source\PSoC4/CyLFClk.c **** *
 902:Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 903:Generated_Source\PSoC4/CyLFClk.c **** * Do not use the oscillator output clock prior to a 15uS delay in your system.
 904:Generated_Source\PSoC4/CyLFClk.c **** * There are no limitations on the external clock frequency.
 905:Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 906:Generated_Source\PSoC4/CyLFClk.c **** * When external clock source was selected to drive WCO block the IMO can be 
 907:Generated_Source\PSoC4/CyLFClk.c **** * trimmed only when external clock source period is equal to WCO external
 908:Generated_Source\PSoC4/CyLFClk.c **** * crystal period. Also external clock source accuracy should be higher 
 909:Generated_Source\PSoC4/CyLFClk.c **** * or equal to WCO external crystal accuracy.
 910:Generated_Source\PSoC4/CyLFClk.c **** *
 911:Generated_Source\PSoC4/CyLFClk.c **** * \param clockSel
 912:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_CRYSTAL - Selects External crystal as clock 
 913:Generated_Source\PSoC4/CyLFClk.c **** * source of WCO.<br>
 914:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_PIN - Selects External clock input on wco_in pin as 
 915:Generated_Source\PSoC4/CyLFClk.c **** * clock source of WCO.
 916:Generated_Source\PSoC4/CyLFClk.c **** *
 917:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 918:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkWcoClockOutSelect(uint32 clockSel)
 919:Generated_Source\PSoC4/CyLFClk.c ****     {
 920:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 921:Generated_Source\PSoC4/CyLFClk.c ****         {
 922:Generated_Source\PSoC4/CyLFClk.c ****             if (1u >= clockSel)
 923:Generated_Source\PSoC4/CyLFClk.c ****             {
 924:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG = (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(~CY_SYS_CLK_WCO_S
 925:Generated_Source\PSoC4/CyLFClk.c ****                                         (clockSel << CY_SYS_CLK_WCO_SELECT_PIN_OFFSET);
 926:Generated_Source\PSoC4/CyLFClk.c ****             }
 927:Generated_Source\PSoC4/CyLFClk.c ****             else
 928:Generated_Source\PSoC4/CyLFClk.c ****             {
 929:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 930:Generated_Source\PSoC4/CyLFClk.c ****             }
 931:Generated_Source\PSoC4/CyLFClk.c ****         }
 932:Generated_Source\PSoC4/CyLFClk.c ****     }
 933:Generated_Source\PSoC4/CyLFClk.c **** #endif  /* (CY_IP_WCO) */
 934:Generated_Source\PSoC4/CyLFClk.c **** 
 935:Generated_Source\PSoC4/CyLFClk.c **** 
 936:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 937:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 938:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLock
 939:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 940:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 941:Generated_Source\PSoC4/CyLFClk.c ****     * Locks out configuration changes to the Watchdog timer registers and ILO
 942:Generated_Source\PSoC4/CyLFClk.c ****     * configuration register.
 943:Generated_Source\PSoC4/CyLFClk.c ****     *
 944:Generated_Source\PSoC4/CyLFClk.c ****     * After this function is called, ILO clock can't be disabled until
 945:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtUnlock() is called.
 946:Generated_Source\PSoC4/CyLFClk.c ****     *
 947:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 948:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtLock(void)
 949:Generated_Source\PSoC4/CyLFClk.c ****     {
 518              		.loc 1 949 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 27


 523              		.cfi_def_cfa_offset 12
 524              		.cfi_offset 4, -12
 525              		.cfi_offset 7, -8
 526              		.cfi_offset 14, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 24
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 950:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 951:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 531              		.loc 1 951 0
 532 0006 FC1D     		adds	r4, r7, #7
 533 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 534 000c 0300     		movs	r3, r0
 535 000e 2370     		strb	r3, [r4]
 952:Generated_Source\PSoC4/CyLFClk.c **** 
 953:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = (CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK)) 
 536              		.loc 1 953 0
 537 0010 074B     		ldr	r3, .L36
 538 0012 074A     		ldr	r2, .L36
 539 0014 1268     		ldr	r2, [r2]
 540 0016 C021     		movs	r1, #192
 541 0018 0902     		lsls	r1, r1, #8
 542 001a 0A43     		orrs	r2, r1
 543 001c 1A60     		str	r2, [r3]
 954:Generated_Source\PSoC4/CyLFClk.c ****                  CY_SYS_WDT_CLK_LOCK_BITS_MASK;
 955:Generated_Source\PSoC4/CyLFClk.c **** 
 956:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 544              		.loc 1 956 0
 545 001e FB1D     		adds	r3, r7, #7
 546 0020 1B78     		ldrb	r3, [r3]
 547 0022 1800     		movs	r0, r3
 548 0024 FFF7FEFF 		bl	CyExitCriticalSection
 957:Generated_Source\PSoC4/CyLFClk.c ****     }
 549              		.loc 1 957 0
 550 0028 C046     		nop
 551 002a BD46     		mov	sp, r7
 552 002c 03B0     		add	sp, sp, #12
 553              		@ sp needed
 554 002e 90BD     		pop	{r4, r7, pc}
 555              	.L37:
 556              		.align	2
 557              	.L36:
 558 0030 00010B40 		.word	1074462976
 559              		.cfi_endproc
 560              	.LFE6:
 561              		.size	CySysWdtLock, .-CySysWdtLock
 562              		.section	.text.CySysWdtLocked,"ax",%progbits
 563              		.align	2
 564              		.code	16
 565              		.thumb_func
 566              		.type	CySysWdtLocked, %function
 567              	CySysWdtLocked:
 568              	.LFB7:
 958:Generated_Source\PSoC4/CyLFClk.c **** 
 959:Generated_Source\PSoC4/CyLFClk.c **** 
 960:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 28


 961:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLocked
 962:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 963:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 964:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the WDT lock state.
 965:Generated_Source\PSoC4/CyLFClk.c ****     *
 966:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - WDT is locked, and 0 - WDT is unlocked.
 967:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 969:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void)
 970:Generated_Source\PSoC4/CyLFClk.c ****     {
 569              		.loc 1 970 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 1, uses_anonymous_args = 0
 573 0000 80B5     		push	{r7, lr}
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 7, -8
 576              		.cfi_offset 14, -4
 577 0002 00AF     		add	r7, sp, #0
 578              		.cfi_def_cfa_register 7
 971:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal 0 */
 972:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_SELECT_REG & (uint32)(CY_SYS_WDT_CLK_LOCK_BITS_MASK))) ? (uint32
 579              		.loc 1 972 0
 580 0004 054B     		ldr	r3, .L42
 581 0006 1A68     		ldr	r2, [r3]
 582 0008 C023     		movs	r3, #192
 583 000a 1B02     		lsls	r3, r3, #8
 584 000c 1340     		ands	r3, r2
 585 000e 01D0     		beq	.L39
 586              		.loc 1 972 0 is_stmt 0 discriminator 1
 587 0010 0123     		movs	r3, #1
 588 0012 00E0     		b	.L41
 589              	.L39:
 590              		.loc 1 972 0 discriminator 2
 591 0014 0023     		movs	r3, #0
 592              	.L41:
 973:Generated_Source\PSoC4/CyLFClk.c ****     }
 593              		.loc 1 973 0 is_stmt 1 discriminator 5
 594 0016 1800     		movs	r0, r3
 595 0018 BD46     		mov	sp, r7
 596              		@ sp needed
 597 001a 80BD     		pop	{r7, pc}
 598              	.L43:
 599              		.align	2
 600              	.L42:
 601 001c 00010B40 		.word	1074462976
 602              		.cfi_endproc
 603              	.LFE7:
 604              		.size	CySysWdtLocked, .-CySysWdtLocked
 605              		.section	.text.CySysWdtUnlock,"ax",%progbits
 606              		.align	2
 607              		.global	CySysWdtUnlock
 608              		.code	16
 609              		.thumb_func
 610              		.type	CySysWdtUnlock, %function
 611              	CySysWdtUnlock:
 612              	.LFB8:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 29


 974:Generated_Source\PSoC4/CyLFClk.c **** 
 975:Generated_Source\PSoC4/CyLFClk.c **** 
 976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnlock
 978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 979:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 980:Generated_Source\PSoC4/CyLFClk.c ****     *  Unlocks the Watchdog Timer configuration register.
 981:Generated_Source\PSoC4/CyLFClk.c ****     *
 982:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 983:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnlock(void)
 984:Generated_Source\PSoC4/CyLFClk.c ****     {
 613              		.loc 1 984 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 8
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 0000 90B5     		push	{r4, r7, lr}
 618              		.cfi_def_cfa_offset 12
 619              		.cfi_offset 4, -12
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 83B0     		sub	sp, sp, #12
 623              		.cfi_def_cfa_offset 24
 624 0004 00AF     		add	r7, sp, #0
 625              		.cfi_def_cfa_register 7
 985:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 986:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 626              		.loc 1 986 0
 627 0006 FC1D     		adds	r4, r7, #7
 628 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 629 000c 0300     		movs	r3, r0
 630 000e 2370     		strb	r3, [r4]
 987:Generated_Source\PSoC4/CyLFClk.c **** 
 988:Generated_Source\PSoC4/CyLFClk.c ****         /* Removing WDT lock requires two writes */
 989:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 631              		.loc 1 989 0
 632 0010 0D4B     		ldr	r3, .L45
 633 0012 0D4A     		ldr	r2, .L45
 634 0014 1268     		ldr	r2, [r2]
 635 0016 0D49     		ldr	r1, .L45+4
 636 0018 0A40     		ands	r2, r1
 637 001a 8021     		movs	r1, #128
 638 001c C901     		lsls	r1, r1, #7
 639 001e 0A43     		orrs	r2, r1
 640 0020 1A60     		str	r2, [r3]
 990:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT0);
 991:Generated_Source\PSoC4/CyLFClk.c **** 
 992:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 641              		.loc 1 992 0
 642 0022 094B     		ldr	r3, .L45
 643 0024 084A     		ldr	r2, .L45
 644 0026 1268     		ldr	r2, [r2]
 645 0028 0849     		ldr	r1, .L45+4
 646 002a 0A40     		ands	r2, r1
 647 002c 8021     		movs	r1, #128
 648 002e 0902     		lsls	r1, r1, #8
 649 0030 0A43     		orrs	r2, r1
 650 0032 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 30


 993:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT1);
 994:Generated_Source\PSoC4/CyLFClk.c **** 
 995:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 651              		.loc 1 995 0
 652 0034 FB1D     		adds	r3, r7, #7
 653 0036 1B78     		ldrb	r3, [r3]
 654 0038 1800     		movs	r0, r3
 655 003a FFF7FEFF 		bl	CyExitCriticalSection
 996:Generated_Source\PSoC4/CyLFClk.c ****     }
 656              		.loc 1 996 0
 657 003e C046     		nop
 658 0040 BD46     		mov	sp, r7
 659 0042 03B0     		add	sp, sp, #12
 660              		@ sp needed
 661 0044 90BD     		pop	{r4, r7, pc}
 662              	.L46:
 663 0046 C046     		.align	2
 664              	.L45:
 665 0048 00010B40 		.word	1074462976
 666 004c FF3FFFFF 		.word	-49153
 667              		.cfi_endproc
 668              	.LFE8:
 669              		.size	CySysWdtUnlock, .-CySysWdtUnlock
 670              		.section	.text.CySysWdtGetEnabledStatus,"ax",%progbits
 671              		.align	2
 672              		.global	CySysWdtGetEnabledStatus
 673              		.code	16
 674              		.thumb_func
 675              		.type	CySysWdtGetEnabledStatus, %function
 676              	CySysWdtGetEnabledStatus:
 677              	.LFB9:
 997:Generated_Source\PSoC4/CyLFClk.c **** 
 998:Generated_Source\PSoC4/CyLFClk.c **** 
 999:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1000:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1001:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1002:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1003:Generated_Source\PSoC4/CyLFClk.c ****     *  Reads the enabled status of one of the three WDT counters.
1004:Generated_Source\PSoC4/CyLFClk.c ****     *
1005:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1006:Generated_Source\PSoC4/CyLFClk.c ****     *
1007:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1008:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the counter is disabled.
1009:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the counter is enabled.
1010:Generated_Source\PSoC4/CyLFClk.c ****     *
1011:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1012:Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual WDT counter status from the status register. It may
1013:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles for the WDT status register to contain actual data
1014:Generated_Source\PSoC4/CyLFClk.c ****     * after the WDT counter is enabled.
1015:Generated_Source\PSoC4/CyLFClk.c ****     *
1016:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1017:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(uint32 counterNum)
1018:Generated_Source\PSoC4/CyLFClk.c ****     {
 678              		.loc 1 1018 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 8
 681              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 31


 682 0000 80B5     		push	{r7, lr}
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 82B0     		sub	sp, sp, #8
 687              		.cfi_def_cfa_offset 16
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 7860     		str	r0, [r7, #4]
1019:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
 691              		.loc 1 1019 0
 692 0008 7B68     		ldr	r3, [r7, #4]
 693 000a 022B     		cmp	r3, #2
 694 000c 02D9     		bls	.L48
 695              		.loc 1 1019 0 is_stmt 0 discriminator 1
 696 000e 0020     		movs	r0, #0
 697 0010 FFF7FEFF 		bl	CyHalt
 698              	.L48:
1020:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONTROL_REG >> ((CY_SYS_WDT_CNT_SHIFT * counterNum) + CY_SYS_WDT_CNT_ST
 699              		.loc 1 1020 0 is_stmt 1
 700 0014 064B     		ldr	r3, .L50
 701 0016 1A68     		ldr	r2, [r3]
 702 0018 7B68     		ldr	r3, [r7, #4]
 703 001a DB00     		lsls	r3, r3, #3
 704 001c 0133     		adds	r3, r3, #1
 705 001e DA40     		lsrs	r2, r2, r3
 706 0020 1300     		movs	r3, r2
 707 0022 0122     		movs	r2, #1
 708 0024 1340     		ands	r3, r2
1021:Generated_Source\PSoC4/CyLFClk.c ****     }
 709              		.loc 1 1021 0
 710 0026 1800     		movs	r0, r3
 711 0028 BD46     		mov	sp, r7
 712 002a 02B0     		add	sp, sp, #8
 713              		@ sp needed
 714 002c 80BD     		pop	{r7, pc}
 715              	.L51:
 716 002e C046     		.align	2
 717              	.L50:
 718 0030 10020B40 		.word	1074463248
 719              		.cfi_endproc
 720              	.LFE9:
 721              		.size	CySysWdtGetEnabledStatus, .-CySysWdtGetEnabledStatus
 722              		.section	.text.CySysWdtSetMode,"ax",%progbits
 723              		.align	2
 724              		.global	CySysWdtSetMode
 725              		.code	16
 726              		.thumb_func
 727              		.type	CySysWdtSetMode, %function
 728              	CySysWdtSetMode:
 729              	.LFB10:
1022:Generated_Source\PSoC4/CyLFClk.c **** 
1023:Generated_Source\PSoC4/CyLFClk.c **** 
1024:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1025:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMode
1026:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1027:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 32


1028:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the mode of one of the three WDT counters.
1029:Generated_Source\PSoC4/CyLFClk.c ****     *
1030:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1031:Generated_Source\PSoC4/CyLFClk.c ****     *
1032:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
1033:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_MODE_NONE - Free running.<br>
1034:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT - The interrupt generated on match for counter 0
1035:Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.<br>
1036:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_RESET - Reset on match (valid for counter 0 and 1 only).<br>
1037:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT_RESET - Generate an interrupt.  Generate a reset on
1038:Generated_Source\PSoC4/CyLFClk.c ****     * the 3rd non-handled interrupt (valid for counter 0 and counter 1 only).
1039:Generated_Source\PSoC4/CyLFClk.c ****     *
1040:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1041:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled to set a mode. Otherwise, this
1042:Generated_Source\PSoC4/CyLFClk.c ****     * function call has no effect. If the specified counter is enabled,
1043:Generated_Source\PSoC4/CyLFClk.c ****     * call the CySysWdtDisable() function with the corresponding parameter to
1044:Generated_Source\PSoC4/CyLFClk.c ****     * disable the specified counter and wait for it to stop.
1045:Generated_Source\PSoC4/CyLFClk.c ****     *
1046:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1047:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMode(uint32 counterNum, uint32 mode)
1048:Generated_Source\PSoC4/CyLFClk.c ****     {
 730              		.loc 1 1048 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 16
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 80B5     		push	{r7, lr}
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 7, -8
 737              		.cfi_offset 14, -4
 738 0002 84B0     		sub	sp, sp, #16
 739              		.cfi_def_cfa_offset 24
 740 0004 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 742 0006 7860     		str	r0, [r7, #4]
 743 0008 3960     		str	r1, [r7]
1049:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1050:Generated_Source\PSoC4/CyLFClk.c **** 
1051:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
 744              		.loc 1 1051 0
 745 000a 7B68     		ldr	r3, [r7, #4]
 746 000c 022B     		cmp	r3, #2
 747 000e 02D9     		bls	.L53
 748              		.loc 1 1051 0 is_stmt 0 discriminator 1
 749 0010 0020     		movs	r0, #0
 750 0012 FFF7FEFF 		bl	CyHalt
 751              	.L53:
1052:Generated_Source\PSoC4/CyLFClk.c **** 
1053:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
 752              		.loc 1 1053 0 is_stmt 1
 753 0016 7B68     		ldr	r3, [r7, #4]
 754 0018 1800     		movs	r0, r3
 755 001a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 756 001e 031E     		subs	r3, r0, #0
 757 0020 16D1     		bne	.L55
1054:Generated_Source\PSoC4/CyLFClk.c ****         {
1055:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG &
 758              		.loc 1 1055 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 33


 759 0022 0D4B     		ldr	r3, .L56
 760 0024 1B68     		ldr	r3, [r3]
1056:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
 761              		.loc 1 1056 0
 762 0026 7A68     		ldr	r2, [r7, #4]
 763 0028 D200     		lsls	r2, r2, #3
 764 002a 0321     		movs	r1, #3
 765 002c 9140     		lsls	r1, r1, r2
 766 002e 0A00     		movs	r2, r1
 767 0030 D243     		mvns	r2, r2
1055:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
 768              		.loc 1 1055 0
 769 0032 1340     		ands	r3, r2
 770 0034 FB60     		str	r3, [r7, #12]
1057:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_WDT_MODE_MASK) << (counterNum * CY_SYS_WDT_CN
 771              		.loc 1 1057 0
 772 0036 3B68     		ldr	r3, [r7]
 773 0038 0322     		movs	r2, #3
 774 003a 1A40     		ands	r2, r3
 775 003c 7B68     		ldr	r3, [r7, #4]
 776 003e DB00     		lsls	r3, r3, #3
 777 0040 9A40     		lsls	r2, r2, r3
 778 0042 1300     		movs	r3, r2
 779 0044 FA68     		ldr	r2, [r7, #12]
 780 0046 1343     		orrs	r3, r2
 781 0048 FB60     		str	r3, [r7, #12]
1058:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
 782              		.loc 1 1058 0
 783 004a 034B     		ldr	r3, .L56
 784 004c FA68     		ldr	r2, [r7, #12]
 785 004e 1A60     		str	r2, [r3]
 786              	.L55:
1059:Generated_Source\PSoC4/CyLFClk.c ****         }
1060:Generated_Source\PSoC4/CyLFClk.c ****     }
 787              		.loc 1 1060 0
 788 0050 C046     		nop
 789 0052 BD46     		mov	sp, r7
 790 0054 04B0     		add	sp, sp, #16
 791              		@ sp needed
 792 0056 80BD     		pop	{r7, pc}
 793              	.L57:
 794              		.align	2
 795              	.L56:
 796 0058 0C020B40 		.word	1074463244
 797              		.cfi_endproc
 798              	.LFE10:
 799              		.size	CySysWdtSetMode, .-CySysWdtSetMode
 800              		.section	.text.CySysWdtGetMode,"ax",%progbits
 801              		.align	2
 802              		.global	CySysWdtGetMode
 803              		.code	16
 804              		.thumb_func
 805              		.type	CySysWdtGetMode, %function
 806              	CySysWdtGetMode:
 807              	.LFB11:
1061:Generated_Source\PSoC4/CyLFClk.c **** 
1062:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 34


1063:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1064:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMode
1065:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1066:Generated_Source\PSoC4/CyLFClk.c ****     * 
1067:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three WDT counters.
1068:Generated_Source\PSoC4/CyLFClk.c ****     *
1069:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1070:Generated_Source\PSoC4/CyLFClk.c ****     *
1071:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
1072:Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysWdtSetMode().
1073:Generated_Source\PSoC4/CyLFClk.c ****     *
1074:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1075:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMode(uint32 counterNum)
1076:Generated_Source\PSoC4/CyLFClk.c ****     {
 808              		.loc 1 1076 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 8
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812 0000 80B5     		push	{r7, lr}
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 82B0     		sub	sp, sp, #8
 817              		.cfi_def_cfa_offset 16
 818 0004 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 820 0006 7860     		str	r0, [r7, #4]
1077:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> (counterNum * CY_SYS_WDT_CNT_SHIFT)) & CY_SYS_WDT_MODE_MA
 821              		.loc 1 1077 0
 822 0008 054B     		ldr	r3, .L60
 823 000a 1A68     		ldr	r2, [r3]
 824 000c 7B68     		ldr	r3, [r7, #4]
 825 000e DB00     		lsls	r3, r3, #3
 826 0010 DA40     		lsrs	r2, r2, r3
 827 0012 1300     		movs	r3, r2
 828 0014 0322     		movs	r2, #3
 829 0016 1340     		ands	r3, r2
1078:Generated_Source\PSoC4/CyLFClk.c ****     }
 830              		.loc 1 1078 0
 831 0018 1800     		movs	r0, r3
 832 001a BD46     		mov	sp, r7
 833 001c 02B0     		add	sp, sp, #8
 834              		@ sp needed
 835 001e 80BD     		pop	{r7, pc}
 836              	.L61:
 837              		.align	2
 838              	.L60:
 839 0020 0C020B40 		.word	1074463244
 840              		.cfi_endproc
 841              	.LFE11:
 842              		.size	CySysWdtGetMode, .-CySysWdtGetMode
 843              		.section	.text.CySysWdtSetClearOnMatch,"ax",%progbits
 844              		.align	2
 845              		.global	CySysWdtSetClearOnMatch
 846              		.code	16
 847              		.thumb_func
 848              		.type	CySysWdtSetClearOnMatch, %function
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 35


 849              	CySysWdtSetClearOnMatch:
 850              	.LFB12:
1079:Generated_Source\PSoC4/CyLFClk.c **** 
1080:Generated_Source\PSoC4/CyLFClk.c **** 
1081:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1082:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetClearOnMatch
1083:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1084:Generated_Source\PSoC4/CyLFClk.c ****     * 
1085:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter "clear on match" setting.
1086:Generated_Source\PSoC4/CyLFClk.c ****     *
1087:Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue
1088:Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
1089:Generated_Source\PSoC4/CyLFClk.c ****     *
1090:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1091:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1092:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1093:Generated_Source\PSoC4/CyLFClk.c ****     *
1094:Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
1095:Generated_Source\PSoC4/CyLFClk.c ****     *  1 to enable appropriate counter
1096:Generated_Source\PSoC4/CyLFClk.c ****     *
1097:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1098:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled. Otherwise this function call
1099:Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysWdtDisable()
1100:Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
1101:Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three LFCLK cycles.
1102:Generated_Source\PSoC4/CyLFClk.c ****     *
1103:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1104:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable)
1105:Generated_Source\PSoC4/CyLFClk.c ****     {
 851              		.loc 1 1105 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 84B0     		sub	sp, sp, #16
 860              		.cfi_def_cfa_offset 24
 861 0004 00AF     		add	r7, sp, #0
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
 864 0008 3960     		str	r1, [r7]
1106:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1107:Generated_Source\PSoC4/CyLFClk.c **** 
1108:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
 865              		.loc 1 1108 0
 866 000a 7B68     		ldr	r3, [r7, #4]
 867 000c 002B     		cmp	r3, #0
 868 000e 02D0     		beq	.L63
 869              		.loc 1 1108 0 is_stmt 0 discriminator 2
 870 0010 7B68     		ldr	r3, [r7, #4]
 871 0012 012B     		cmp	r3, #1
 872 0014 01D1     		bne	.L64
 873              	.L63:
 874              		.loc 1 1108 0 discriminator 3
 875 0016 0123     		movs	r3, #1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 36


 876 0018 00E0     		b	.L65
 877              	.L64:
 878              		.loc 1 1108 0 discriminator 4
 879 001a 0023     		movs	r3, #0
 880              	.L65:
 881              		.loc 1 1108 0 discriminator 6
 882 001c 002B     		cmp	r3, #0
 883 001e 02D1     		bne	.L66
 884              		.loc 1 1108 0 discriminator 7
 885 0020 0020     		movs	r0, #0
 886 0022 FFF7FEFF 		bl	CyHalt
 887              	.L66:
1109:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1110:Generated_Source\PSoC4/CyLFClk.c **** 
1111:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
 888              		.loc 1 1111 0 is_stmt 1
 889 0026 7B68     		ldr	r3, [r7, #4]
 890 0028 1800     		movs	r0, r3
 891 002a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 892 002e 031E     		subs	r3, r0, #0
 893 0030 16D1     		bne	.L68
1112:Generated_Source\PSoC4/CyLFClk.c ****         {
1113:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
 894              		.loc 1 1113 0
 895 0032 0D4B     		ldr	r3, .L69
 896 0034 1B68     		ldr	r3, [r3]
1114:Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
 897              		.loc 1 1114 0
 898 0036 7A68     		ldr	r2, [r7, #4]
 899 0038 D200     		lsls	r2, r2, #3
 900 003a 0232     		adds	r2, r2, #2
1113:Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
 901              		.loc 1 1113 0
 902 003c 0121     		movs	r1, #1
 903 003e 9140     		lsls	r1, r1, r2
 904 0040 0A00     		movs	r2, r1
 905 0042 D243     		mvns	r2, r2
 906 0044 1340     		ands	r3, r2
 907 0046 FB60     		str	r3, [r7, #12]
1115:Generated_Source\PSoC4/CyLFClk.c **** 
1116:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
1117:Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_C
 908              		.loc 1 1117 0
 909 0048 7B68     		ldr	r3, [r7, #4]
 910 004a DB00     		lsls	r3, r3, #3
 911 004c 0233     		adds	r3, r3, #2
 912 004e 3A68     		ldr	r2, [r7]
 913 0050 9A40     		lsls	r2, r2, r3
 914 0052 1300     		movs	r3, r2
 915 0054 FA68     		ldr	r2, [r7, #12]
 916 0056 1343     		orrs	r3, r2
 917 0058 FB60     		str	r3, [r7, #12]
1118:Generated_Source\PSoC4/CyLFClk.c **** 
1119:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
 918              		.loc 1 1119 0
 919 005a 034B     		ldr	r3, .L69
 920 005c FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 37


 921 005e 1A60     		str	r2, [r3]
 922              	.L68:
1120:Generated_Source\PSoC4/CyLFClk.c ****         }
1121:Generated_Source\PSoC4/CyLFClk.c ****     }
 923              		.loc 1 1121 0
 924 0060 C046     		nop
 925 0062 BD46     		mov	sp, r7
 926 0064 04B0     		add	sp, sp, #16
 927              		@ sp needed
 928 0066 80BD     		pop	{r7, pc}
 929              	.L70:
 930              		.align	2
 931              	.L69:
 932 0068 0C020B40 		.word	1074463244
 933              		.cfi_endproc
 934              	.LFE12:
 935              		.size	CySysWdtSetClearOnMatch, .-CySysWdtSetClearOnMatch
 936              		.section	.text.CySysWdtGetClearOnMatch,"ax",%progbits
 937              		.align	2
 938              		.global	CySysWdtGetClearOnMatch
 939              		.code	16
 940              		.thumb_func
 941              		.type	CySysWdtGetClearOnMatch, %function
 942              	CySysWdtGetClearOnMatch:
 943              	.LFB13:
1122:Generated_Source\PSoC4/CyLFClk.c **** 
1123:Generated_Source\PSoC4/CyLFClk.c **** 
1124:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1125:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetClearOnMatch
1126:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1127:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1128:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the "clear on match" setting for the specified counter.
1129:Generated_Source\PSoC4/CyLFClk.c ****     *
1130:Generated_Source\PSoC4/CyLFClk.c ****     * \param
1131:Generated_Source\PSoC4/CyLFClk.c ****     * counterNum Valid range [0-1]. The number of the WDT counter. The match values
1132:Generated_Source\PSoC4/CyLFClk.c ****     * are not supported by counter 2.
1133:Generated_Source\PSoC4/CyLFClk.c ****     *
1134:Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
1135:Generated_Source\PSoC4/CyLFClk.c ****     *
1136:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1137:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetClearOnMatch(uint32 counterNum)
1138:Generated_Source\PSoC4/CyLFClk.c ****     {
 944              		.loc 1 1138 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 8
 947              		@ frame_needed = 1, uses_anonymous_args = 0
 948 0000 80B5     		push	{r7, lr}
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 7, -8
 951              		.cfi_offset 14, -4
 952 0002 82B0     		sub	sp, sp, #8
 953              		.cfi_def_cfa_offset 16
 954 0004 00AF     		add	r7, sp, #0
 955              		.cfi_def_cfa_register 7
 956 0006 7860     		str	r0, [r7, #4]
1139:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
 957              		.loc 1 1139 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 38


 958 0008 7B68     		ldr	r3, [r7, #4]
 959 000a 002B     		cmp	r3, #0
 960 000c 02D0     		beq	.L72
 961              		.loc 1 1139 0 is_stmt 0 discriminator 2
 962 000e 7B68     		ldr	r3, [r7, #4]
 963 0010 012B     		cmp	r3, #1
 964 0012 01D1     		bne	.L73
 965              	.L72:
 966              		.loc 1 1139 0 discriminator 3
 967 0014 0123     		movs	r3, #1
 968 0016 00E0     		b	.L74
 969              	.L73:
 970              		.loc 1 1139 0 discriminator 4
 971 0018 0023     		movs	r3, #0
 972              	.L74:
 973              		.loc 1 1139 0 discriminator 6
 974 001a 002B     		cmp	r3, #0
 975 001c 02D1     		bne	.L75
 976              		.loc 1 1139 0 discriminator 7
 977 001e 0020     		movs	r0, #0
 978 0020 FFF7FEFF 		bl	CyHalt
 979              	.L75:
1140:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1141:Generated_Source\PSoC4/CyLFClk.c **** 
1142:Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WDT_CONFIG_REG >>
 980              		.loc 1 1142 0 is_stmt 1
 981 0024 064B     		ldr	r3, .L77
 982 0026 1A68     		ldr	r2, [r3]
1143:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
 983              		.loc 1 1143 0
 984 0028 7B68     		ldr	r3, [r7, #4]
 985 002a DB00     		lsls	r3, r3, #3
 986 002c 0233     		adds	r3, r3, #2
1142:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
 987              		.loc 1 1142 0
 988 002e DA40     		lsrs	r2, r2, r3
 989 0030 1300     		movs	r3, r2
 990 0032 0122     		movs	r2, #1
 991 0034 1340     		ands	r3, r2
1144:Generated_Source\PSoC4/CyLFClk.c ****     }
 992              		.loc 1 1144 0
 993 0036 1800     		movs	r0, r3
 994 0038 BD46     		mov	sp, r7
 995 003a 02B0     		add	sp, sp, #8
 996              		@ sp needed
 997 003c 80BD     		pop	{r7, pc}
 998              	.L78:
 999 003e C046     		.align	2
 1000              	.L77:
 1001 0040 0C020B40 		.word	1074463244
 1002              		.cfi_endproc
 1003              	.LFE13:
 1004              		.size	CySysWdtGetClearOnMatch, .-CySysWdtGetClearOnMatch
 1005              		.section	.text.CySysWdtEnable,"ax",%progbits
 1006              		.align	2
 1007              		.global	CySysWdtEnable
 1008              		.code	16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 39


 1009              		.thumb_func
 1010              		.type	CySysWdtEnable, %function
 1011              	CySysWdtEnable:
 1012              	.LFB14:
1145:Generated_Source\PSoC4/CyLFClk.c **** 
1146:Generated_Source\PSoC4/CyLFClk.c **** 
1147:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1148:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1149:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1150:Generated_Source\PSoC4/CyLFClk.c ****     *
1151:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified WDT counters.
1152:Generated_Source\PSoC4/CyLFClk.c ****     *
1153:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are enabled.
1154:Generated_Source\PSoC4/CyLFClk.c ****     *
1155:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1156:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to enable.<br>
1157:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to enable.<br>
1158:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to enable.
1159:Generated_Source\PSoC4/CyLFClk.c ****     *
1160:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1161:Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling WDT requires 3 LFCLK cycles to come into effect.
1162:Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the WDT enable state must not be changed more than once in
1163:Generated_Source\PSoC4/CyLFClk.c ****     * that period.
1164:Generated_Source\PSoC4/CyLFClk.c ****     *
1165:Generated_Source\PSoC4/CyLFClk.c ****     * After WDT is enabled, it is illegal to write WDT configuration (WDT_CONFIG)
1166:Generated_Source\PSoC4/CyLFClk.c ****     * and control (WDT_CONTROL) registers. This means that all WDT functions that
1167:Generated_Source\PSoC4/CyLFClk.c ****     * contain 'write' in the name (with the exception of CySysWdtSetMatch()
1168:Generated_Source\PSoC4/CyLFClk.c ****     * function) are illegal to call if WDT is enabled.
1169:Generated_Source\PSoC4/CyLFClk.c ****     *
1170:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 / PSoC 4200: This function enables ILO.
1171:Generated_Source\PSoC4/CyLFClk.c ****     *
1172:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 BLE / PSoC 4200 BLE / PSoC4200L / PSoC 4100M 
1173:Generated_Source\PSoC4/CyLFClk.c ****     * / PSoC 4200M:
1174:Generated_Source\PSoC4/CyLFClk.c ****     * LFLCK should be configured before calling this function. The desired
1175:Generated_Source\PSoC4/CyLFClk.c ****     * source should be enabled and configured to be the source for LFCLK.
1176:Generated_Source\PSoC4/CyLFClk.c ****     *
1177:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1178:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(uint32 counterMask)
1179:Generated_Source\PSoC4/CyLFClk.c ****     {
 1013              		.loc 1 1179 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 8
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017 0000 80B5     		push	{r7, lr}
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021 0002 82B0     		sub	sp, sp, #8
 1022              		.cfi_def_cfa_offset 16
 1023 0004 00AF     		add	r7, sp, #0
 1024              		.cfi_def_cfa_register 7
 1025 0006 7860     		str	r0, [r7, #4]
1180:Generated_Source\PSoC4/CyLFClk.c ****         #if (!CY_IP_WCO)
1181:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkIloStart();
 1026              		.loc 1 1181 0
 1027 0008 FFF7FEFF 		bl	CySysClkIloStart
1182:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (!CY_IP_WCO) */
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 40


1183:Generated_Source\PSoC4/CyLFClk.c **** 
1184:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= counterMask;
 1028              		.loc 1 1184 0
 1029 000c 144B     		ldr	r3, .L87
 1030 000e 144A     		ldr	r2, .L87
 1031 0010 1168     		ldr	r1, [r2]
 1032 0012 7A68     		ldr	r2, [r7, #4]
 1033 0014 0A43     		orrs	r2, r1
 1034 0016 1A60     		str	r2, [r3]
1185:Generated_Source\PSoC4/CyLFClk.c **** 
1186:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
 1035              		.loc 1 1186 0
 1036 0018 7B68     		ldr	r3, [r7, #4]
 1037 001a 0122     		movs	r2, #1
 1038 001c 1340     		ands	r3, r2
 1039 001e 05D0     		beq	.L80
1187:Generated_Source\PSoC4/CyLFClk.c ****         {
1188:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
 1040              		.loc 1 1188 0
 1041 0020 C046     		nop
 1042              	.L81:
 1043              		.loc 1 1188 0 is_stmt 0 discriminator 1
 1044 0022 0020     		movs	r0, #0
 1045 0024 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1046 0028 031E     		subs	r3, r0, #0
 1047 002a FAD0     		beq	.L81
 1048              	.L80:
1189:Generated_Source\PSoC4/CyLFClk.c ****             {
1190:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1191:Generated_Source\PSoC4/CyLFClk.c ****             }
1192:Generated_Source\PSoC4/CyLFClk.c ****         }
1193:Generated_Source\PSoC4/CyLFClk.c **** 
1194:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
 1049              		.loc 1 1194 0 is_stmt 1
 1050 002c 7A68     		ldr	r2, [r7, #4]
 1051 002e 8023     		movs	r3, #128
 1052 0030 5B00     		lsls	r3, r3, #1
 1053 0032 1340     		ands	r3, r2
 1054 0034 05D0     		beq	.L82
1195:Generated_Source\PSoC4/CyLFClk.c ****         {
1196:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
 1055              		.loc 1 1196 0
 1056 0036 C046     		nop
 1057              	.L83:
 1058              		.loc 1 1196 0 is_stmt 0 discriminator 1
 1059 0038 0120     		movs	r0, #1
 1060 003a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1061 003e 031E     		subs	r3, r0, #0
 1062 0040 FAD0     		beq	.L83
 1063              	.L82:
1197:Generated_Source\PSoC4/CyLFClk.c ****             {
1198:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1199:Generated_Source\PSoC4/CyLFClk.c ****             }
1200:Generated_Source\PSoC4/CyLFClk.c ****         }
1201:Generated_Source\PSoC4/CyLFClk.c **** 
1202:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
 1064              		.loc 1 1202 0 is_stmt 1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 41


 1065 0042 7A68     		ldr	r2, [r7, #4]
 1066 0044 8023     		movs	r3, #128
 1067 0046 5B02     		lsls	r3, r3, #9
 1068 0048 1340     		ands	r3, r2
 1069 004a 05D0     		beq	.L86
1203:Generated_Source\PSoC4/CyLFClk.c ****         {
1204:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
 1070              		.loc 1 1204 0
 1071 004c C046     		nop
 1072              	.L85:
 1073              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1074 004e 0220     		movs	r0, #2
 1075 0050 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1076 0054 031E     		subs	r3, r0, #0
 1077 0056 FAD0     		beq	.L85
 1078              	.L86:
1205:Generated_Source\PSoC4/CyLFClk.c ****             {
1206:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1207:Generated_Source\PSoC4/CyLFClk.c ****             }
1208:Generated_Source\PSoC4/CyLFClk.c ****         }
1209:Generated_Source\PSoC4/CyLFClk.c ****     }
 1079              		.loc 1 1209 0 is_stmt 1
 1080 0058 C046     		nop
 1081 005a BD46     		mov	sp, r7
 1082 005c 02B0     		add	sp, sp, #8
 1083              		@ sp needed
 1084 005e 80BD     		pop	{r7, pc}
 1085              	.L88:
 1086              		.align	2
 1087              	.L87:
 1088 0060 10020B40 		.word	1074463248
 1089              		.cfi_endproc
 1090              	.LFE14:
 1091              		.size	CySysWdtEnable, .-CySysWdtEnable
 1092              		.section	.text.CySysWdtDisable,"ax",%progbits
 1093              		.align	2
 1094              		.global	CySysWdtDisable
 1095              		.code	16
 1096              		.thumb_func
 1097              		.type	CySysWdtDisable, %function
 1098              	CySysWdtDisable:
 1099              	.LFB15:
1210:Generated_Source\PSoC4/CyLFClk.c **** 
1211:Generated_Source\PSoC4/CyLFClk.c **** 
1212:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1213:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1214:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1215:Generated_Source\PSoC4/CyLFClk.c ****     *
1216:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified WDT counters.
1217:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
1218:Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
1219:Generated_Source\PSoC4/CyLFClk.c ****     *
1220:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1221:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to disable. <br>
1222:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to disable. <br>
1223:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to disable.
1224:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 42


1225:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1226:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(uint32 counterMask)
1227:Generated_Source\PSoC4/CyLFClk.c ****     {
 1100              		.loc 1 1227 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 8
 1103              		@ frame_needed = 1, uses_anonymous_args = 0
 1104 0000 80B5     		push	{r7, lr}
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 7, -8
 1107              		.cfi_offset 14, -4
 1108 0002 82B0     		sub	sp, sp, #8
 1109              		.cfi_def_cfa_offset 16
 1110 0004 00AF     		add	r7, sp, #0
 1111              		.cfi_def_cfa_register 7
 1112 0006 7860     		str	r0, [r7, #4]
1228:Generated_Source\PSoC4/CyLFClk.c ****         if (0uL == CySysWdtLocked())
 1113              		.loc 1 1228 0
 1114 0008 FFF7FEFF 		bl	CySysWdtLocked
 1115 000c 031E     		subs	r3, r0, #0
 1116 000e 26D1     		bne	.L96
1229:Generated_Source\PSoC4/CyLFClk.c ****         {
1230:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= ~counterMask;
 1117              		.loc 1 1230 0
 1118 0010 154B     		ldr	r3, .L97
 1119 0012 154A     		ldr	r2, .L97
 1120 0014 1268     		ldr	r2, [r2]
 1121 0016 7968     		ldr	r1, [r7, #4]
 1122 0018 C943     		mvns	r1, r1
 1123 001a 0A40     		ands	r2, r1
 1124 001c 1A60     		str	r2, [r3]
1231:Generated_Source\PSoC4/CyLFClk.c **** 
1232:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
 1125              		.loc 1 1232 0
 1126 001e 7B68     		ldr	r3, [r7, #4]
 1127 0020 0122     		movs	r2, #1
 1128 0022 1340     		ands	r3, r2
 1129 0024 05D0     		beq	.L91
1233:Generated_Source\PSoC4/CyLFClk.c ****             {
1234:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
 1130              		.loc 1 1234 0
 1131 0026 C046     		nop
 1132              	.L92:
 1133              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1134 0028 0020     		movs	r0, #0
 1135 002a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1136 002e 031E     		subs	r3, r0, #0
 1137 0030 FAD1     		bne	.L92
 1138              	.L91:
1235:Generated_Source\PSoC4/CyLFClk.c ****                 {
1236:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1237:Generated_Source\PSoC4/CyLFClk.c ****                 }
1238:Generated_Source\PSoC4/CyLFClk.c ****             }
1239:Generated_Source\PSoC4/CyLFClk.c **** 
1240:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
 1139              		.loc 1 1240 0 is_stmt 1
 1140 0032 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 43


 1141 0034 8023     		movs	r3, #128
 1142 0036 5B00     		lsls	r3, r3, #1
 1143 0038 1340     		ands	r3, r2
 1144 003a 05D0     		beq	.L93
1241:Generated_Source\PSoC4/CyLFClk.c ****             {
1242:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
 1145              		.loc 1 1242 0
 1146 003c C046     		nop
 1147              	.L94:
 1148              		.loc 1 1242 0 is_stmt 0 discriminator 1
 1149 003e 0120     		movs	r0, #1
 1150 0040 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1151 0044 031E     		subs	r3, r0, #0
 1152 0046 FAD1     		bne	.L94
 1153              	.L93:
1243:Generated_Source\PSoC4/CyLFClk.c ****                 {
1244:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1245:Generated_Source\PSoC4/CyLFClk.c ****                 }
1246:Generated_Source\PSoC4/CyLFClk.c ****             }
1247:Generated_Source\PSoC4/CyLFClk.c **** 
1248:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
 1154              		.loc 1 1248 0 is_stmt 1
 1155 0048 7A68     		ldr	r2, [r7, #4]
 1156 004a 8023     		movs	r3, #128
 1157 004c 5B02     		lsls	r3, r3, #9
 1158 004e 1340     		ands	r3, r2
 1159 0050 05D0     		beq	.L96
1249:Generated_Source\PSoC4/CyLFClk.c ****             {
1250:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
 1160              		.loc 1 1250 0
 1161 0052 C046     		nop
 1162              	.L95:
 1163              		.loc 1 1250 0 is_stmt 0 discriminator 1
 1164 0054 0220     		movs	r0, #2
 1165 0056 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1166 005a 031E     		subs	r3, r0, #0
 1167 005c FAD1     		bne	.L95
 1168              	.L96:
1251:Generated_Source\PSoC4/CyLFClk.c ****                 {
1252:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1253:Generated_Source\PSoC4/CyLFClk.c ****                 }
1254:Generated_Source\PSoC4/CyLFClk.c ****             }
1255:Generated_Source\PSoC4/CyLFClk.c ****         }
1256:Generated_Source\PSoC4/CyLFClk.c ****     }
 1169              		.loc 1 1256 0 is_stmt 1
 1170 005e C046     		nop
 1171 0060 BD46     		mov	sp, r7
 1172 0062 02B0     		add	sp, sp, #8
 1173              		@ sp needed
 1174 0064 80BD     		pop	{r7, pc}
 1175              	.L98:
 1176 0066 C046     		.align	2
 1177              	.L97:
 1178 0068 10020B40 		.word	1074463248
 1179              		.cfi_endproc
 1180              	.LFE15:
 1181              		.size	CySysWdtDisable, .-CySysWdtDisable
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 44


 1182              		.section	.text.CySysWdtSetCascade,"ax",%progbits
 1183              		.align	2
 1184              		.global	CySysWdtSetCascade
 1185              		.code	16
 1186              		.thumb_func
 1187              		.type	CySysWdtSetCascade, %function
 1188              	CySysWdtSetCascade:
 1189              	.LFB16:
1257:Generated_Source\PSoC4/CyLFClk.c **** 
1258:Generated_Source\PSoC4/CyLFClk.c **** 
1259:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1260:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetCascade
1261:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1262:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1263:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two WDT cascade values based on the combination of mask values
1264:Generated_Source\PSoC4/CyLFClk.c ****     * specified.
1265:Generated_Source\PSoC4/CyLFClk.c ****     *
1266:Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
1267:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_NONE - Neither <br>
1268:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_01 - Cascade 01 <br>
1269:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_12 - Cascade 12
1270:Generated_Source\PSoC4/CyLFClk.c ****     *
1271:Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
1272:Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
1273:Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
1274:Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysWdtSetCascade() was called with ORed defines it is necessary 
1275:Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysWdtSetClearOnMatch(1,1). It is needed to make sure that 
1276:Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
1277:Generated_Source\PSoC4/CyLFClk.c ****     *
1278:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counters that are part of the specified cascade should be disabled.
1279:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
1280:Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysWdtDisable() function with the corresponding
1281:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
1282:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1283:Generated_Source\PSoC4/CyLFClk.c ****     *
1284:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1285:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetCascade(uint32 cascadeMask)
1286:Generated_Source\PSoC4/CyLFClk.c ****     {
 1190              		.loc 1 1286 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 16
 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194 0000 90B5     		push	{r4, r7, lr}
 1195              		.cfi_def_cfa_offset 12
 1196              		.cfi_offset 4, -12
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 0002 85B0     		sub	sp, sp, #20
 1200              		.cfi_def_cfa_offset 32
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 0006 7860     		str	r0, [r7, #4]
1287:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1288:Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
1289:Generated_Source\PSoC4/CyLFClk.c **** 
1290:Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0) |
 1204              		.loc 1 1290 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 45


 1205 0008 0020     		movs	r0, #0
 1206 000a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1207 000e 0400     		movs	r4, r0
1291:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
 1208              		.loc 1 1291 0
 1209 0010 0120     		movs	r0, #1
 1210 0012 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1211 0016 0300     		movs	r3, r0
1290:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
 1212              		.loc 1 1290 0
 1213 0018 1C43     		orrs	r4, r3
1292:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2);
 1214              		.loc 1 1292 0
 1215 001a 0220     		movs	r0, #2
 1216 001c FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1217 0020 0300     		movs	r3, r0
1290:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
 1218              		.loc 1 1290 0
 1219 0022 2343     		orrs	r3, r4
 1220 0024 FB60     		str	r3, [r7, #12]
1293:Generated_Source\PSoC4/CyLFClk.c **** 
1294:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
 1221              		.loc 1 1294 0
 1222 0026 FB68     		ldr	r3, [r7, #12]
 1223 0028 002B     		cmp	r3, #0
 1224 002a 0DD1     		bne	.L101
1295:Generated_Source\PSoC4/CyLFClk.c ****         {
1296:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
 1225              		.loc 1 1296 0
 1226 002c 084B     		ldr	r3, .L102
 1227 002e 1B68     		ldr	r3, [r3]
 1228 0030 BB60     		str	r3, [r7, #8]
1297:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_WDT_CASCADE_01|CY_SYS_WDT_CASCADE_12)));
 1229              		.loc 1 1297 0
 1230 0032 BB68     		ldr	r3, [r7, #8]
 1231 0034 074A     		ldr	r2, .L102+4
 1232 0036 1340     		ands	r3, r2
 1233 0038 BB60     		str	r3, [r7, #8]
1298:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
 1234              		.loc 1 1298 0
 1235 003a BA68     		ldr	r2, [r7, #8]
 1236 003c 7B68     		ldr	r3, [r7, #4]
 1237 003e 1343     		orrs	r3, r2
 1238 0040 BB60     		str	r3, [r7, #8]
1299:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
 1239              		.loc 1 1299 0
 1240 0042 034B     		ldr	r3, .L102
 1241 0044 BA68     		ldr	r2, [r7, #8]
 1242 0046 1A60     		str	r2, [r3]
 1243              	.L101:
1300:Generated_Source\PSoC4/CyLFClk.c ****         }
1301:Generated_Source\PSoC4/CyLFClk.c ****     }
 1244              		.loc 1 1301 0
 1245 0048 C046     		nop
 1246 004a BD46     		mov	sp, r7
 1247 004c 05B0     		add	sp, sp, #20
 1248              		@ sp needed
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 46


 1249 004e 90BD     		pop	{r4, r7, pc}
 1250              	.L103:
 1251              		.align	2
 1252              	.L102:
 1253 0050 0C020B40 		.word	1074463244
 1254 0054 F7F7FFFF 		.word	-2057
 1255              		.cfi_endproc
 1256              	.LFE16:
 1257              		.size	CySysWdtSetCascade, .-CySysWdtSetCascade
 1258              		.section	.text.CySysWdtGetCascade,"ax",%progbits
 1259              		.align	2
 1260              		.global	CySysWdtGetCascade
 1261              		.code	16
 1262              		.thumb_func
 1263              		.type	CySysWdtGetCascade, %function
 1264              	CySysWdtGetCascade:
 1265              	.LFB17:
1302:Generated_Source\PSoC4/CyLFClk.c **** 
1303:Generated_Source\PSoC4/CyLFClk.c **** 
1304:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1305:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCascade
1306:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1307:Generated_Source\PSoC4/CyLFClk.c ****     *
1308:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two WDT cascade values returning a mask of the bits set.
1309:Generated_Source\PSoC4/CyLFClk.c ****     *
1310:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
1311:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_NONE - Neither
1312:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_01 - Cascade 01
1313:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_12 - Cascade 12
1314:Generated_Source\PSoC4/CyLFClk.c ****     *
1315:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1316:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCascade(void)
1317:Generated_Source\PSoC4/CyLFClk.c ****     {
 1266              		.loc 1 1317 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 0
 1269              		@ frame_needed = 1, uses_anonymous_args = 0
 1270 0000 80B5     		push	{r7, lr}
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 00AF     		add	r7, sp, #0
 1275              		.cfi_def_cfa_register 7
1318:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONFIG_REG & (CY_SYS_WDT_CASCADE_01 | CY_SYS_WDT_CASCADE_12));
 1276              		.loc 1 1318 0
 1277 0004 034B     		ldr	r3, .L106
 1278 0006 1B68     		ldr	r3, [r3]
 1279 0008 034A     		ldr	r2, .L106+4
 1280 000a 1340     		ands	r3, r2
1319:Generated_Source\PSoC4/CyLFClk.c ****     }
 1281              		.loc 1 1319 0
 1282 000c 1800     		movs	r0, r3
 1283 000e BD46     		mov	sp, r7
 1284              		@ sp needed
 1285 0010 80BD     		pop	{r7, pc}
 1286              	.L107:
 1287 0012 C046     		.align	2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 47


 1288              	.L106:
 1289 0014 0C020B40 		.word	1074463244
 1290 0018 08080000 		.word	2056
 1291              		.cfi_endproc
 1292              	.LFE17:
 1293              		.size	CySysWdtGetCascade, .-CySysWdtGetCascade
 1294              		.section	.text.CySysWdtSetMatch,"ax",%progbits
 1295              		.align	2
 1296              		.global	CySysWdtSetMatch
 1297              		.code	16
 1298              		.thumb_func
 1299              		.type	CySysWdtSetMatch, %function
 1300              	CySysWdtSetMatch:
 1301              	.LFB18:
1320:Generated_Source\PSoC4/CyLFClk.c **** 
1321:Generated_Source\PSoC4/CyLFClk.c **** 
1322:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1323:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1324:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1325:Generated_Source\PSoC4/CyLFClk.c ****     *
1326:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1327:Generated_Source\PSoC4/CyLFClk.c ****     *
1328:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1329:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1330:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1331:Generated_Source\PSoC4/CyLFClk.c ****     *
1332:Generated_Source\PSoC4/CyLFClk.c ****     * \param match
1333:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-65535]. The value to be used to match against the counter.
1334:Generated_Source\PSoC4/CyLFClk.c ****     *
1335:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1336:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 counterNum, uint32 match)
1337:Generated_Source\PSoC4/CyLFClk.c ****     {
 1302              		.loc 1 1337 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 16
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 1306 0000 80B5     		push	{r7, lr}
 1307              		.cfi_def_cfa_offset 8
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 1310 0002 84B0     		sub	sp, sp, #16
 1311              		.cfi_def_cfa_offset 24
 1312 0004 00AF     		add	r7, sp, #0
 1313              		.cfi_def_cfa_register 7
 1314 0006 7860     		str	r0, [r7, #4]
 1315 0008 3960     		str	r1, [r7]
1338:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
1339:Generated_Source\PSoC4/CyLFClk.c **** 
1340:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
 1316              		.loc 1 1340 0
 1317 000a 7B68     		ldr	r3, [r7, #4]
 1318 000c 002B     		cmp	r3, #0
 1319 000e 02D0     		beq	.L109
 1320              		.loc 1 1340 0 is_stmt 0 discriminator 2
 1321 0010 7B68     		ldr	r3, [r7, #4]
 1322 0012 012B     		cmp	r3, #1
 1323 0014 01D1     		bne	.L110
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 48


 1324              	.L109:
 1325              		.loc 1 1340 0 discriminator 3
 1326 0016 0123     		movs	r3, #1
 1327 0018 00E0     		b	.L111
 1328              	.L110:
 1329              		.loc 1 1340 0 discriminator 4
 1330 001a 0023     		movs	r3, #0
 1331              	.L111:
 1332              		.loc 1 1340 0 discriminator 6
 1333 001c 002B     		cmp	r3, #0
 1334 001e 02D1     		bne	.L112
 1335              		.loc 1 1340 0 discriminator 7
 1336 0020 0020     		movs	r0, #0
 1337 0022 FFF7FEFF 		bl	CyHalt
 1338              	.L112:
1341:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1342:Generated_Source\PSoC4/CyLFClk.c **** 
1343:Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
1344:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_3LFCLK_DELAY_US);
 1339              		.loc 1 1344 0 is_stmt 1
 1340 0026 C920     		movs	r0, #201
 1341 0028 FFF7FEFF 		bl	CyDelayUs
1345:Generated_Source\PSoC4/CyLFClk.c **** 
1346:Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WDT_MATCH_REG;
 1342              		.loc 1 1346 0
 1343 002c 0D4B     		ldr	r3, .L113
 1344 002e 1B68     		ldr	r3, [r3]
 1345 0030 FB60     		str	r3, [r7, #12]
1347:Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_WDT_LOWER_16BITS_MASK << (counterNum * CY_SYS_WDT_CNT
 1346              		.loc 1 1347 0
 1347 0032 7B68     		ldr	r3, [r7, #4]
 1348 0034 1B01     		lsls	r3, r3, #4
 1349 0036 0C4A     		ldr	r2, .L113+4
 1350 0038 9A40     		lsls	r2, r2, r3
 1351 003a 1300     		movs	r3, r2
 1352 003c DA43     		mvns	r2, r3
 1353 003e FB68     		ldr	r3, [r7, #12]
 1354 0040 1340     		ands	r3, r2
 1355 0042 FB60     		str	r3, [r7, #12]
1348:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)));
 1356              		.loc 1 1348 0
 1357 0044 074B     		ldr	r3, .L113
 1358 0046 7A68     		ldr	r2, [r7, #4]
 1359 0048 1201     		lsls	r2, r2, #4
 1360 004a 3968     		ldr	r1, [r7]
 1361 004c 9140     		lsls	r1, r1, r2
 1362 004e FA68     		ldr	r2, [r7, #12]
 1363 0050 0A43     		orrs	r2, r1
 1364 0052 1A60     		str	r2, [r3]
1349:Generated_Source\PSoC4/CyLFClk.c **** 
1350:Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
1351:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_1LFCLK_DELAY_US);
 1365              		.loc 1 1351 0
 1366 0054 4320     		movs	r0, #67
 1367 0056 FFF7FEFF 		bl	CyDelayUs
1352:Generated_Source\PSoC4/CyLFClk.c ****     }
 1368              		.loc 1 1352 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 49


 1369 005a C046     		nop
 1370 005c BD46     		mov	sp, r7
 1371 005e 04B0     		add	sp, sp, #16
 1372              		@ sp needed
 1373 0060 80BD     		pop	{r7, pc}
 1374              	.L114:
 1375 0062 C046     		.align	2
 1376              	.L113:
 1377 0064 08020B40 		.word	1074463240
 1378 0068 FFFF0000 		.word	65535
 1379              		.cfi_endproc
 1380              	.LFE18:
 1381              		.size	CySysWdtSetMatch, .-CySysWdtSetMatch
 1382              		.section	.text.CySysWdtSetToggleBit,"ax",%progbits
 1383              		.align	2
 1384              		.global	CySysWdtSetToggleBit
 1385              		.code	16
 1386              		.thumb_func
 1387              		.type	CySysWdtSetToggleBit, %function
 1388              	CySysWdtSetToggleBit:
 1389              	.LFB19:
1353:Generated_Source\PSoC4/CyLFClk.c **** 
1354:Generated_Source\PSoC4/CyLFClk.c **** 
1355:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1356:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetToggleBit
1357:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1358:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1359:Generated_Source\PSoC4/CyLFClk.c ****     * Configures which bit in WDT counter 2 to monitor for a toggle.
1360:Generated_Source\PSoC4/CyLFClk.c ****     *
1361:Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if the mode for counter 2 has
1362:Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
1363:Generated_Source\PSoC4/CyLFClk.c ****     *
1364:Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31].  Counter 2 bit to monitor for a toggle.
1365:Generated_Source\PSoC4/CyLFClk.c ****     *
1366:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1367:Generated_Source\PSoC4/CyLFClk.c ****     * WDT Counter 2 should be disabled. Otherwise this function call has no
1368:Generated_Source\PSoC4/CyLFClk.c ****     * effect.
1369:Generated_Source\PSoC4/CyLFClk.c ****     *
1370:Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysWdtDisable() function with
1371:Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
1372:Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to 3 LFCLK cycles.
1373:Generated_Source\PSoC4/CyLFClk.c ****     *
1374:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1375:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetToggleBit(uint32 bits)
1376:Generated_Source\PSoC4/CyLFClk.c ****     {
 1390              		.loc 1 1376 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 16
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394 0000 80B5     		push	{r7, lr}
 1395              		.cfi_def_cfa_offset 8
 1396              		.cfi_offset 7, -8
 1397              		.cfi_offset 14, -4
 1398 0002 84B0     		sub	sp, sp, #16
 1399              		.cfi_def_cfa_offset 24
 1400 0004 00AF     		add	r7, sp, #0
 1401              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 50


 1402 0006 7860     		str	r0, [r7, #4]
1377:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1378:Generated_Source\PSoC4/CyLFClk.c **** 
1379:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
 1403              		.loc 1 1379 0
 1404 0008 0220     		movs	r0, #2
 1405 000a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 1406 000e 031E     		subs	r3, r0, #0
 1407 0010 11D1     		bne	.L117
1380:Generated_Source\PSoC4/CyLFClk.c ****         {
1381:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
 1408              		.loc 1 1381 0
 1409 0012 0B4B     		ldr	r3, .L118
 1410 0014 1B68     		ldr	r3, [r3]
 1411 0016 FB60     		str	r3, [r7, #12]
1382:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_WDT_CONFIG_BITS2_MASK << CY_SYS_WDT_CONFIG
 1412              		.loc 1 1382 0
 1413 0018 FB68     		ldr	r3, [r7, #12]
 1414 001a 0A4A     		ldr	r2, .L118+4
 1415 001c 1340     		ands	r3, r2
 1416 001e FB60     		str	r3, [r7, #12]
1383:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_WDT_CONFIG_BITS2_MASK) << CY_SYS_WDT_CONFIG_BITS2_POS
 1417              		.loc 1 1383 0
 1418 0020 7B68     		ldr	r3, [r7, #4]
 1419 0022 1A06     		lsls	r2, r3, #24
 1420 0024 F823     		movs	r3, #248
 1421 0026 5B05     		lsls	r3, r3, #21
 1422 0028 1340     		ands	r3, r2
 1423 002a FA68     		ldr	r2, [r7, #12]
 1424 002c 1343     		orrs	r3, r2
 1425 002e FB60     		str	r3, [r7, #12]
1384:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
 1426              		.loc 1 1384 0
 1427 0030 034B     		ldr	r3, .L118
 1428 0032 FA68     		ldr	r2, [r7, #12]
 1429 0034 1A60     		str	r2, [r3]
 1430              	.L117:
1385:Generated_Source\PSoC4/CyLFClk.c ****         }
1386:Generated_Source\PSoC4/CyLFClk.c ****     }
 1431              		.loc 1 1386 0
 1432 0036 C046     		nop
 1433 0038 BD46     		mov	sp, r7
 1434 003a 04B0     		add	sp, sp, #16
 1435              		@ sp needed
 1436 003c 80BD     		pop	{r7, pc}
 1437              	.L119:
 1438 003e C046     		.align	2
 1439              	.L118:
 1440 0040 0C020B40 		.word	1074463244
 1441 0044 FFFFFFE0 		.word	-520093697
 1442              		.cfi_endproc
 1443              	.LFE19:
 1444              		.size	CySysWdtSetToggleBit, .-CySysWdtSetToggleBit
 1445              		.section	.text.CySysWdtGetToggleBit,"ax",%progbits
 1446              		.align	2
 1447              		.global	CySysWdtGetToggleBit
 1448              		.code	16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 51


 1449              		.thumb_func
 1450              		.type	CySysWdtGetToggleBit, %function
 1451              	CySysWdtGetToggleBit:
 1452              	.LFB20:
1387:Generated_Source\PSoC4/CyLFClk.c **** 
1388:Generated_Source\PSoC4/CyLFClk.c **** 
1389:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1390:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetToggleBit
1391:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1392:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1393:Generated_Source\PSoC4/CyLFClk.c ****     * Reads which bit in WDT counter 2 is monitored for a toggle.
1394:Generated_Source\PSoC4/CyLFClk.c ****     *
1395:Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
1396:Generated_Source\PSoC4/CyLFClk.c ****     *
1397:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1398:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetToggleBit(void)
1399:Generated_Source\PSoC4/CyLFClk.c ****     {
 1453              		.loc 1 1399 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457 0000 80B5     		push	{r7, lr}
 1458              		.cfi_def_cfa_offset 8
 1459              		.cfi_offset 7, -8
 1460              		.cfi_offset 14, -4
 1461 0002 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
1400:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> CY_SYS_WDT_CONFIG_BITS2_POS) & CY_SYS_WDT_CONFIG_BITS2_MA
 1463              		.loc 1 1400 0
 1464 0004 034B     		ldr	r3, .L122
 1465 0006 1B68     		ldr	r3, [r3]
 1466 0008 1B0E     		lsrs	r3, r3, #24
 1467 000a 1F22     		movs	r2, #31
 1468 000c 1340     		ands	r3, r2
1401:Generated_Source\PSoC4/CyLFClk.c ****     }
 1469              		.loc 1 1401 0
 1470 000e 1800     		movs	r0, r3
 1471 0010 BD46     		mov	sp, r7
 1472              		@ sp needed
 1473 0012 80BD     		pop	{r7, pc}
 1474              	.L123:
 1475              		.align	2
 1476              	.L122:
 1477 0014 0C020B40 		.word	1074463244
 1478              		.cfi_endproc
 1479              	.LFE20:
 1480              		.size	CySysWdtGetToggleBit, .-CySysWdtGetToggleBit
 1481              		.section	.text.CySysWdtGetMatch,"ax",%progbits
 1482              		.align	2
 1483              		.global	CySysWdtGetMatch
 1484              		.code	16
 1485              		.thumb_func
 1486              		.type	CySysWdtGetMatch, %function
 1487              	CySysWdtGetMatch:
 1488              	.LFB21:
1402:Generated_Source\PSoC4/CyLFClk.c **** 
1403:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 52


1404:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1405:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1406:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1407:Generated_Source\PSoC4/CyLFClk.c ****     *
1408:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1409:Generated_Source\PSoC4/CyLFClk.c ****     *
1410:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the WDT counter. The match
1411:Generated_Source\PSoC4/CyLFClk.c ****     * values are not supported by counter 2.
1412:Generated_Source\PSoC4/CyLFClk.c ****     *
1413:Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
1414:Generated_Source\PSoC4/CyLFClk.c ****     *
1415:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1416:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(uint32 counterNum)
1417:Generated_Source\PSoC4/CyLFClk.c ****     {
 1489              		.loc 1 1417 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493 0000 80B5     		push	{r7, lr}
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 7, -8
 1496              		.cfi_offset 14, -4
 1497 0002 82B0     		sub	sp, sp, #8
 1498              		.cfi_def_cfa_offset 16
 1499 0004 00AF     		add	r7, sp, #0
 1500              		.cfi_def_cfa_register 7
 1501 0006 7860     		str	r0, [r7, #4]
1418:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
 1502              		.loc 1 1418 0
 1503 0008 7B68     		ldr	r3, [r7, #4]
 1504 000a 002B     		cmp	r3, #0
 1505 000c 02D0     		beq	.L125
 1506              		.loc 1 1418 0 is_stmt 0 discriminator 2
 1507 000e 7B68     		ldr	r3, [r7, #4]
 1508 0010 012B     		cmp	r3, #1
 1509 0012 01D1     		bne	.L126
 1510              	.L125:
 1511              		.loc 1 1418 0 discriminator 3
 1512 0014 0123     		movs	r3, #1
 1513 0016 00E0     		b	.L127
 1514              	.L126:
 1515              		.loc 1 1418 0 discriminator 4
 1516 0018 0023     		movs	r3, #0
 1517              	.L127:
 1518              		.loc 1 1418 0 discriminator 6
 1519 001a 002B     		cmp	r3, #0
 1520 001c 02D1     		bne	.L128
 1521              		.loc 1 1418 0 discriminator 7
 1522 001e 0020     		movs	r0, #0
 1523 0020 FFF7FEFF 		bl	CyHalt
 1524              	.L128:
1419:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1420:Generated_Source\PSoC4/CyLFClk.c **** 
1421:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WDT_MATCH_REG >> 
 1525              		.loc 1 1421 0 is_stmt 1
 1526 0024 054B     		ldr	r3, .L130
 1527 0026 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 53


1422:Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
 1528              		.loc 1 1422 0
 1529 0028 7B68     		ldr	r3, [r7, #4]
 1530 002a 1B01     		lsls	r3, r3, #4
1421:Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
 1531              		.loc 1 1421 0
 1532 002c DA40     		lsrs	r2, r2, r3
 1533 002e 1300     		movs	r3, r2
 1534 0030 1B04     		lsls	r3, r3, #16
 1535 0032 1B0C     		lsrs	r3, r3, #16
1423:Generated_Source\PSoC4/CyLFClk.c ****     }
 1536              		.loc 1 1423 0
 1537 0034 1800     		movs	r0, r3
 1538 0036 BD46     		mov	sp, r7
 1539 0038 02B0     		add	sp, sp, #8
 1540              		@ sp needed
 1541 003a 80BD     		pop	{r7, pc}
 1542              	.L131:
 1543              		.align	2
 1544              	.L130:
 1545 003c 08020B40 		.word	1074463240
 1546              		.cfi_endproc
 1547              	.LFE21:
 1548              		.size	CySysWdtGetMatch, .-CySysWdtGetMatch
 1549              		.section	.text.CySysWdtGetCount,"ax",%progbits
 1550              		.align	2
 1551              		.global	CySysWdtGetCount
 1552              		.code	16
 1553              		.thumb_func
 1554              		.type	CySysWdtGetCount, %function
 1555              	CySysWdtGetCount:
 1556              	.LFB22:
1424:Generated_Source\PSoC4/CyLFClk.c **** 
1425:Generated_Source\PSoC4/CyLFClk.c **** 
1426:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1427:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1428:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1429:Generated_Source\PSoC4/CyLFClk.c ****     *
1430:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1431:Generated_Source\PSoC4/CyLFClk.c ****     *
1432:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the WDT counter.
1433:Generated_Source\PSoC4/CyLFClk.c ****     *
1434:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.  Counter 0 and Counter 1 are 16 bit counters 
1435:Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
1436:Generated_Source\PSoC4/CyLFClk.c ****     *
1437:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1438:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(uint32 counterNum)
1439:Generated_Source\PSoC4/CyLFClk.c ****     {
 1557              		.loc 1 1439 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 16
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 80B5     		push	{r7, lr}
 1562              		.cfi_def_cfa_offset 8
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 54


 1566              		.cfi_def_cfa_offset 24
 1567 0004 00AF     		add	r7, sp, #0
 1568              		.cfi_def_cfa_register 7
 1569 0006 7860     		str	r0, [r7, #4]
1440:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
 1570              		.loc 1 1440 0
 1571 0008 0023     		movs	r3, #0
 1572 000a FB60     		str	r3, [r7, #12]
1441:Generated_Source\PSoC4/CyLFClk.c **** 
1442:Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
 1573              		.loc 1 1442 0
 1574 000c 7B68     		ldr	r3, [r7, #4]
 1575 000e 012B     		cmp	r3, #1
 1576 0010 09D0     		beq	.L134
 1577 0012 02D3     		bcc	.L135
 1578 0014 022B     		cmp	r3, #2
 1579 0016 0BD0     		beq	.L136
 1580 0018 0EE0     		b	.L139
 1581              	.L135:
1443:Generated_Source\PSoC4/CyLFClk.c ****         {
1444:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 0 */
1445:Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
1446:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRLOW_REG & CY_SYS_WDT_LOWER_16BITS_MASK;
 1582              		.loc 1 1446 0
 1583 001a 0C4B     		ldr	r3, .L140
 1584 001c 1B68     		ldr	r3, [r3]
 1585 001e 1B04     		lsls	r3, r3, #16
 1586 0020 1B0C     		lsrs	r3, r3, #16
 1587 0022 FB60     		str	r3, [r7, #12]
1447:Generated_Source\PSoC4/CyLFClk.c ****             break;
 1588              		.loc 1 1447 0
 1589 0024 0CE0     		b	.L137
 1590              	.L134:
1448:Generated_Source\PSoC4/CyLFClk.c **** 
1449:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 1 */
1450:Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
1451:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WDT_CTRLOW_REG >> CY_SYS_WDT_CNT_MATCH_SHIFT) & CY_SYS_WDT_LOWER
 1591              		.loc 1 1451 0
 1592 0026 094B     		ldr	r3, .L140
 1593 0028 1B68     		ldr	r3, [r3]
 1594 002a 1B0C     		lsrs	r3, r3, #16
 1595 002c FB60     		str	r3, [r7, #12]
1452:Generated_Source\PSoC4/CyLFClk.c ****             break;
 1596              		.loc 1 1452 0
 1597 002e 07E0     		b	.L137
 1598              	.L136:
1453:Generated_Source\PSoC4/CyLFClk.c **** 
1454:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 2 */
1455:Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
1456:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRHIGH_REG;
 1599              		.loc 1 1456 0
 1600 0030 074B     		ldr	r3, .L140+4
 1601 0032 1B68     		ldr	r3, [r3]
 1602 0034 FB60     		str	r3, [r7, #12]
1457:Generated_Source\PSoC4/CyLFClk.c ****             break;
 1603              		.loc 1 1457 0
 1604 0036 03E0     		b	.L137
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 55


 1605              	.L139:
1458:Generated_Source\PSoC4/CyLFClk.c **** 
1459:Generated_Source\PSoC4/CyLFClk.c ****             default:
1460:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 1606              		.loc 1 1460 0
 1607 0038 0020     		movs	r0, #0
 1608 003a FFF7FEFF 		bl	CyHalt
1461:Generated_Source\PSoC4/CyLFClk.c ****             break;
 1609              		.loc 1 1461 0
 1610 003e C046     		nop
 1611              	.L137:
1462:Generated_Source\PSoC4/CyLFClk.c ****         }
1463:Generated_Source\PSoC4/CyLFClk.c **** 
1464:Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
 1612              		.loc 1 1464 0
 1613 0040 FB68     		ldr	r3, [r7, #12]
1465:Generated_Source\PSoC4/CyLFClk.c ****     }
 1614              		.loc 1 1465 0
 1615 0042 1800     		movs	r0, r3
 1616 0044 BD46     		mov	sp, r7
 1617 0046 04B0     		add	sp, sp, #16
 1618              		@ sp needed
 1619 0048 80BD     		pop	{r7, pc}
 1620              	.L141:
 1621 004a C046     		.align	2
 1622              	.L140:
 1623 004c 00020B40 		.word	1074463232
 1624 0050 04020B40 		.word	1074463236
 1625              		.cfi_endproc
 1626              	.LFE22:
 1627              		.size	CySysWdtGetCount, .-CySysWdtGetCount
 1628              		.section	.text.CySysWdtGetInterruptSource,"ax",%progbits
 1629              		.align	2
 1630              		.global	CySysWdtGetInterruptSource
 1631              		.code	16
 1632              		.thumb_func
 1633              		.type	CySysWdtGetInterruptSource, %function
 1634              	CySysWdtGetInterruptSource:
 1635              	.LFB23:
1466:Generated_Source\PSoC4/CyLFClk.c **** 
1467:Generated_Source\PSoC4/CyLFClk.c **** 
1468:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1469:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptSource
1470:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1471:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1472:Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the WDT counters interrupts that are currently
1473:Generated_Source\PSoC4/CyLFClk.c ****     * set by the hardware, if a corresponding mode is selected.
1474:Generated_Source\PSoC4/CyLFClk.c ****     *
1475:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
1476:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER0_INT - Counter 0
1477:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER1_INT - Counter 1
1478:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER2_INT - Counter 2
1479:Generated_Source\PSoC4/CyLFClk.c ****     *
1480:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1481:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetInterruptSource(void)
1482:Generated_Source\PSoC4/CyLFClk.c ****     {
 1636              		.loc 1 1482 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 56


 1637              		.cfi_startproc
 1638              		@ args = 0, pretend = 0, frame = 0
 1639              		@ frame_needed = 1, uses_anonymous_args = 0
 1640 0000 80B5     		push	{r7, lr}
 1641              		.cfi_def_cfa_offset 8
 1642              		.cfi_offset 7, -8
 1643              		.cfi_offset 14, -4
 1644 0002 00AF     		add	r7, sp, #0
 1645              		.cfi_def_cfa_register 7
1483:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONTROL_REG & (CY_SYS_WDT_COUNTER0_INT | CY_SYS_WDT_COUNTER1_INT | CY_SY
 1646              		.loc 1 1483 0
 1647 0004 034B     		ldr	r3, .L144
 1648 0006 1B68     		ldr	r3, [r3]
 1649 0008 034A     		ldr	r2, .L144+4
 1650 000a 1340     		ands	r3, r2
1484:Generated_Source\PSoC4/CyLFClk.c ****     }
 1651              		.loc 1 1484 0
 1652 000c 1800     		movs	r0, r3
 1653 000e BD46     		mov	sp, r7
 1654              		@ sp needed
 1655 0010 80BD     		pop	{r7, pc}
 1656              	.L145:
 1657 0012 C046     		.align	2
 1658              	.L144:
 1659 0014 10020B40 		.word	1074463248
 1660 0018 04040400 		.word	263172
 1661              		.cfi_endproc
 1662              	.LFE23:
 1663              		.size	CySysWdtGetInterruptSource, .-CySysWdtGetInterruptSource
 1664              		.section	.text.CySysWdtClearInterrupt,"ax",%progbits
 1665              		.align	2
 1666              		.global	CySysWdtClearInterrupt
 1667              		.code	16
 1668              		.thumb_func
 1669              		.type	CySysWdtClearInterrupt, %function
 1670              	CySysWdtClearInterrupt:
 1671              	.LFB24:
1485:Generated_Source\PSoC4/CyLFClk.c **** 
1486:Generated_Source\PSoC4/CyLFClk.c **** 
1487:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1488:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
1489:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1490:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1491:Generated_Source\PSoC4/CyLFClk.c ****     * Clears all the WDT counter interrupts set in the mask.
1492:Generated_Source\PSoC4/CyLFClk.c ****     *
1493:Generated_Source\PSoC4/CyLFClk.c ****     * Calling this function also prevents from Reset when the counter mode is set 
1494:Generated_Source\PSoC4/CyLFClk.c ****     * to generate 3 interrupts and then the device resets.
1495:Generated_Source\PSoC4/CyLFClk.c ****     *
1496:Generated_Source\PSoC4/CyLFClk.c ****     * All the WDT interrupts are to be cleared by the firmware, otherwise
1497:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
1498:Generated_Source\PSoC4/CyLFClk.c ****     *
1499:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1500:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_INT - Clears counter 0 interrupts <br>
1501:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_INT - Clears counter 1 interrupts <br>
1502:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_INT - Clears counter 2 interrupts
1503:Generated_Source\PSoC4/CyLFClk.c ****     *
1504:Generated_Source\PSoC4/CyLFClk.c ****     * \details
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 57


1505:Generated_Source\PSoC4/CyLFClk.c ****     * This function temporary removes the watchdog lock, if it was set, and
1506:Generated_Source\PSoC4/CyLFClk.c ****     * restores the lock state after cleaning the WDT interrupts that are set in
1507:Generated_Source\PSoC4/CyLFClk.c ****     * a mask.
1508:Generated_Source\PSoC4/CyLFClk.c ****     *
1509:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1510:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(uint32 counterMask)
1511:Generated_Source\PSoC4/CyLFClk.c ****     {
 1672              		.loc 1 1511 0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 16
 1675              		@ frame_needed = 1, uses_anonymous_args = 0
 1676 0000 90B5     		push	{r4, r7, lr}
 1677              		.cfi_def_cfa_offset 12
 1678              		.cfi_offset 4, -12
 1679              		.cfi_offset 7, -8
 1680              		.cfi_offset 14, -4
 1681 0002 85B0     		sub	sp, sp, #20
 1682              		.cfi_def_cfa_offset 32
 1683 0004 00AF     		add	r7, sp, #0
 1684              		.cfi_def_cfa_register 7
 1685 0006 7860     		str	r0, [r7, #4]
1512:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
1513:Generated_Source\PSoC4/CyLFClk.c ****         uint32 wdtLockState;
1514:Generated_Source\PSoC4/CyLFClk.c **** 
1515:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 1686              		.loc 1 1515 0
 1687 0008 0B23     		movs	r3, #11
 1688 000a FC18     		adds	r4, r7, r3
 1689 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1690 0010 0300     		movs	r3, r0
 1691 0012 2370     		strb	r3, [r4]
1516:Generated_Source\PSoC4/CyLFClk.c **** 
1517:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtLocked())
 1692              		.loc 1 1517 0
 1693 0014 FFF7FEFF 		bl	CySysWdtLocked
 1694 0018 031E     		subs	r3, r0, #0
 1695 001a 04D0     		beq	.L147
1518:Generated_Source\PSoC4/CyLFClk.c ****         {
1519:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 1u;
 1696              		.loc 1 1519 0
 1697 001c 0123     		movs	r3, #1
 1698 001e FB60     		str	r3, [r7, #12]
1520:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtUnlock();
 1699              		.loc 1 1520 0
 1700 0020 FFF7FEFF 		bl	CySysWdtUnlock
 1701 0024 01E0     		b	.L148
 1702              	.L147:
1521:Generated_Source\PSoC4/CyLFClk.c ****         }
1522:Generated_Source\PSoC4/CyLFClk.c ****         else
1523:Generated_Source\PSoC4/CyLFClk.c ****         {
1524:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 0u;
 1703              		.loc 1 1524 0
 1704 0026 0023     		movs	r3, #0
 1705 0028 FB60     		str	r3, [r7, #12]
 1706              	.L148:
1525:Generated_Source\PSoC4/CyLFClk.c ****         }
1526:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 58


1527:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT control register value */
1528:Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_WDT_COUNTER0_INT |
 1707              		.loc 1 1528 0
 1708 002a 7B68     		ldr	r3, [r7, #4]
 1709 002c 0D4A     		ldr	r2, .L150
 1710 002e 1340     		ands	r3, r2
 1711 0030 7B60     		str	r3, [r7, #4]
1529:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER1_INT |
1530:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER2_INT);
1531:Generated_Source\PSoC4/CyLFClk.c **** 
1532:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG = counterMask | (CY_SYS_WDT_CONTROL_REG & ~(CY_SYS_WDT_COUNTER0_INT 
 1712              		.loc 1 1532 0
 1713 0032 0D4B     		ldr	r3, .L150+4
 1714 0034 0C4A     		ldr	r2, .L150+4
 1715 0036 1268     		ldr	r2, [r2]
 1716 0038 0C49     		ldr	r1, .L150+8
 1717 003a 1140     		ands	r1, r2
 1718 003c 7A68     		ldr	r2, [r7, #4]
 1719 003e 0A43     		orrs	r2, r1
 1720 0040 1A60     		str	r2, [r3]
1533:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER1_INT 
1534:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER2_INT)
1535:Generated_Source\PSoC4/CyLFClk.c **** 
1536:Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
1537:Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
1538:Generated_Source\PSoC4/CyLFClk.c ****         */
1539:Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WDT_CONTROL_REG;
 1721              		.loc 1 1539 0
 1722 0042 094B     		ldr	r3, .L150+4
 1723 0044 1B68     		ldr	r3, [r3]
1540:Generated_Source\PSoC4/CyLFClk.c **** 
1541:Generated_Source\PSoC4/CyLFClk.c ****         if (1u == wdtLockState)
 1724              		.loc 1 1541 0
 1725 0046 FB68     		ldr	r3, [r7, #12]
 1726 0048 012B     		cmp	r3, #1
 1727 004a 01D1     		bne	.L149
1542:Generated_Source\PSoC4/CyLFClk.c ****         {
1543:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtLock();
 1728              		.loc 1 1543 0
 1729 004c FFF7FEFF 		bl	CySysWdtLock
 1730              	.L149:
1544:Generated_Source\PSoC4/CyLFClk.c ****         }
1545:Generated_Source\PSoC4/CyLFClk.c **** 
1546:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 1731              		.loc 1 1546 0
 1732 0050 0B23     		movs	r3, #11
 1733 0052 FB18     		adds	r3, r7, r3
 1734 0054 1B78     		ldrb	r3, [r3]
 1735 0056 1800     		movs	r0, r3
 1736 0058 FFF7FEFF 		bl	CyExitCriticalSection
1547:Generated_Source\PSoC4/CyLFClk.c ****     }
 1737              		.loc 1 1547 0
 1738 005c C046     		nop
 1739 005e BD46     		mov	sp, r7
 1740 0060 05B0     		add	sp, sp, #20
 1741              		@ sp needed
 1742 0062 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 59


 1743              	.L151:
 1744              		.align	2
 1745              	.L150:
 1746 0064 04040400 		.word	263172
 1747 0068 10020B40 		.word	1074463248
 1748 006c FBFBFBFF 		.word	-263173
 1749              		.cfi_endproc
 1750              	.LFE24:
 1751              		.size	CySysWdtClearInterrupt, .-CySysWdtClearInterrupt
 1752              		.section	.text.CySysWdtResetCounters,"ax",%progbits
 1753              		.align	2
 1754              		.global	CySysWdtResetCounters
 1755              		.code	16
 1756              		.thumb_func
 1757              		.type	CySysWdtResetCounters, %function
 1758              	CySysWdtResetCounters:
 1759              	.LFB25:
1548:Generated_Source\PSoC4/CyLFClk.c **** 
1549:Generated_Source\PSoC4/CyLFClk.c **** 
1550:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtResetCounters
1552:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1553:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1554:Generated_Source\PSoC4/CyLFClk.c ****     * Resets all the WDT counters set in the mask.
1555:Generated_Source\PSoC4/CyLFClk.c ****     *
1556:Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
1557:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_RESET - Reset counter 0 <br>
1558:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_RESET - Reset counter 1 <br>
1559:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_RESET - Reset counter 2
1560:Generated_Source\PSoC4/CyLFClk.c ****     *
1561:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1562:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not reset counter values if the Watchdog is locked.
1563:Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
1564:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1565:Generated_Source\PSoC4/CyLFClk.c ****     * The LFCLK source must be enabled. Otherwise, the function will never exit.
1566:Generated_Source\PSoC4/CyLFClk.c ****     *
1567:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1568:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtResetCounters(uint32 countersMask)
1569:Generated_Source\PSoC4/CyLFClk.c ****     {
 1760              		.loc 1 1569 0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 8
 1763              		@ frame_needed = 1, uses_anonymous_args = 0
 1764 0000 80B5     		push	{r7, lr}
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 7, -8
 1767              		.cfi_offset 14, -4
 1768 0002 82B0     		sub	sp, sp, #8
 1769              		.cfi_def_cfa_offset 16
 1770 0004 00AF     		add	r7, sp, #0
 1771              		.cfi_def_cfa_register 7
 1772 0006 7860     		str	r0, [r7, #4]
1570:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT reset value */
1571:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= (countersMask & CY_SYS_WDT_COUNTERS_RESET);
 1773              		.loc 1 1571 0
 1774 0008 084B     		ldr	r3, .L154
 1775 000a 084A     		ldr	r2, .L154
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 60


 1776 000c 1168     		ldr	r1, [r2]
 1777 000e 7A68     		ldr	r2, [r7, #4]
 1778 0010 0748     		ldr	r0, .L154+4
 1779 0012 0240     		ands	r2, r0
 1780 0014 0A43     		orrs	r2, r1
 1781 0016 1A60     		str	r2, [r3]
1572:Generated_Source\PSoC4/CyLFClk.c **** 
1573:Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WDT_CONTROL_REG & CY_SYS_WDT_COUNTERS_RESET))
 1782              		.loc 1 1573 0
 1783 0018 C046     		nop
 1784              	.L153:
 1785              		.loc 1 1573 0 is_stmt 0 discriminator 1
 1786 001a 044B     		ldr	r3, .L154
 1787 001c 1B68     		ldr	r3, [r3]
 1788 001e 044A     		ldr	r2, .L154+4
 1789 0020 1340     		ands	r3, r2
 1790 0022 FAD1     		bne	.L153
1574:Generated_Source\PSoC4/CyLFClk.c ****         {
1575:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
1576:Generated_Source\PSoC4/CyLFClk.c ****         }
1577:Generated_Source\PSoC4/CyLFClk.c ****     }
 1791              		.loc 1 1577 0 is_stmt 1
 1792 0024 C046     		nop
 1793 0026 BD46     		mov	sp, r7
 1794 0028 02B0     		add	sp, sp, #8
 1795              		@ sp needed
 1796 002a 80BD     		pop	{r7, pc}
 1797              	.L155:
 1798              		.align	2
 1799              	.L154:
 1800 002c 10020B40 		.word	1074463248
 1801 0030 08080800 		.word	526344
 1802              		.cfi_endproc
 1803              	.LFE25:
 1804              		.size	CySysWdtResetCounters, .-CySysWdtResetCounters
 1805              		.section	.text.CySysWdtSetInterruptCallback,"ax",%progbits
 1806              		.align	2
 1807              		.global	CySysWdtSetInterruptCallback
 1808              		.code	16
 1809              		.thumb_func
 1810              		.type	CySysWdtSetInterruptCallback, %function
 1811              	CySysWdtSetInterruptCallback:
 1812              	.LFB26:
1578:Generated_Source\PSoC4/CyLFClk.c **** 
1579:Generated_Source\PSoC4/CyLFClk.c **** 
1580:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1581:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetInterruptCallback
1582:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1583:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1584:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular WDT counter.
1585:Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the WDT interrupt.
1586:Generated_Source\PSoC4/CyLFClk.c ****     *
1587:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1588:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
1589:Generated_Source\PSoC4/CyLFClk.c ****     *
1590:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the previous callback function.
1591:Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 61


1592:Generated_Source\PSoC4/CyLFClk.c ****     *
1593:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1594:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function)
1595:Generated_Source\PSoC4/CyLFClk.c ****     {
 1813              		.loc 1 1595 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 16
 1816              		@ frame_needed = 1, uses_anonymous_args = 0
 1817 0000 80B5     		push	{r7, lr}
 1818              		.cfi_def_cfa_offset 8
 1819              		.cfi_offset 7, -8
 1820              		.cfi_offset 14, -4
 1821 0002 84B0     		sub	sp, sp, #16
 1822              		.cfi_def_cfa_offset 24
 1823 0004 00AF     		add	r7, sp, #0
 1824              		.cfi_def_cfa_register 7
 1825 0006 7860     		str	r0, [r7, #4]
 1826 0008 3960     		str	r1, [r7]
1596:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
 1827              		.loc 1 1596 0
 1828 000a 0023     		movs	r3, #0
 1829 000c FB60     		str	r3, [r7, #12]
1597:Generated_Source\PSoC4/CyLFClk.c **** 
1598:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
 1830              		.loc 1 1598 0
 1831 000e 7B68     		ldr	r3, [r7, #4]
 1832 0010 022B     		cmp	r3, #2
 1833 0012 0AD8     		bhi	.L157
1599:Generated_Source\PSoC4/CyLFClk.c ****         {
1600:Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysWdtCallback[counterNum];
 1834              		.loc 1 1600 0
 1835 0014 094B     		ldr	r3, .L160
 1836 0016 7A68     		ldr	r2, [r7, #4]
 1837 0018 9200     		lsls	r2, r2, #2
 1838 001a D358     		ldr	r3, [r2, r3]
 1839 001c FB60     		str	r3, [r7, #12]
1601:Generated_Source\PSoC4/CyLFClk.c ****             cySysWdtCallback[counterNum] = function;
 1840              		.loc 1 1601 0
 1841 001e 074B     		ldr	r3, .L160
 1842 0020 7A68     		ldr	r2, [r7, #4]
 1843 0022 9200     		lsls	r2, r2, #2
 1844 0024 3968     		ldr	r1, [r7]
 1845 0026 D150     		str	r1, [r2, r3]
 1846 0028 02E0     		b	.L158
 1847              	.L157:
1602:Generated_Source\PSoC4/CyLFClk.c ****         }
1603:Generated_Source\PSoC4/CyLFClk.c ****         else
1604:Generated_Source\PSoC4/CyLFClk.c ****         {
1605:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 1848              		.loc 1 1605 0 discriminator 1
 1849 002a 0020     		movs	r0, #0
 1850 002c FFF7FEFF 		bl	CyHalt
 1851              	.L158:
1606:Generated_Source\PSoC4/CyLFClk.c ****         }
1607:Generated_Source\PSoC4/CyLFClk.c **** 
1608:Generated_Source\PSoC4/CyLFClk.c ****         return((cyWdtCallback)prevCallback);
 1852              		.loc 1 1608 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 62


 1853 0030 FB68     		ldr	r3, [r7, #12]
1609:Generated_Source\PSoC4/CyLFClk.c ****     }
 1854              		.loc 1 1609 0
 1855 0032 1800     		movs	r0, r3
 1856 0034 BD46     		mov	sp, r7
 1857 0036 04B0     		add	sp, sp, #16
 1858              		@ sp needed
 1859 0038 80BD     		pop	{r7, pc}
 1860              	.L161:
 1861 003a C046     		.align	2
 1862              	.L160:
 1863 003c 0C000000 		.word	cySysWdtCallback
 1864              		.cfi_endproc
 1865              	.LFE26:
 1866              		.size	CySysWdtSetInterruptCallback, .-CySysWdtSetInterruptCallback
 1867              		.section	.text.CySysWdtGetInterruptCallback,"ax",%progbits
 1868              		.align	2
 1869              		.global	CySysWdtGetInterruptCallback
 1870              		.code	16
 1871              		.thumb_func
 1872              		.type	CySysWdtGetInterruptCallback, %function
 1873              	CySysWdtGetInterruptCallback:
 1874              	.LFB27:
1610:Generated_Source\PSoC4/CyLFClk.c **** 
1611:Generated_Source\PSoC4/CyLFClk.c **** 
1612:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1613:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptCallback
1614:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1615:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1616:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the particular WDT counter.
1617:Generated_Source\PSoC4/CyLFClk.c ****     *
1618:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1619:Generated_Source\PSoC4/CyLFClk.c ****     *
1620:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for a particular WDT by
1621:Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
1622:Generated_Source\PSoC4/CyLFClk.c ****     *
1623:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1624:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(uint32 counterNum)
1625:Generated_Source\PSoC4/CyLFClk.c ****     {
 1875              		.loc 1 1625 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 16
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879 0000 80B5     		push	{r7, lr}
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 7, -8
 1882              		.cfi_offset 14, -4
 1883 0002 84B0     		sub	sp, sp, #16
 1884              		.cfi_def_cfa_offset 24
 1885 0004 00AF     		add	r7, sp, #0
 1886              		.cfi_def_cfa_register 7
 1887 0006 7860     		str	r0, [r7, #4]
1626:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback retCallback = (void *)0;
 1888              		.loc 1 1626 0
 1889 0008 0023     		movs	r3, #0
 1890 000a FB60     		str	r3, [r7, #12]
1627:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 63


1628:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
 1891              		.loc 1 1628 0
 1892 000c 7B68     		ldr	r3, [r7, #4]
 1893 000e 022B     		cmp	r3, #2
 1894 0010 05D8     		bhi	.L163
1629:Generated_Source\PSoC4/CyLFClk.c ****         {
1630:Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyWdtCallback)cySysWdtCallback[counterNum];
 1895              		.loc 1 1630 0
 1896 0012 074B     		ldr	r3, .L166
 1897 0014 7A68     		ldr	r2, [r7, #4]
 1898 0016 9200     		lsls	r2, r2, #2
 1899 0018 D358     		ldr	r3, [r2, r3]
 1900 001a FB60     		str	r3, [r7, #12]
 1901 001c 02E0     		b	.L164
 1902              	.L163:
1631:Generated_Source\PSoC4/CyLFClk.c ****         }
1632:Generated_Source\PSoC4/CyLFClk.c ****         else
1633:Generated_Source\PSoC4/CyLFClk.c ****         {
1634:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 1903              		.loc 1 1634 0 discriminator 1
 1904 001e 0020     		movs	r0, #0
 1905 0020 FFF7FEFF 		bl	CyHalt
 1906              	.L164:
1635:Generated_Source\PSoC4/CyLFClk.c ****         }
1636:Generated_Source\PSoC4/CyLFClk.c **** 
1637:Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
 1907              		.loc 1 1637 0
 1908 0024 FB68     		ldr	r3, [r7, #12]
1638:Generated_Source\PSoC4/CyLFClk.c ****     }
 1909              		.loc 1 1638 0
 1910 0026 1800     		movs	r0, r3
 1911 0028 BD46     		mov	sp, r7
 1912 002a 04B0     		add	sp, sp, #16
 1913              		@ sp needed
 1914 002c 80BD     		pop	{r7, pc}
 1915              	.L167:
 1916 002e C046     		.align	2
 1917              	.L166:
 1918 0030 0C000000 		.word	cySysWdtCallback
 1919              		.cfi_endproc
 1920              	.LFE27:
 1921              		.size	CySysWdtGetInterruptCallback, .-CySysWdtGetInterruptCallback
 1922              		.section	.text.CySysWdtEnableCounterIsr,"ax",%progbits
 1923              		.align	2
 1924              		.global	CySysWdtEnableCounterIsr
 1925              		.code	16
 1926              		.thumb_func
 1927              		.type	CySysWdtEnableCounterIsr, %function
 1928              	CySysWdtEnableCounterIsr:
 1929              	.LFB28:
1639:Generated_Source\PSoC4/CyLFClk.c **** 
1640:Generated_Source\PSoC4/CyLFClk.c **** 
1641:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1642:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnableCounterIsr
1643:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1644:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1645:Generated_Source\PSoC4/CyLFClk.c ****     * Enables the ISR callback servicing for the particular WDT counter
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 64


1646:Generated_Source\PSoC4/CyLFClk.c ****     *
1647:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1648:Generated_Source\PSoC4/CyLFClk.c ****     *
1649:Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate WDT counter. For example value 1 
1650:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT counter.
1651:Generated_Source\PSoC4/CyLFClk.c ****     *
1652:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1653:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnableCounterIsr(uint32 counterNum)
1654:Generated_Source\PSoC4/CyLFClk.c ****     {
 1930              		.loc 1 1654 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 8
 1933              		@ frame_needed = 1, uses_anonymous_args = 0
 1934 0000 80B5     		push	{r7, lr}
 1935              		.cfi_def_cfa_offset 8
 1936              		.cfi_offset 7, -8
 1937              		.cfi_offset 14, -4
 1938 0002 82B0     		sub	sp, sp, #8
 1939              		.cfi_def_cfa_offset 16
 1940 0004 00AF     		add	r7, sp, #0
 1941              		.cfi_def_cfa_register 7
 1942 0006 7860     		str	r0, [r7, #4]
1655:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
 1943              		.loc 1 1655 0
 1944 0008 7B68     		ldr	r3, [r7, #4]
 1945 000a 022B     		cmp	r3, #2
 1946 000c 13D8     		bhi	.L169
1656:Generated_Source\PSoC4/CyLFClk.c ****         {
1657:Generated_Source\PSoC4/CyLFClk.c ****             disableServicedIsr &= ~counterIntMaskTbl[counterNum];
 1947              		.loc 1 1657 0
 1948 000e 0D4B     		ldr	r3, .L172
 1949 0010 7A68     		ldr	r2, [r7, #4]
 1950 0012 9200     		lsls	r2, r2, #2
 1951 0014 D358     		ldr	r3, [r2, r3]
 1952 0016 DA43     		mvns	r2, r3
 1953 0018 0B4B     		ldr	r3, .L172+4
 1954 001a 1B68     		ldr	r3, [r3]
 1955 001c 1A40     		ands	r2, r3
 1956 001e 0A4B     		ldr	r3, .L172+4
 1957 0020 1A60     		str	r2, [r3]
1658:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask |= counterIntMaskTbl[counterNum];
 1958              		.loc 1 1658 0
 1959 0022 084B     		ldr	r3, .L172
 1960 0024 7A68     		ldr	r2, [r7, #4]
 1961 0026 9200     		lsls	r2, r2, #2
 1962 0028 D258     		ldr	r2, [r2, r3]
 1963 002a 084B     		ldr	r3, .L172+8
 1964 002c 1B68     		ldr	r3, [r3]
 1965 002e 1A43     		orrs	r2, r3
 1966 0030 064B     		ldr	r3, .L172+8
 1967 0032 1A60     		str	r2, [r3]
1659:Generated_Source\PSoC4/CyLFClk.c ****         }
1660:Generated_Source\PSoC4/CyLFClk.c ****         else
1661:Generated_Source\PSoC4/CyLFClk.c ****         {
1662:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1663:Generated_Source\PSoC4/CyLFClk.c ****         }
1664:Generated_Source\PSoC4/CyLFClk.c ****     }
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 65


 1968              		.loc 1 1664 0
 1969 0034 02E0     		b	.L171
 1970              	.L169:
1662:Generated_Source\PSoC4/CyLFClk.c ****         }
 1971              		.loc 1 1662 0 discriminator 1
 1972 0036 0020     		movs	r0, #0
 1973 0038 FFF7FEFF 		bl	CyHalt
 1974              	.L171:
 1975              		.loc 1 1664 0
 1976 003c C046     		nop
 1977 003e BD46     		mov	sp, r7
 1978 0040 02B0     		add	sp, sp, #8
 1979              		@ sp needed
 1980 0042 80BD     		pop	{r7, pc}
 1981              	.L173:
 1982              		.align	2
 1983              	.L172:
 1984 0044 00000000 		.word	counterIntMaskTbl
 1985 0048 08000000 		.word	disableServicedIsr
 1986 004c 00000000 		.word	wdtIsrMask
 1987              		.cfi_endproc
 1988              	.LFE28:
 1989              		.size	CySysWdtEnableCounterIsr, .-CySysWdtEnableCounterIsr
 1990              		.section	.text.CySysWdtDisableCounterIsr,"ax",%progbits
 1991              		.align	2
 1992              		.global	CySysWdtDisableCounterIsr
 1993              		.code	16
 1994              		.thumb_func
 1995              		.type	CySysWdtDisableCounterIsr, %function
 1996              	CySysWdtDisableCounterIsr:
 1997              	.LFB29:
1665:Generated_Source\PSoC4/CyLFClk.c **** 
1666:Generated_Source\PSoC4/CyLFClk.c **** 
1667:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1668:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisableCounterIsr
1669:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1670:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1671:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the ISR callback servicing for the particular WDT counter
1672:Generated_Source\PSoC4/CyLFClk.c ****     *
1673:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1674:Generated_Source\PSoC4/CyLFClk.c ****     *
1675:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1676:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisableCounterIsr(uint32 counterNum)
1677:Generated_Source\PSoC4/CyLFClk.c ****     {
 1998              		.loc 1 1677 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 0000 80B5     		push	{r7, lr}
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 7, -8
 2005              		.cfi_offset 14, -4
 2006 0002 82B0     		sub	sp, sp, #8
 2007              		.cfi_def_cfa_offset 16
 2008 0004 00AF     		add	r7, sp, #0
 2009              		.cfi_def_cfa_register 7
 2010 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 66


1678:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
 2011              		.loc 1 1678 0
 2012 0008 7B68     		ldr	r3, [r7, #4]
 2013 000a 022B     		cmp	r3, #2
 2014 000c 0AD8     		bhi	.L175
1679:Generated_Source\PSoC4/CyLFClk.c ****         {
1680:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask &= ~counterIntMaskTbl[counterNum];
 2015              		.loc 1 1680 0
 2016 000e 094B     		ldr	r3, .L178
 2017 0010 7A68     		ldr	r2, [r7, #4]
 2018 0012 9200     		lsls	r2, r2, #2
 2019 0014 D358     		ldr	r3, [r2, r3]
 2020 0016 DA43     		mvns	r2, r3
 2021 0018 074B     		ldr	r3, .L178+4
 2022 001a 1B68     		ldr	r3, [r3]
 2023 001c 1A40     		ands	r2, r3
 2024 001e 064B     		ldr	r3, .L178+4
 2025 0020 1A60     		str	r2, [r3]
1681:Generated_Source\PSoC4/CyLFClk.c ****         }
1682:Generated_Source\PSoC4/CyLFClk.c ****         else
1683:Generated_Source\PSoC4/CyLFClk.c ****         {
1684:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1685:Generated_Source\PSoC4/CyLFClk.c ****         }
1686:Generated_Source\PSoC4/CyLFClk.c ****     }
 2026              		.loc 1 1686 0
 2027 0022 02E0     		b	.L177
 2028              	.L175:
1684:Generated_Source\PSoC4/CyLFClk.c ****         }
 2029              		.loc 1 1684 0 discriminator 1
 2030 0024 0020     		movs	r0, #0
 2031 0026 FFF7FEFF 		bl	CyHalt
 2032              	.L177:
 2033              		.loc 1 1686 0
 2034 002a C046     		nop
 2035 002c BD46     		mov	sp, r7
 2036 002e 02B0     		add	sp, sp, #8
 2037              		@ sp needed
 2038 0030 80BD     		pop	{r7, pc}
 2039              	.L179:
 2040 0032 C046     		.align	2
 2041              	.L178:
 2042 0034 00000000 		.word	counterIntMaskTbl
 2043 0038 00000000 		.word	wdtIsrMask
 2044              		.cfi_endproc
 2045              	.LFE29:
 2046              		.size	CySysWdtDisableCounterIsr, .-CySysWdtDisableCounterIsr
 2047              		.section	.text.CySysWdtIsr,"ax",%progbits
 2048              		.align	2
 2049              		.global	CySysWdtIsr
 2050              		.code	16
 2051              		.thumb_func
 2052              		.type	CySysWdtIsr, %function
 2053              	CySysWdtIsr:
 2054              	.LFB30:
1687:Generated_Source\PSoC4/CyLFClk.c **** 
1688:Generated_Source\PSoC4/CyLFClk.c **** 
1689:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 67


1690:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
1691:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1692:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1693:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
1694:Generated_Source\PSoC4/CyLFClk.c ****     *
1695:Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which WDT triggered in the interrupt and calls the 
1696:Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
1697:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetIsrCallback() API.
1698:Generated_Source\PSoC4/CyLFClk.c ****     *
1699:Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
1700:Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
1701:Generated_Source\PSoC4/CyLFClk.c ****     *
1702:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1703:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
1704:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
1705:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
1706:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
1707:Generated_Source\PSoC4/CyLFClk.c ****     *
1708:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1709:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
1710:Generated_Source\PSoC4/CyLFClk.c ****     {
 2055              		.loc 1 1710 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0000 80B5     		push	{r7, lr}
 2060              		.cfi_def_cfa_offset 8
 2061              		.cfi_offset 7, -8
 2062              		.cfi_offset 14, -4
 2063 0002 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
1711:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER0_INT & CY_SYS_WDT_CONTROL_REG))
 2065              		.loc 1 1711 0
 2066 0004 344B     		ldr	r3, .L188
 2067 0006 1B68     		ldr	r3, [r3]
 2068 0008 0422     		movs	r2, #4
 2069 000a 1340     		ands	r3, r2
 2070 000c 1FD0     		beq	.L181
1712:Generated_Source\PSoC4/CyLFClk.c ****         {
1713:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER0_INT & wdtIsrMask))
 2071              		.loc 1 1713 0
 2072 000e 334B     		ldr	r3, .L188+4
 2073 0010 1B68     		ldr	r3, [r3]
 2074 0012 0422     		movs	r2, #4
 2075 0014 1340     		ands	r3, r2
 2076 0016 17D0     		beq	.L182
1714:Generated_Source\PSoC4/CyLFClk.c ****             {
1715:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER0_INT);
 2077              		.loc 1 1715 0
 2078 0018 314B     		ldr	r3, .L188+8
 2079 001a 1B68     		ldr	r3, [r3]
 2080 001c 0422     		movs	r2, #4
 2081 001e 1340     		ands	r3, r2
 2082 0020 DA43     		mvns	r2, r3
 2083 0022 2E4B     		ldr	r3, .L188+4
 2084 0024 1B68     		ldr	r3, [r3]
 2085 0026 1A40     		ands	r2, r3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 68


 2086 0028 2C4B     		ldr	r3, .L188+4
 2087 002a 1A60     		str	r2, [r3]
1716:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER0_INT;
 2088              		.loc 1 1716 0
 2089 002c 2C4B     		ldr	r3, .L188+8
 2090 002e 1B68     		ldr	r3, [r3]
 2091 0030 0422     		movs	r2, #4
 2092 0032 9343     		bics	r3, r2
 2093 0034 1A00     		movs	r2, r3
 2094 0036 2A4B     		ldr	r3, .L188+8
 2095 0038 1A60     		str	r2, [r3]
1717:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER0] != (void *) 0)
 2096              		.loc 1 1717 0
 2097 003a 2A4B     		ldr	r3, .L188+12
 2098 003c 1B68     		ldr	r3, [r3]
 2099 003e 002B     		cmp	r3, #0
 2100 0040 02D0     		beq	.L182
1718:Generated_Source\PSoC4/CyLFClk.c ****                 {
1719:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER0])();
 2101              		.loc 1 1719 0
 2102 0042 284B     		ldr	r3, .L188+12
 2103 0044 1B68     		ldr	r3, [r3]
 2104 0046 9847     		blx	r3
 2105              	.L182:
1720:Generated_Source\PSoC4/CyLFClk.c ****                 }
1721:Generated_Source\PSoC4/CyLFClk.c ****             }
1722:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
 2106              		.loc 1 1722 0
 2107 0048 0420     		movs	r0, #4
 2108 004a FFF7FEFF 		bl	CySysWdtClearInterrupt
 2109              	.L181:
1723:Generated_Source\PSoC4/CyLFClk.c ****         }
1724:Generated_Source\PSoC4/CyLFClk.c **** 
1725:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER1_INT & CY_SYS_WDT_CONTROL_REG))
 2110              		.loc 1 1725 0
 2111 004e 224B     		ldr	r3, .L188
 2112 0050 1A68     		ldr	r2, [r3]
 2113 0052 8023     		movs	r3, #128
 2114 0054 DB00     		lsls	r3, r3, #3
 2115 0056 1340     		ands	r3, r2
 2116 0058 22D0     		beq	.L183
1726:Generated_Source\PSoC4/CyLFClk.c ****         {
1727:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER1_INT & wdtIsrMask))
 2117              		.loc 1 1727 0
 2118 005a 204B     		ldr	r3, .L188+4
 2119 005c 1A68     		ldr	r2, [r3]
 2120 005e 8023     		movs	r3, #128
 2121 0060 DB00     		lsls	r3, r3, #3
 2122 0062 1340     		ands	r3, r2
 2123 0064 17D0     		beq	.L184
1728:Generated_Source\PSoC4/CyLFClk.c ****             {
1729:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER1_INT);
 2124              		.loc 1 1729 0
 2125 0066 1E4B     		ldr	r3, .L188+8
 2126 0068 1A68     		ldr	r2, [r3]
 2127 006a 8023     		movs	r3, #128
 2128 006c DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 69


 2129 006e 1340     		ands	r3, r2
 2130 0070 DA43     		mvns	r2, r3
 2131 0072 1A4B     		ldr	r3, .L188+4
 2132 0074 1B68     		ldr	r3, [r3]
 2133 0076 1A40     		ands	r2, r3
 2134 0078 184B     		ldr	r3, .L188+4
 2135 007a 1A60     		str	r2, [r3]
1730:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER1_INT;
 2136              		.loc 1 1730 0
 2137 007c 184B     		ldr	r3, .L188+8
 2138 007e 1B68     		ldr	r3, [r3]
 2139 0080 194A     		ldr	r2, .L188+16
 2140 0082 1A40     		ands	r2, r3
 2141 0084 164B     		ldr	r3, .L188+8
 2142 0086 1A60     		str	r2, [r3]
1731:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER1] != (void *) 0)
 2143              		.loc 1 1731 0
 2144 0088 164B     		ldr	r3, .L188+12
 2145 008a 5B68     		ldr	r3, [r3, #4]
 2146 008c 002B     		cmp	r3, #0
 2147 008e 02D0     		beq	.L184
1732:Generated_Source\PSoC4/CyLFClk.c ****                 {
1733:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER1])();
 2148              		.loc 1 1733 0
 2149 0090 144B     		ldr	r3, .L188+12
 2150 0092 5B68     		ldr	r3, [r3, #4]
 2151 0094 9847     		blx	r3
 2152              	.L184:
1734:Generated_Source\PSoC4/CyLFClk.c ****                 }
1735:Generated_Source\PSoC4/CyLFClk.c ****             }
1736:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
 2153              		.loc 1 1736 0
 2154 0096 8023     		movs	r3, #128
 2155 0098 DB00     		lsls	r3, r3, #3
 2156 009a 1800     		movs	r0, r3
 2157 009c FFF7FEFF 		bl	CySysWdtClearInterrupt
 2158              	.L183:
1737:Generated_Source\PSoC4/CyLFClk.c ****         }
1738:Generated_Source\PSoC4/CyLFClk.c **** 
1739:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER2_INT & CY_SYS_WDT_CONTROL_REG))
 2159              		.loc 1 1739 0
 2160 00a0 0D4B     		ldr	r3, .L188
 2161 00a2 1A68     		ldr	r2, [r3]
 2162 00a4 8023     		movs	r3, #128
 2163 00a6 DB02     		lsls	r3, r3, #11
 2164 00a8 1340     		ands	r3, r2
 2165 00aa 11D0     		beq	.L187
1740:Generated_Source\PSoC4/CyLFClk.c ****         {
1741:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER2_INT & wdtIsrMask))
 2166              		.loc 1 1741 0
 2167 00ac 0B4B     		ldr	r3, .L188+4
 2168 00ae 1A68     		ldr	r2, [r3]
 2169 00b0 8023     		movs	r3, #128
 2170 00b2 DB02     		lsls	r3, r3, #11
 2171 00b4 1340     		ands	r3, r2
 2172 00b6 06D0     		beq	.L186
1742:Generated_Source\PSoC4/CyLFClk.c ****             {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 70


1743:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER2] != (void *) 0)
 2173              		.loc 1 1743 0
 2174 00b8 0A4B     		ldr	r3, .L188+12
 2175 00ba 9B68     		ldr	r3, [r3, #8]
 2176 00bc 002B     		cmp	r3, #0
 2177 00be 02D0     		beq	.L186
1744:Generated_Source\PSoC4/CyLFClk.c ****                 {
1745:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER2])();
 2178              		.loc 1 1745 0
 2179 00c0 084B     		ldr	r3, .L188+12
 2180 00c2 9B68     		ldr	r3, [r3, #8]
 2181 00c4 9847     		blx	r3
 2182              	.L186:
1746:Generated_Source\PSoC4/CyLFClk.c ****                 }
1747:Generated_Source\PSoC4/CyLFClk.c ****             }
1748:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER2_INT);
 2183              		.loc 1 1748 0
 2184 00c6 8023     		movs	r3, #128
 2185 00c8 DB02     		lsls	r3, r3, #11
 2186 00ca 1800     		movs	r0, r3
 2187 00cc FFF7FEFF 		bl	CySysWdtClearInterrupt
 2188              	.L187:
1749:Generated_Source\PSoC4/CyLFClk.c ****         }
1750:Generated_Source\PSoC4/CyLFClk.c ****     }
 2189              		.loc 1 1750 0
 2190 00d0 C046     		nop
 2191 00d2 BD46     		mov	sp, r7
 2192              		@ sp needed
 2193 00d4 80BD     		pop	{r7, pc}
 2194              	.L189:
 2195 00d6 C046     		.align	2
 2196              	.L188:
 2197 00d8 10020B40 		.word	1074463248
 2198 00dc 00000000 		.word	wdtIsrMask
 2199 00e0 08000000 		.word	disableServicedIsr
 2200 00e4 0C000000 		.word	cySysWdtCallback
 2201 00e8 FFFBFFFF 		.word	-1025
 2202              		.cfi_endproc
 2203              	.LFE30:
 2204              		.size	CySysWdtIsr, .-CySysWdtIsr
 2205              		.section	.text.CySysWatchdogFeed,"ax",%progbits
 2206              		.align	2
 2207              		.global	CySysWatchdogFeed
 2208              		.code	16
 2209              		.thumb_func
 2210              		.type	CySysWatchdogFeed, %function
 2211              	CySysWatchdogFeed:
 2212              	.LFB31:
1751:Generated_Source\PSoC4/CyLFClk.c **** 
1752:Generated_Source\PSoC4/CyLFClk.c **** 
1753:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWatchdogFeed
1755:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1757:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the corresponded Watchdog Counter before it causes the device reset.
1758:Generated_Source\PSoC4/CyLFClk.c ****     *
1759:Generated_Source\PSoC4/CyLFClk.c ****     * Supported only for first WDT0 and second WDT1 counters in the "Watchdog" or 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 71


1760:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" modes.
1761:Generated_Source\PSoC4/CyLFClk.c ****     *
1762:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1763:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0 - Feeds the Counter 0 <br>
1764:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1 - Feeds the Counter 1
1765:Generated_Source\PSoC4/CyLFClk.c ****     *
1766:Generated_Source\PSoC4/CyLFClk.c ****     * Value of counterNum corresponds to appropriate counter. For example value 1 
1767:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT1 Counter.
1768:Generated_Source\PSoC4/CyLFClk.c ****     *
1769:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1770:Generated_Source\PSoC4/CyLFClk.c ****     * Clears the WDT counter in the "Watchdog" mode or clears the WDT interrupt in
1771:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" mode. Does nothing in other modes.
1772:Generated_Source\PSoC4/CyLFClk.c ****     *
1773:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1774:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWatchdogFeed(uint32 counterNum)
1775:Generated_Source\PSoC4/CyLFClk.c ****     {
 2213              		.loc 1 1775 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 8
 2216              		@ frame_needed = 1, uses_anonymous_args = 0
 2217 0000 80B5     		push	{r7, lr}
 2218              		.cfi_def_cfa_offset 8
 2219              		.cfi_offset 7, -8
 2220              		.cfi_offset 14, -4
 2221 0002 82B0     		sub	sp, sp, #8
 2222              		.cfi_def_cfa_offset 16
 2223 0004 00AF     		add	r7, sp, #0
 2224              		.cfi_def_cfa_register 7
 2225 0006 7860     		str	r0, [r7, #4]
1776:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum == CY_SYS_WDT_COUNTER0)
 2226              		.loc 1 1776 0
 2227 0008 7B68     		ldr	r3, [r7, #4]
 2228 000a 002B     		cmp	r3, #0
 2229 000c 18D1     		bne	.L191
1777:Generated_Source\PSoC4/CyLFClk.c ****         {
1778:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
 2230              		.loc 1 1778 0
 2231 000e 7B68     		ldr	r3, [r7, #4]
 2232 0010 1800     		movs	r0, r3
 2233 0012 FFF7FEFF 		bl	CySysWdtGetMode
 2234 0016 0300     		movs	r3, r0
 2235 0018 032B     		cmp	r3, #3
 2236 001a 03D1     		bne	.L192
1779:Generated_Source\PSoC4/CyLFClk.c ****             {
1780:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
 2237              		.loc 1 1780 0
 2238 001c 0420     		movs	r0, #4
 2239 001e FFF7FEFF 		bl	CySysWdtClearInterrupt
1781:Generated_Source\PSoC4/CyLFClk.c ****             }
1782:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1783:Generated_Source\PSoC4/CyLFClk.c ****             {
1784:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER0_RESET);
1785:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1786:Generated_Source\PSoC4/CyLFClk.c ****             }
1787:Generated_Source\PSoC4/CyLFClk.c ****             else
1788:Generated_Source\PSoC4/CyLFClk.c ****             {
1789:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 72


1790:Generated_Source\PSoC4/CyLFClk.c ****             }
1791:Generated_Source\PSoC4/CyLFClk.c ****         }
1792:Generated_Source\PSoC4/CyLFClk.c ****         else if(counterNum == CY_SYS_WDT_COUNTER1)
1793:Generated_Source\PSoC4/CyLFClk.c ****         {
1794:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1795:Generated_Source\PSoC4/CyLFClk.c ****             {
1796:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1797:Generated_Source\PSoC4/CyLFClk.c ****             }
1798:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1799:Generated_Source\PSoC4/CyLFClk.c ****             {
1800:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET);
1801:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1802:Generated_Source\PSoC4/CyLFClk.c ****             }
1803:Generated_Source\PSoC4/CyLFClk.c ****             else
1804:Generated_Source\PSoC4/CyLFClk.c ****             {
1805:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1806:Generated_Source\PSoC4/CyLFClk.c ****             }
1807:Generated_Source\PSoC4/CyLFClk.c ****         }
1808:Generated_Source\PSoC4/CyLFClk.c ****         else
1809:Generated_Source\PSoC4/CyLFClk.c ****         {
1810:Generated_Source\PSoC4/CyLFClk.c ****             /* Do nothing. */
1811:Generated_Source\PSoC4/CyLFClk.c ****         }
1812:Generated_Source\PSoC4/CyLFClk.c ****     }
 2240              		.loc 1 1812 0
 2241 0022 2EE0     		b	.L195
 2242              	.L192:
1782:Generated_Source\PSoC4/CyLFClk.c ****             {
 2243              		.loc 1 1782 0
 2244 0024 7B68     		ldr	r3, [r7, #4]
 2245 0026 1800     		movs	r0, r3
 2246 0028 FFF7FEFF 		bl	CySysWdtGetMode
 2247 002c 0300     		movs	r3, r0
 2248 002e 022B     		cmp	r3, #2
 2249 0030 27D1     		bne	.L195
1784:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
 2250              		.loc 1 1784 0
 2251 0032 0820     		movs	r0, #8
 2252 0034 FFF7FEFF 		bl	CySysWdtResetCounters
1785:Generated_Source\PSoC4/CyLFClk.c ****             }
 2253              		.loc 1 1785 0
 2254 0038 0420     		movs	r0, #4
 2255 003a FFF7FEFF 		bl	CySysWdtClearInterrupt
 2256              		.loc 1 1812 0
 2257 003e 20E0     		b	.L195
 2258              	.L191:
1792:Generated_Source\PSoC4/CyLFClk.c ****         {
 2259              		.loc 1 1792 0
 2260 0040 7B68     		ldr	r3, [r7, #4]
 2261 0042 012B     		cmp	r3, #1
 2262 0044 1DD1     		bne	.L195
1794:Generated_Source\PSoC4/CyLFClk.c ****             {
 2263              		.loc 1 1794 0
 2264 0046 7B68     		ldr	r3, [r7, #4]
 2265 0048 1800     		movs	r0, r3
 2266 004a FFF7FEFF 		bl	CySysWdtGetMode
 2267 004e 0300     		movs	r3, r0
 2268 0050 032B     		cmp	r3, #3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 73


 2269 0052 05D1     		bne	.L194
1796:Generated_Source\PSoC4/CyLFClk.c ****             }
 2270              		.loc 1 1796 0
 2271 0054 8023     		movs	r3, #128
 2272 0056 DB00     		lsls	r3, r3, #3
 2273 0058 1800     		movs	r0, r3
 2274 005a FFF7FEFF 		bl	CySysWdtClearInterrupt
 2275              		.loc 1 1812 0
 2276 005e 10E0     		b	.L195
 2277              	.L194:
1798:Generated_Source\PSoC4/CyLFClk.c ****             {
 2278              		.loc 1 1798 0
 2279 0060 7B68     		ldr	r3, [r7, #4]
 2280 0062 1800     		movs	r0, r3
 2281 0064 FFF7FEFF 		bl	CySysWdtGetMode
 2282 0068 0300     		movs	r3, r0
 2283 006a 022B     		cmp	r3, #2
 2284 006c 09D1     		bne	.L195
1800:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
 2285              		.loc 1 1800 0
 2286 006e 8023     		movs	r3, #128
 2287 0070 1B01     		lsls	r3, r3, #4
 2288 0072 1800     		movs	r0, r3
 2289 0074 FFF7FEFF 		bl	CySysWdtResetCounters
1801:Generated_Source\PSoC4/CyLFClk.c ****             }
 2290              		.loc 1 1801 0
 2291 0078 8023     		movs	r3, #128
 2292 007a DB00     		lsls	r3, r3, #3
 2293 007c 1800     		movs	r0, r3
 2294 007e FFF7FEFF 		bl	CySysWdtClearInterrupt
 2295              	.L195:
 2296              		.loc 1 1812 0
 2297 0082 C046     		nop
 2298 0084 BD46     		mov	sp, r7
 2299 0086 02B0     		add	sp, sp, #8
 2300              		@ sp needed
 2301 0088 80BD     		pop	{r7, pc}
 2302              		.cfi_endproc
 2303              	.LFE31:
 2304              		.size	CySysWatchdogFeed, .-CySysWatchdogFeed
 2305 008a C046     		.section	.text.CySysClkLfclkPosedgeCatch,"ax",%progbits
 2306              		.align	2
 2307              		.code	16
 2308              		.thumb_func
 2309              		.type	CySysClkLfclkPosedgeCatch, %function
 2310              	CySysClkLfclkPosedgeCatch:
 2311              	.LFB32:
1813:Generated_Source\PSoC4/CyLFClk.c **** 
1814:Generated_Source\PSoC4/CyLFClk.c **** 
1815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeCatch
1817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1819:Generated_Source\PSoC4/CyLFClk.c ****     * Returns once the LFCLK positive edge occurred.
1820:Generated_Source\PSoC4/CyLFClk.c ****     *
1821:Generated_Source\PSoC4/CyLFClk.c ****     * CySysClkLfclkPosedgeRestore() should be called after this function
1822:Generated_Source\PSoC4/CyLFClk.c ****     * to restore the WDT configuration.
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 74


1823:Generated_Source\PSoC4/CyLFClk.c ****     *
1824:Generated_Source\PSoC4/CyLFClk.c ****     * A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1825:Generated_Source\PSoC4/CyLFClk.c ****     * functions is expected to be called inside a critical section.
1826:Generated_Source\PSoC4/CyLFClk.c ****     *
1827:Generated_Source\PSoC4/CyLFClk.c ****     * To ensure that the WDT counter value is read until it changes, the enabled
1828:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter is used. If no counter is enabled, counter 0 is enabled.
1829:Generated_Source\PSoC4/CyLFClk.c ****     * And after the LFCLK source is switched, the counter 0 configuration
1830:Generated_Source\PSoC4/CyLFClk.c ****     * is restored.
1831:Generated_Source\PSoC4/CyLFClk.c ****     *
1832:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
1833:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1834:Generated_Source\PSoC4/CyLFClk.c ****     *
1835:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1836:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is
1837:Generated_Source\PSoC4/CyLFClk.c ****     * called). Call CySysWdtUnlock() to unlock WDT.
1838:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1839:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1840:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void)
1841:Generated_Source\PSoC4/CyLFClk.c ****     {
 2312              		.loc 1 1841 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 8
 2315              		@ frame_needed = 1, uses_anonymous_args = 0
 2316 0000 80B5     		push	{r7, lr}
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 7, -8
 2319              		.cfi_offset 14, -4
 2320 0002 82B0     		sub	sp, sp, #8
 2321              		.cfi_def_cfa_offset 16
 2322 0004 00AF     		add	r7, sp, #0
 2323              		.cfi_def_cfa_register 7
1842:Generated_Source\PSoC4/CyLFClk.c ****         uint32 firstCount;
1843:Generated_Source\PSoC4/CyLFClk.c ****         static uint32 lfclkPosedgeEnabledWdtCounter = 0u;
1844:Generated_Source\PSoC4/CyLFClk.c **** 
1845:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
 2324              		.loc 1 1845 0
 2325 0006 0020     		movs	r0, #0
 2326 0008 FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 2327 000c 031E     		subs	r3, r0, #0
 2328 000e 03D0     		beq	.L197
1846:Generated_Source\PSoC4/CyLFClk.c ****         {
1847:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
 2329              		.loc 1 1847 0
 2330 0010 1E4B     		ldr	r3, .L202
 2331 0012 0022     		movs	r2, #0
 2332 0014 1A60     		str	r2, [r3]
 2333 0016 24E0     		b	.L198
 2334              	.L197:
1848:Generated_Source\PSoC4/CyLFClk.c ****         }
1849:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
 2335              		.loc 1 1849 0
 2336 0018 0120     		movs	r0, #1
 2337 001a FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 2338 001e 031E     		subs	r3, r0, #0
 2339 0020 03D0     		beq	.L199
1850:Generated_Source\PSoC4/CyLFClk.c ****         {
1851:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER1;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 75


 2340              		.loc 1 1851 0
 2341 0022 1A4B     		ldr	r3, .L202
 2342 0024 0122     		movs	r2, #1
 2343 0026 1A60     		str	r2, [r3]
 2344 0028 1BE0     		b	.L198
 2345              	.L199:
1852:Generated_Source\PSoC4/CyLFClk.c ****         }
1853:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
 2346              		.loc 1 1853 0
 2347 002a 0220     		movs	r0, #2
 2348 002c FFF7FEFF 		bl	CySysWdtGetEnabledStatus
 2349 0030 031E     		subs	r3, r0, #0
 2350 0032 03D0     		beq	.L200
1854:Generated_Source\PSoC4/CyLFClk.c ****         {
1855:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER2;
 2351              		.loc 1 1855 0
 2352 0034 154B     		ldr	r3, .L202
 2353 0036 0222     		movs	r2, #2
 2354 0038 1A60     		str	r2, [r3]
 2355 003a 12E0     		b	.L198
 2356              	.L200:
1856:Generated_Source\PSoC4/CyLFClk.c ****         }
1857:Generated_Source\PSoC4/CyLFClk.c ****         else /* All WDT counters are disabled */
1858:Generated_Source\PSoC4/CyLFClk.c ****         {
1859:Generated_Source\PSoC4/CyLFClk.c ****             /* Configure WDT counter # 0 */
1860:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 1u;
 2357              		.loc 1 1860 0
 2358 003c 144B     		ldr	r3, .L202+4
 2359 003e 0122     		movs	r2, #1
 2360 0040 1A60     		str	r2, [r3]
1861:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
 2361              		.loc 1 1861 0
 2362 0042 124B     		ldr	r3, .L202
 2363 0044 0022     		movs	r2, #0
 2364 0046 1A60     		str	r2, [r3]
1862:Generated_Source\PSoC4/CyLFClk.c **** 
1863:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Mode = CySysWdtGetMode(CY_SYS_WDT_COUNTER0);
 2365              		.loc 1 1863 0
 2366 0048 0020     		movs	r0, #0
 2367 004a FFF7FEFF 		bl	CySysWdtGetMode
 2368 004e 0200     		movs	r2, r0
 2369 0050 104B     		ldr	r3, .L202+8
 2370 0052 1A60     		str	r2, [r3]
1864:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, CY_SYS_WDT_MODE_NONE);
 2371              		.loc 1 1864 0
 2372 0054 0021     		movs	r1, #0
 2373 0056 0020     		movs	r0, #0
 2374 0058 FFF7FEFF 		bl	CySysWdtSetMode
1865:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtEnable(CY_SYS_WDT_COUNTER0_MASK);
 2375              		.loc 1 1865 0
 2376 005c 0120     		movs	r0, #1
 2377 005e FFF7FEFF 		bl	CySysWdtEnable
 2378              	.L198:
1866:Generated_Source\PSoC4/CyLFClk.c ****         }
1867:Generated_Source\PSoC4/CyLFClk.c **** 
1868:Generated_Source\PSoC4/CyLFClk.c ****         firstCount = CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter);
 2379              		.loc 1 1868 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 76


 2380 0062 0A4B     		ldr	r3, .L202
 2381 0064 1B68     		ldr	r3, [r3]
 2382 0066 1800     		movs	r0, r3
 2383 0068 FFF7FEFF 		bl	CySysWdtGetCount
 2384 006c 0300     		movs	r3, r0
 2385 006e 7B60     		str	r3, [r7, #4]
1869:Generated_Source\PSoC4/CyLFClk.c ****         while (CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter) == firstCount)
 2386              		.loc 1 1869 0
 2387 0070 C046     		nop
 2388              	.L201:
 2389              		.loc 1 1869 0 is_stmt 0 discriminator 1
 2390 0072 064B     		ldr	r3, .L202
 2391 0074 1B68     		ldr	r3, [r3]
 2392 0076 1800     		movs	r0, r3
 2393 0078 FFF7FEFF 		bl	CySysWdtGetCount
 2394 007c 0200     		movs	r2, r0
 2395 007e 7B68     		ldr	r3, [r7, #4]
 2396 0080 9A42     		cmp	r2, r3
 2397 0082 F6D0     		beq	.L201
1870:Generated_Source\PSoC4/CyLFClk.c ****         {
1871:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for counter to increment */
1872:Generated_Source\PSoC4/CyLFClk.c ****         }
1873:Generated_Source\PSoC4/CyLFClk.c ****     }
 2398              		.loc 1 1873 0 is_stmt 1
 2399 0084 C046     		nop
 2400 0086 BD46     		mov	sp, r7
 2401 0088 02B0     		add	sp, sp, #8
 2402              		@ sp needed
 2403 008a 80BD     		pop	{r7, pc}
 2404              	.L203:
 2405              		.align	2
 2406              	.L202:
 2407 008c 1C000000 		.word	lfclkPosedgeEnabledWdtCounter.4967
 2408 0090 00000000 		.word	lfclkPosedgeWdtCounter0Enabled
 2409 0094 04000000 		.word	lfclkPosedgeWdtCounter0Mode
 2410              		.cfi_endproc
 2411              	.LFE32:
 2412              		.size	CySysClkLfclkPosedgeCatch, .-CySysClkLfclkPosedgeCatch
 2413              		.section	.text.CySysClkLfclkPosedgeRestore,"ax",%progbits
 2414              		.align	2
 2415              		.code	16
 2416              		.thumb_func
 2417              		.type	CySysClkLfclkPosedgeRestore, %function
 2418              	CySysClkLfclkPosedgeRestore:
 2419              	.LFB33:
1874:Generated_Source\PSoC4/CyLFClk.c **** 
1875:Generated_Source\PSoC4/CyLFClk.c **** 
1876:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1877:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeRestore
1878:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1879:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1880:Generated_Source\PSoC4/CyLFClk.c ****     *  Restores the WDT configuration after a CySysClkLfclkPosedgeCatch() call.
1881:Generated_Source\PSoC4/CyLFClk.c ****     *
1882:Generated_Source\PSoC4/CyLFClk.c ****     *  A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1883:Generated_Source\PSoC4/CyLFClk.c ****     *  functions is expected to be called inside a critical section.
1884:Generated_Source\PSoC4/CyLFClk.c ****     *
1885:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000/PSoC 4000S / PSoC 4100S / PSoC Analog 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 77


1886:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1887:Generated_Source\PSoC4/CyLFClk.c ****     *
1888:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1889:Generated_Source\PSoC4/CyLFClk.c ****     *  This function has no effect if WDT is locked (CySysWdtLock() is
1890:Generated_Source\PSoC4/CyLFClk.c ****     *  called). Call CySysWdtUnlock() to unlock WDT.
1891:Generated_Source\PSoC4/CyLFClk.c ****     *
1892:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1893:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1894:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void)
1895:Generated_Source\PSoC4/CyLFClk.c ****     {
 2420              		.loc 1 1895 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424 0000 80B5     		push	{r7, lr}
 2425              		.cfi_def_cfa_offset 8
 2426              		.cfi_offset 7, -8
 2427              		.cfi_offset 14, -4
 2428 0002 00AF     		add	r7, sp, #0
 2429              		.cfi_def_cfa_register 7
1896:Generated_Source\PSoC4/CyLFClk.c ****         if (lfclkPosedgeWdtCounter0Enabled != 0u)
 2430              		.loc 1 1896 0
 2431 0004 0A4B     		ldr	r3, .L207
 2432 0006 1B68     		ldr	r3, [r3]
 2433 0008 002B     		cmp	r3, #0
 2434 000a 0ED0     		beq	.L206
1897:Generated_Source\PSoC4/CyLFClk.c ****         {
1898:Generated_Source\PSoC4/CyLFClk.c ****             /* Restore counter # 0 configuration and force its shutdown */
1899:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= (uint32)(~CY_SYS_WDT_COUNTER0_MASK);
 2435              		.loc 1 1899 0
 2436 000c 094B     		ldr	r3, .L207+4
 2437 000e 094A     		ldr	r2, .L207+4
 2438 0010 1268     		ldr	r2, [r2]
 2439 0012 0121     		movs	r1, #1
 2440 0014 8A43     		bics	r2, r1
 2441 0016 1A60     		str	r2, [r3]
1900:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, lfclkPosedgeWdtCounter0Mode);
 2442              		.loc 1 1900 0
 2443 0018 074B     		ldr	r3, .L207+8
 2444 001a 1B68     		ldr	r3, [r3]
 2445 001c 1900     		movs	r1, r3
 2446 001e 0020     		movs	r0, #0
 2447 0020 FFF7FEFF 		bl	CySysWdtSetMode
1901:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 0u;
 2448              		.loc 1 1901 0
 2449 0024 024B     		ldr	r3, .L207
 2450 0026 0022     		movs	r2, #0
 2451 0028 1A60     		str	r2, [r3]
 2452              	.L206:
1902:Generated_Source\PSoC4/CyLFClk.c ****         }
1903:Generated_Source\PSoC4/CyLFClk.c ****     }
 2453              		.loc 1 1903 0
 2454 002a C046     		nop
 2455 002c BD46     		mov	sp, r7
 2456              		@ sp needed
 2457 002e 80BD     		pop	{r7, pc}
 2458              	.L208:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 78


 2459              		.align	2
 2460              	.L207:
 2461 0030 00000000 		.word	lfclkPosedgeWdtCounter0Enabled
 2462 0034 10020B40 		.word	1074463248
 2463 0038 04000000 		.word	lfclkPosedgeWdtCounter0Mode
 2464              		.cfi_endproc
 2465              	.LFE33:
 2466              		.size	CySysClkLfclkPosedgeRestore, .-CySysClkLfclkPosedgeRestore
 2467              		.section	.text.CySysTimerDelay,"ax",%progbits
 2468              		.align	2
 2469              		.global	CySysTimerDelay
 2470              		.code	16
 2471              		.thumb_func
 2472              		.type	CySysTimerDelay, %function
 2473              	CySysTimerDelay:
 2474              	.LFB34:
1904:Generated_Source\PSoC4/CyLFClk.c **** 
1905:Generated_Source\PSoC4/CyLFClk.c **** #else
1906:Generated_Source\PSoC4/CyLFClk.c **** 
1907:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1908:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1909:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1910:Generated_Source\PSoC4/CyLFClk.c ****     *
1911:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of the WDT counter.
1912:Generated_Source\PSoC4/CyLFClk.c ****     *
1913:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1914:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - Counter is disabled
1915:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - Counter is enabled
1916:Generated_Source\PSoC4/CyLFClk.c ****     *
1917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1918:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(void)
1919:Generated_Source\PSoC4/CyLFClk.c ****     {
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
1921:Generated_Source\PSoC4/CyLFClk.c ****     }
1922:Generated_Source\PSoC4/CyLFClk.c **** 
1923:Generated_Source\PSoC4/CyLFClk.c **** 
1924:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1925:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1926:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1927:Generated_Source\PSoC4/CyLFClk.c ****     *
1928:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1929:Generated_Source\PSoC4/CyLFClk.c ****     * Enables watchdog timer reset generation.
1930:Generated_Source\PSoC4/CyLFClk.c ****     *
1931:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtClearInterrupt() feeds the watchdog. Two unserviced interrupts lead 
1932:Generated_Source\PSoC4/CyLFClk.c ****     * to a system reset (i.e. at the third match).
1933:Generated_Source\PSoC4/CyLFClk.c ****     *
1934:Generated_Source\PSoC4/CyLFClk.c ****     * ILO is enabled by the hardware once WDT is started.
1935:Generated_Source\PSoC4/CyLFClk.c ****     *
1936:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1937:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(void)
1938:Generated_Source\PSoC4/CyLFClk.c ****     {
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
1940:Generated_Source\PSoC4/CyLFClk.c ****     }
1941:Generated_Source\PSoC4/CyLFClk.c **** 
1942:Generated_Source\PSoC4/CyLFClk.c **** 
1943:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1944:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 79


1945:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1946:Generated_Source\PSoC4/CyLFClk.c ****     *
1947:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the WDT reset generation.
1948:Generated_Source\PSoC4/CyLFClk.c ****     *
1949:Generated_Source\PSoC4/CyLFClk.c ****     * This function unlocks the ENABLE bit in the CLK_ILO_CONFIG registers and
1950:Generated_Source\PSoC4/CyLFClk.c ****     * enables the user to disable ILO.
1951:Generated_Source\PSoC4/CyLFClk.c ****     *
1952:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1953:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(void)
1954:Generated_Source\PSoC4/CyLFClk.c ****     {
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
1956:Generated_Source\PSoC4/CyLFClk.c ****     }
1957:Generated_Source\PSoC4/CyLFClk.c **** 
1958:Generated_Source\PSoC4/CyLFClk.c **** 
1959:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1960:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1961:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1962:Generated_Source\PSoC4/CyLFClk.c ****     *
1963:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1964:Generated_Source\PSoC4/CyLFClk.c ****     *
1965:Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
1966:Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
1967:Generated_Source\PSoC4/CyLFClk.c ****     *
1968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1969:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 match)
1970:Generated_Source\PSoC4/CyLFClk.c ****     {
1971:Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
1972:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_MATCH_MASK)) | match;
1973:Generated_Source\PSoC4/CyLFClk.c ****     }
1974:Generated_Source\PSoC4/CyLFClk.c **** 
1975:Generated_Source\PSoC4/CyLFClk.c **** 
1976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1979:Generated_Source\PSoC4/CyLFClk.c ****     *
1980:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1981:Generated_Source\PSoC4/CyLFClk.c ****     *
1982:Generated_Source\PSoC4/CyLFClk.c ****     * \return The counter match value.
1983:Generated_Source\PSoC4/CyLFClk.c ****     *
1984:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1985:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(void)
1986:Generated_Source\PSoC4/CyLFClk.c ****     {
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
1988:Generated_Source\PSoC4/CyLFClk.c ****     }
1989:Generated_Source\PSoC4/CyLFClk.c **** 
1990:Generated_Source\PSoC4/CyLFClk.c **** 
1991:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1993:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLFClk.c ****     *
1995:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1996:Generated_Source\PSoC4/CyLFClk.c ****     *
1997:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.
1998:Generated_Source\PSoC4/CyLFClk.c ****     *
1999:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2000:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(void)
2001:Generated_Source\PSoC4/CyLFClk.c ****     {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 80


2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
2003:Generated_Source\PSoC4/CyLFClk.c ****     }
2004:Generated_Source\PSoC4/CyLFClk.c **** 
2005:Generated_Source\PSoC4/CyLFClk.c **** 
2006:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2007:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIgnoreBits
2008:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2009:Generated_Source\PSoC4/CyLFClk.c ****     *
2010:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2011:Generated_Source\PSoC4/CyLFClk.c ****     * Configures the number of the MSB bits of the watchdog timer that are not
2012:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2013:Generated_Source\PSoC4/CyLFClk.c ****     *
2014:Generated_Source\PSoC4/CyLFClk.c ****     * \param bitsNum Valid range [0-15]. The number of the MSB bits.
2015:Generated_Source\PSoC4/CyLFClk.c ****     *
2016:Generated_Source\PSoC4/CyLFClk.c ****     * \details The value of bitsNum controls the time-to-reset of the watchdog
2017:Generated_Source\PSoC4/CyLFClk.c ****     * (which happens after 3 successive matches).
2018:Generated_Source\PSoC4/CyLFClk.c ****     *
2019:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2020:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetIgnoreBits(uint32 bitsNum)
2021:Generated_Source\PSoC4/CyLFClk.c ****     {
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
2023:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_IGNORE_BITS_MASK)) | bi
2024:Generated_Source\PSoC4/CyLFClk.c ****     }
2025:Generated_Source\PSoC4/CyLFClk.c **** 
2026:Generated_Source\PSoC4/CyLFClk.c **** 
2027:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2028:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIgnoreBits
2029:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2030:Generated_Source\PSoC4/CyLFClk.c ****     *
2031:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2032:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the number of the  MSB bits of the watchdog timer that are not
2033:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2034:Generated_Source\PSoC4/CyLFClk.c ****     *
2035:Generated_Source\PSoC4/CyLFClk.c ****     * \return The number of the MSB bits.
2036:Generated_Source\PSoC4/CyLFClk.c ****     *
2037:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2038:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetIgnoreBits(void)
2039:Generated_Source\PSoC4/CyLFClk.c ****     {
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
2041:Generated_Source\PSoC4/CyLFClk.c ****     }
2042:Generated_Source\PSoC4/CyLFClk.c **** 
2043:Generated_Source\PSoC4/CyLFClk.c **** 
2044:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2045:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
2046:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2047:Generated_Source\PSoC4/CyLFClk.c ****     *
2048:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2049:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the watchdog.
2050:Generated_Source\PSoC4/CyLFClk.c ****     * Cleans the WDT match flag which is set every time the WDT counter reaches a 
2051:Generated_Source\PSoC4/CyLFClk.c ****     * WDT match value. Two unserviced interrupts lead to a system reset 
2052:Generated_Source\PSoC4/CyLFClk.c ****     * (i.e. at the third match).
2053:Generated_Source\PSoC4/CyLFClk.c ****     *
2054:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2055:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(void)
2056:Generated_Source\PSoC4/CyLFClk.c ****     {
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
2058:Generated_Source\PSoC4/CyLFClk.c ****     }
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 81


2059:Generated_Source\PSoC4/CyLFClk.c **** 
2060:Generated_Source\PSoC4/CyLFClk.c **** 
2061:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2062:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtMaskInterrupt
2063:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2064:Generated_Source\PSoC4/CyLFClk.c ****     *
2065:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2066:Generated_Source\PSoC4/CyLFClk.c ****     * After masking interrupts from WDT, they are not passed to CPU.
2067:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not disable WDT reset generation.
2068:Generated_Source\PSoC4/CyLFClk.c ****     *
2069:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2070:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtMaskInterrupt(void)
2071:Generated_Source\PSoC4/CyLFClk.c ****     {
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
2073:Generated_Source\PSoC4/CyLFClk.c ****     }
2074:Generated_Source\PSoC4/CyLFClk.c **** 
2075:Generated_Source\PSoC4/CyLFClk.c **** 
2076:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2077:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnmaskInterrupt
2078:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2079:Generated_Source\PSoC4/CyLFClk.c ****     *
2080:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2081:Generated_Source\PSoC4/CyLFClk.c ****     * After unmasking interrupts from WDT, they are passed to CPU.
2082:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not impact the reset generation.
2083:Generated_Source\PSoC4/CyLFClk.c ****     *
2084:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2085:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnmaskInterrupt(void)
2086:Generated_Source\PSoC4/CyLFClk.c ****     {
2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
2088:Generated_Source\PSoC4/CyLFClk.c ****     }
2089:Generated_Source\PSoC4/CyLFClk.c **** 
2090:Generated_Source\PSoC4/CyLFClk.c **** 
2091:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2092:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIsrCallback
2093:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2094:Generated_Source\PSoC4/CyLFClk.c ****     *
2095:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2096:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the WDT counter
2097:Generated_Source\PSoC4/CyLFClk.c ****     *
2098:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2099:Generated_Source\PSoC4/CyLFClk.c ****     *
2100:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to a previous callback function.
2101:Generated_Source\PSoC4/CyLFClk.c ****     *
2102:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2103:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function)
2104:Generated_Source\PSoC4/CyLFClk.c ****     {
2105:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
2106:Generated_Source\PSoC4/CyLFClk.c **** 
2107:Generated_Source\PSoC4/CyLFClk.c ****         prevCallback = cySysWdtCallback;
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
2109:Generated_Source\PSoC4/CyLFClk.c **** 
2110:Generated_Source\PSoC4/CyLFClk.c ****         return(prevCallback);
2111:Generated_Source\PSoC4/CyLFClk.c ****     }
2112:Generated_Source\PSoC4/CyLFClk.c **** 
2113:Generated_Source\PSoC4/CyLFClk.c **** 
2114:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2115:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIsrCallback
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 82


2116:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2117:Generated_Source\PSoC4/CyLFClk.c ****     *
2118:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2119:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the WDT counter
2120:Generated_Source\PSoC4/CyLFClk.c ****     *
2121:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for WDT.
2122:Generated_Source\PSoC4/CyLFClk.c ****     *
2123:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2124:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(void)
2125:Generated_Source\PSoC4/CyLFClk.c ****     {
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
2127:Generated_Source\PSoC4/CyLFClk.c ****     }
2128:Generated_Source\PSoC4/CyLFClk.c **** 
2129:Generated_Source\PSoC4/CyLFClk.c **** 
2130:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2131:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
2132:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2133:Generated_Source\PSoC4/CyLFClk.c ****     *
2134:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2135:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
2136:Generated_Source\PSoC4/CyLFClk.c ****     *
2137:Generated_Source\PSoC4/CyLFClk.c ****     * The handler calls the respective callback functions configured by the user 
2138:Generated_Source\PSoC4/CyLFClk.c ****     * by using CySysWdtSetIsrCallback() API.
2139:Generated_Source\PSoC4/CyLFClk.c ****     *
2140:Generated_Source\PSoC4/CyLFClk.c ****     *
2141:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2142:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
2143:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
2144:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
2145:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
2146:Generated_Source\PSoC4/CyLFClk.c ****     *
2147:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
2149:Generated_Source\PSoC4/CyLFClk.c ****     {
2150:Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
2151:Generated_Source\PSoC4/CyLFClk.c ****         {
2152:Generated_Source\PSoC4/CyLFClk.c ****             (void)(cySysWdtCallback)();
2153:Generated_Source\PSoC4/CyLFClk.c ****         }
2154:Generated_Source\PSoC4/CyLFClk.c **** 
2155:Generated_Source\PSoC4/CyLFClk.c ****         CySysWdtClearInterrupt();
2156:Generated_Source\PSoC4/CyLFClk.c ****     }
2157:Generated_Source\PSoC4/CyLFClk.c **** 
2158:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
2159:Generated_Source\PSoC4/CyLFClk.c **** 
2160:Generated_Source\PSoC4/CyLFClk.c **** 
2161:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
2162:Generated_Source\PSoC4/CyLFClk.c **** 
2163:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
2164:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkGetTimerSource
2165:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
2166:Generated_Source\PSoC4/CyLFClk.c **** *
2167:Generated_Source\PSoC4/CyLFClk.c **** * \brief Gets the clock source for the DeepSleep Timers.
2168:Generated_Source\PSoC4/CyLFClk.c **** *
2169:Generated_Source\PSoC4/CyLFClk.c **** * The function is applicable only for PSoC 4100S / PSoC Analog Coprocessor.
2170:Generated_Source\PSoC4/CyLFClk.c **** *
2171:Generated_Source\PSoC4/CyLFClk.c **** * \return The DeepSleep Timer source
2172:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_TIMER_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 83


2173:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_TIMER_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
2174:Generated_Source\PSoC4/CyLFClk.c **** *
2175:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
2176:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void)
2177:Generated_Source\PSoC4/CyLFClk.c ****     {
2178:Generated_Source\PSoC4/CyLFClk.c ****         uint32 timerSource;
2179:Generated_Source\PSoC4/CyLFClk.c ****         timerSource = CY_SYS_WCO_WDT_CONFIG_REG & CY_SYS_CLK_TIMER_SEL_MASK;
2180:Generated_Source\PSoC4/CyLFClk.c ****         return (timerSource);
2181:Generated_Source\PSoC4/CyLFClk.c ****     }    
2182:Generated_Source\PSoC4/CyLFClk.c **** 
2183:Generated_Source\PSoC4/CyLFClk.c **** 
2184:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
2185:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkSetTimerSource
2186:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
2187:Generated_Source\PSoC4/CyLFClk.c **** *
2188:Generated_Source\PSoC4/CyLFClk.c **** * \brief Sets the clock source for the DeepSleep Timers.
2189:Generated_Source\PSoC4/CyLFClk.c **** *
2190:Generated_Source\PSoC4/CyLFClk.c **** * The function is applicable only for PSoC 4100S / PSoC Analog Coprocessor 
2191:Generated_Source\PSoC4/CyLFClk.c **** * devices.
2192:Generated_Source\PSoC4/CyLFClk.c **** *
2193:Generated_Source\PSoC4/CyLFClk.c **** * \param source
2194:Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_TIMER_SRC_ILO - Internal Low Frequency (32 kHz) Oscillator 
2195:Generated_Source\PSoC4/CyLFClk.c **** * (ILO).<br>
2196:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_TIMER_SRC_WCO - Low Frequency Watch Crystal Oscillator 
2197:Generated_Source\PSoC4/CyLFClk.c **** * (WCO).
2198:Generated_Source\PSoC4/CyLFClk.c **** *
2199:Generated_Source\PSoC4/CyLFClk.c **** * \details Both the current source and the new source must be running and stable 
2200:Generated_Source\PSoC4/CyLFClk.c **** * before calling this function.
2201:Generated_Source\PSoC4/CyLFClk.c **** *
2202:Generated_Source\PSoC4/CyLFClk.c **** * \warning DeepSleep Timer reset is required if Timer source was switched while 
2203:Generated_Source\PSoC4/CyLFClk.c **** * DeepSleep Timers were running. Call CySysTimerResetCounters() API after 
2204:Generated_Source\PSoC4/CyLFClk.c **** * Timer source switching.
2205:Generated_Source\PSoC4/CyLFClk.c **** * It is highly recommended to disable DeepSleep Timers before Timer source 
2206:Generated_Source\PSoC4/CyLFClk.c **** * switching. Changing the Timer source may change the functionality that uses 
2207:Generated_Source\PSoC4/CyLFClk.c **** * this Timers as clock source.
2208:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
2209:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetTimerSource(uint32 source)
2210:Generated_Source\PSoC4/CyLFClk.c ****     {
2211:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
2212:Generated_Source\PSoC4/CyLFClk.c **** 
2213:Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetTimerSource() != source)
2214:Generated_Source\PSoC4/CyLFClk.c ****         {
2215:Generated_Source\PSoC4/CyLFClk.c **** 
2216:Generated_Source\PSoC4/CyLFClk.c ****             /* Reset both _EN bits in WCO_WDT_CLKEN register */
2217:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CLKEN_REG &= ~CY_SYS_WCO_WDT_CLKEN_RESET_MASK;
2218:Generated_Source\PSoC4/CyLFClk.c ****             
2219:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait 4 new clock source-cycles for change to come into effect */
2220:Generated_Source\PSoC4/CyLFClk.c ****             CyDelayUs(CY_SYS_4TIMER_DELAY_US);
2221:Generated_Source\PSoC4/CyLFClk.c **** 
2222:Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
2223:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CONFIG_REG = (CY_SYS_WCO_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_TIMER_SEL
2224:Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_TIMER_SEL_MASK);
2225:Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
2226:Generated_Source\PSoC4/CyLFClk.c ****         }
2227:Generated_Source\PSoC4/CyLFClk.c **** 
2228:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_CLKEN_REG = (CY_SYS_WCO_WDT_CLKEN_REG & (uint32)(~CY_SYS_WCO_WDT_CLKEN_RESET
2229:Generated_Source\PSoC4/CyLFClk.c ****                                     CY_SYS_SET_CURRENT_TIMER_SOURCE_BIT;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 84


2230:Generated_Source\PSoC4/CyLFClk.c ****     }
2231:Generated_Source\PSoC4/CyLFClk.c **** 
2232:Generated_Source\PSoC4/CyLFClk.c **** 
2233:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2234:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetEnabledStatus
2235:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2236:Generated_Source\PSoC4/CyLFClk.c ****     *
2237:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of one of the three DeepSleep Timer 
2238:Generated_Source\PSoC4/CyLFClk.c ****     * counters.
2239:Generated_Source\PSoC4/CyLFClk.c ****     *
2240:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the DeepSleep Timer 
2241:Generated_Source\PSoC4/CyLFClk.c ****     * counter.
2242:Generated_Source\PSoC4/CyLFClk.c ****     *
2243:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the Timers counter:
2244:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the Counter is disabled.
2245:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the Counter is enabled.
2246:Generated_Source\PSoC4/CyLFClk.c ****     *
2247:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2248:Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual DeepSleep Timer counter status from the 
2249:Generated_Source\PSoC4/CyLFClk.c ****     * status register. It may take up to 3 LFCLK cycles for the Timer status 
2250:Generated_Source\PSoC4/CyLFClk.c ****     * register to contain actual data after the Timer counter is enabled.
2251:Generated_Source\PSoC4/CyLFClk.c ****     *
2252:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2253:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetEnabledStatus(uint32 counterNum)
2254:Generated_Source\PSoC4/CyLFClk.c ****     {
2255:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_TIMER_COUNTERS_MAX);
2256:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WCO_WDT_CONTROL_REG >> ((CY_SYS_TIMER_CNT_SHIFT * counterNum) + 
2257:Generated_Source\PSoC4/CyLFClk.c ****                                                  CY_SYS_TIMER_CNT_STTS_SHIFT)) & 0x01u);
2258:Generated_Source\PSoC4/CyLFClk.c ****     }
2259:Generated_Source\PSoC4/CyLFClk.c **** 
2260:Generated_Source\PSoC4/CyLFClk.c **** 
2261:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2262:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetMode
2263:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2264:Generated_Source\PSoC4/CyLFClk.c ****     *
2265:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Writes the mode of one of the three DeepSleep Timer counters.
2266:Generated_Source\PSoC4/CyLFClk.c ****     *
2267:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the DeepSleep Timer 
2268:Generated_Source\PSoC4/CyLFClk.c ****     * counter.
2269:Generated_Source\PSoC4/CyLFClk.c ****     *
2270:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
2271:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_TIMER_MODE_NONE - Free running.<br>
2272:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_MODE_INT - The interrupt generated on match for counter 0
2273:Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.
2274:Generated_Source\PSoC4/CyLFClk.c ****     *
2275:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2276:Generated_Source\PSoC4/CyLFClk.c ****     * DeepSleep Timer counter counterNum should be disabled to set a mode. 
2277:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise, this function call has no effect. If the specified counter is 
2278:Generated_Source\PSoC4/CyLFClk.c ****     * enabled, call the CySysTimerDisable() function with the corresponding 
2279:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop.
2280:Generated_Source\PSoC4/CyLFClk.c ****     *
2281:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2282:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerSetMode(uint32 counterNum, uint32 mode)
2283:Generated_Source\PSoC4/CyLFClk.c ****     {
2284:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
2285:Generated_Source\PSoC4/CyLFClk.c **** 
2286:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_TIMER_COUNTERS_MAX);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 85


2287:Generated_Source\PSoC4/CyLFClk.c **** 
2288:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(mode <= CY_SYS_TIMER_MODE_MASK);
2289:Generated_Source\PSoC4/CyLFClk.c **** 
2290:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysTimerGetEnabledStatus(counterNum))
2291:Generated_Source\PSoC4/CyLFClk.c ****         {
2292:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WCO_WDT_CONFIG_REG &
2293:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_TIMER_MODE_MASK << (counterNum * CY_SYS_T
2294:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_TIMER_MODE_MASK) << (counterNum * CY_SYS_TIME
2295:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CONFIG_REG = configRegValue;
2296:Generated_Source\PSoC4/CyLFClk.c ****         }
2297:Generated_Source\PSoC4/CyLFClk.c ****     }
2298:Generated_Source\PSoC4/CyLFClk.c **** 
2299:Generated_Source\PSoC4/CyLFClk.c **** 
2300:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2301:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetMode
2302:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2303:Generated_Source\PSoC4/CyLFClk.c ****     *
2304:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three DeepSleep Timer counters.
2305:Generated_Source\PSoC4/CyLFClk.c ****     *
2306:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the Timer counter.
2307:Generated_Source\PSoC4/CyLFClk.c ****     *
2308:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
2309:Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysTimerSetMode().
2310:Generated_Source\PSoC4/CyLFClk.c ****     *
2311:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2312:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetMode(uint32 counterNum)
2313:Generated_Source\PSoC4/CyLFClk.c ****     {
2314:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WCO_WDT_CONFIG_REG >> (counterNum * CY_SYS_TIMER_CNT_SHIFT)) & CY_SYS_TIMER
2315:Generated_Source\PSoC4/CyLFClk.c ****     }
2316:Generated_Source\PSoC4/CyLFClk.c **** 
2317:Generated_Source\PSoC4/CyLFClk.c **** 
2318:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2319:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetClearOnMatch
2320:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2321:Generated_Source\PSoC4/CyLFClk.c ****     *
2322:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the DeepSleep Timer counter "clear on match" setting.
2323:Generated_Source\PSoC4/CyLFClk.c ****     *
2324:Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue 
2325:Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
2326:Generated_Source\PSoC4/CyLFClk.c ****     *
2327:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
2328:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the Timer counter. The match values are not
2329:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
2330:Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
2331:Generated_Source\PSoC4/CyLFClk.c ****     * 1 to enable appropriate counter
2332:Generated_Source\PSoC4/CyLFClk.c ****     *
2333:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2334:Generated_Source\PSoC4/CyLFClk.c ****     * Timer counter counterNum should be disabled. Otherwise this function call
2335:Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysTimerDisable()
2336:Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
2337:Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three Timer source-cycles.
2338:Generated_Source\PSoC4/CyLFClk.c ****     *
2339:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2340:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerSetClearOnMatch(uint32 counterNum, uint32 enable)
2341:Generated_Source\PSoC4/CyLFClk.c ****     {
2342:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
2343:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 86


2344:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_TIMER0) ||
2345:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_TIMER1));
2346:Generated_Source\PSoC4/CyLFClk.c **** 
2347:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysTimerGetEnabledStatus(counterNum))
2348:Generated_Source\PSoC4/CyLFClk.c ****         {
2349:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WCO_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
2350:Generated_Source\PSoC4/CyLFClk.c ****              ((counterNum * CY_SYS_TIMER_CNT_SHIFT) + CY_SYS_TIMER_CNT_MATCH_CLR_SHIFT)));
2351:Generated_Source\PSoC4/CyLFClk.c **** 
2352:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
2353:Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_TIMER_CNT_SHIFT) + CY_SYS_TIMER_CNT_MAT
2354:Generated_Source\PSoC4/CyLFClk.c **** 
2355:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CONFIG_REG = configRegValue;
2356:Generated_Source\PSoC4/CyLFClk.c ****         }
2357:Generated_Source\PSoC4/CyLFClk.c ****     }
2358:Generated_Source\PSoC4/CyLFClk.c **** 
2359:Generated_Source\PSoC4/CyLFClk.c **** 
2360:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2361:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetClearOnMatch
2362:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2363:Generated_Source\PSoC4/CyLFClk.c ****     *
2364:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the "clear on match" setting for the specified DeepSleep Timer 
2365:Generated_Source\PSoC4/CyLFClk.c ****     * counter.
2366:Generated_Source\PSoC4/CyLFClk.c ****     *
2367:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the Timer counter. The 
2368:Generated_Source\PSoC4/CyLFClk.c ****     * match values are not supported by counter 2.
2369:Generated_Source\PSoC4/CyLFClk.c ****     *
2370:Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
2371:Generated_Source\PSoC4/CyLFClk.c ****     *
2372:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2373:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetClearOnMatch(uint32 counterNum)
2374:Generated_Source\PSoC4/CyLFClk.c ****     {
2375:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_TIMER0) ||
2376:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_TIMER1));
2377:Generated_Source\PSoC4/CyLFClk.c **** 
2378:Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WCO_WDT_CONFIG_REG >>
2379:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_TIMER_CNT_SHIFT) + CY_SYS_TIMER_CNT_MATCH_CLR_SHIFT))
2380:Generated_Source\PSoC4/CyLFClk.c ****     }
2381:Generated_Source\PSoC4/CyLFClk.c **** 
2382:Generated_Source\PSoC4/CyLFClk.c **** 
2383:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2384:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerEnable
2385:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2386:Generated_Source\PSoC4/CyLFClk.c ****     *
2387:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified DeepSleep Timer counters. All the counters 
2388:Generated_Source\PSoC4/CyLFClk.c ****     * specified in the mask are enabled.
2389:Generated_Source\PSoC4/CyLFClk.c ****     *
2390:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask  CY_SYS_TIMER0_MASK - The mask for counter 0 to enable.<br>
2391:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER1_MASK - The mask for counter 1 to enable.<br>
2392:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER2_MASK - The mask for counter 2 to enable.
2393:Generated_Source\PSoC4/CyLFClk.c ****     *
2394:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2395:Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling Timer requires 3 Timer source-cycles to come into effect.
2396:Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the Timer enable state must not be changed more than once in
2397:Generated_Source\PSoC4/CyLFClk.c ****     * that period.
2398:Generated_Source\PSoC4/CyLFClk.c ****     *
2399:Generated_Source\PSoC4/CyLFClk.c ****     * After Timer is enabled, it is illegal to write Timer configuration 
2400:Generated_Source\PSoC4/CyLFClk.c ****     * (WCO_WDT_CONFIG) and control (WCO_WDT_CONTROL) registers. This means that all
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 87


2401:Generated_Source\PSoC4/CyLFClk.c ****     * Timer functions that contain 'write' in the name (with the exception of 
2402:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerSetMatch() function) are illegal to call once Timer enabled.
2403:Generated_Source\PSoC4/CyLFClk.c ****     *
2404:Generated_Source\PSoC4/CyLFClk.c ****     * Timer current source must be running and stable before calling this 
2405:Generated_Source\PSoC4/CyLFClk.c ****     * function.
2406:Generated_Source\PSoC4/CyLFClk.c ****     *
2407:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2408:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerEnable(uint32 counterMask)
2409:Generated_Source\PSoC4/CyLFClk.c ****     {
2410:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_CONTROL_REG |= counterMask;
2411:Generated_Source\PSoC4/CyLFClk.c **** 
2412:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER0_MASK))
2413:Generated_Source\PSoC4/CyLFClk.c ****         {
2414:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysTimerGetEnabledStatus(CY_SYS_TIMER0))
2415:Generated_Source\PSoC4/CyLFClk.c ****             {
2416:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2417:Generated_Source\PSoC4/CyLFClk.c ****             }
2418:Generated_Source\PSoC4/CyLFClk.c ****         }
2419:Generated_Source\PSoC4/CyLFClk.c **** 
2420:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER1_MASK))
2421:Generated_Source\PSoC4/CyLFClk.c ****         {
2422:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysTimerGetEnabledStatus(CY_SYS_TIMER1))
2423:Generated_Source\PSoC4/CyLFClk.c ****             {
2424:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2425:Generated_Source\PSoC4/CyLFClk.c ****             }
2426:Generated_Source\PSoC4/CyLFClk.c ****         }
2427:Generated_Source\PSoC4/CyLFClk.c **** 
2428:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER2_MASK))
2429:Generated_Source\PSoC4/CyLFClk.c ****         {
2430:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysTimerGetEnabledStatus(CY_SYS_TIMER2))
2431:Generated_Source\PSoC4/CyLFClk.c ****             {
2432:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2433:Generated_Source\PSoC4/CyLFClk.c ****             }
2434:Generated_Source\PSoC4/CyLFClk.c ****         }
2435:Generated_Source\PSoC4/CyLFClk.c ****     }
2436:Generated_Source\PSoC4/CyLFClk.c **** 
2437:Generated_Source\PSoC4/CyLFClk.c **** 
2438:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2439:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerDisable
2440:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2441:Generated_Source\PSoC4/CyLFClk.c ****     *
2442:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified DeepSleep Timer counters.
2443:Generated_Source\PSoC4/CyLFClk.c ****     *
2444:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
2445:Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
2446:Generated_Source\PSoC4/CyLFClk.c ****     *
2447:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
2448:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_TIMER0_MASK - The mask for Counter 0 to disable.<br>
2449:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER1_MASK - The mask for Counter 1 to disable.<br>
2450:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER2_MASK - The mask for Counter 2 to disable.
2451:Generated_Source\PSoC4/CyLFClk.c ****     *
2452:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2453:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerDisable(uint32 counterMask)
2454:Generated_Source\PSoC4/CyLFClk.c ****     {
2455:Generated_Source\PSoC4/CyLFClk.c **** 
2456:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_CONTROL_REG &= ~counterMask;
2457:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 88


2458:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER0_MASK))
2459:Generated_Source\PSoC4/CyLFClk.c ****         {
2460:Generated_Source\PSoC4/CyLFClk.c ****             while (0u != CySysTimerGetEnabledStatus(CY_SYS_TIMER0))
2461:Generated_Source\PSoC4/CyLFClk.c ****             {
2462:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2463:Generated_Source\PSoC4/CyLFClk.c ****             }
2464:Generated_Source\PSoC4/CyLFClk.c ****         }
2465:Generated_Source\PSoC4/CyLFClk.c **** 
2466:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER1_MASK))
2467:Generated_Source\PSoC4/CyLFClk.c ****         {
2468:Generated_Source\PSoC4/CyLFClk.c ****             while (0u != CySysTimerGetEnabledStatus(CY_SYS_TIMER1))
2469:Generated_Source\PSoC4/CyLFClk.c ****             {
2470:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2471:Generated_Source\PSoC4/CyLFClk.c ****             }
2472:Generated_Source\PSoC4/CyLFClk.c ****         }
2473:Generated_Source\PSoC4/CyLFClk.c **** 
2474:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_TIMER2_MASK))
2475:Generated_Source\PSoC4/CyLFClk.c ****         {
2476:Generated_Source\PSoC4/CyLFClk.c ****             while (0u != CySysTimerGetEnabledStatus(CY_SYS_TIMER2))
2477:Generated_Source\PSoC4/CyLFClk.c ****             {
2478:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
2479:Generated_Source\PSoC4/CyLFClk.c ****             }
2480:Generated_Source\PSoC4/CyLFClk.c ****         }
2481:Generated_Source\PSoC4/CyLFClk.c **** 
2482:Generated_Source\PSoC4/CyLFClk.c ****     }
2483:Generated_Source\PSoC4/CyLFClk.c **** 
2484:Generated_Source\PSoC4/CyLFClk.c **** 
2485:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2486:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetCascade
2487:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2488:Generated_Source\PSoC4/CyLFClk.c ****     *
2489:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2490:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two DeepSleep Timers cascade values based on the combination of 
2491:Generated_Source\PSoC4/CyLFClk.c ****     * mask values specified.
2492:Generated_Source\PSoC4/CyLFClk.c ****     *
2493:Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
2494:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_CASCADE_NONE - Neither<br>
2495:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_CASCADE_01 - Cascade 01<br>
2496:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_CASCADE_12 - Cascade 12
2497:Generated_Source\PSoC4/CyLFClk.c ****     *
2498:Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
2499:Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
2500:Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
2501:Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysTimerSetCascade() was called with ORed defines it is necessary 
2502:Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysTimeSetClearOnMatch(1,1). It is needed to make sure that 
2503:Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
2504:Generated_Source\PSoC4/CyLFClk.c ****     *
2505:Generated_Source\PSoC4/CyLFClk.c ****     * Timer counters that are part of the specified cascade should be disabled.
2506:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
2507:Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysTimerDisable() function with the corresponding
2508:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
2509:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 Timers source-cycles.
2510:Generated_Source\PSoC4/CyLFClk.c ****     *
2511:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2512:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerSetCascade(uint32 cascadeMask)
2513:Generated_Source\PSoC4/CyLFClk.c ****     {
2514:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 89


2515:Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
2516:Generated_Source\PSoC4/CyLFClk.c **** 
2517:Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysTimerGetEnabledStatus(CY_SYS_TIMER0) |
2518:Generated_Source\PSoC4/CyLFClk.c ****                             CySysTimerGetEnabledStatus(CY_SYS_TIMER1) |
2519:Generated_Source\PSoC4/CyLFClk.c ****                             CySysTimerGetEnabledStatus(CY_SYS_TIMER2);
2520:Generated_Source\PSoC4/CyLFClk.c **** 
2521:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
2522:Generated_Source\PSoC4/CyLFClk.c ****         {
2523:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WCO_WDT_CONFIG_REG;
2524:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_TIMER_CASCADE_01|CY_SYS_TIMER_CASCADE_12)));
2525:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
2526:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CONFIG_REG = configRegValue;
2527:Generated_Source\PSoC4/CyLFClk.c ****         }
2528:Generated_Source\PSoC4/CyLFClk.c ****     }
2529:Generated_Source\PSoC4/CyLFClk.c **** 
2530:Generated_Source\PSoC4/CyLFClk.c **** 
2531:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2532:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetCascade
2533:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2534:Generated_Source\PSoC4/CyLFClk.c ****     *
2535:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two DeepSleep Timer cascade values returning a mask of the 
2536:Generated_Source\PSoC4/CyLFClk.c ****     * bits set.
2537:Generated_Source\PSoC4/CyLFClk.c ****     *
2538:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
2539:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER_CASCADE_NONE - Neither
2540:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER_CASCADE_01 - Cascade 01
2541:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER_CASCADE_12 - Cascade 12
2542:Generated_Source\PSoC4/CyLFClk.c ****     *
2543:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2544:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetCascade(void)
2545:Generated_Source\PSoC4/CyLFClk.c ****     {
2546:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WCO_WDT_CONFIG_REG & (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12));
2547:Generated_Source\PSoC4/CyLFClk.c ****     }
2548:Generated_Source\PSoC4/CyLFClk.c **** 
2549:Generated_Source\PSoC4/CyLFClk.c **** 
2550:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2551:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetMatch
2552:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLFClk.c ****     *
2554:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the Timer counter match comparison value.
2555:Generated_Source\PSoC4/CyLFClk.c ****     *
2556:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1]. The number of the Timer counter. The 
2557:Generated_Source\PSoC4/CyLFClk.c ****     * match values are not supported by counter 2.
2558:Generated_Source\PSoC4/CyLFClk.c ****     *
2559:Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
2560:Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
2561:Generated_Source\PSoC4/CyLFClk.c ****     *
2562:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2563:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerSetMatch(uint32 counterNum, uint32 match)
2564:Generated_Source\PSoC4/CyLFClk.c ****     {
2565:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
2566:Generated_Source\PSoC4/CyLFClk.c **** 
2567:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_TIMER0) ||
2568:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_TIMER1));
2569:Generated_Source\PSoC4/CyLFClk.c **** 
2570:Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
2571:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_3TIMER_DELAY_US);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 90


2572:Generated_Source\PSoC4/CyLFClk.c **** 
2573:Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WCO_WDT_MATCH_REG;
2574:Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_TIMER_LOWER_16BITS_MASK << (counterNum * CY_SYS_TIMER
2575:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_TIMER_CNT_MATCH_SHIFT
2576:Generated_Source\PSoC4/CyLFClk.c **** 
2577:Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
2578:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_1TIMER_DELAY_US);
2579:Generated_Source\PSoC4/CyLFClk.c ****     }
2580:Generated_Source\PSoC4/CyLFClk.c **** 
2581:Generated_Source\PSoC4/CyLFClk.c **** 
2582:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2583:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetToggleBit
2584:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2585:Generated_Source\PSoC4/CyLFClk.c ****     *
2586:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures which bit in Timer counter 2 to monitor for a toggle.
2587:Generated_Source\PSoC4/CyLFClk.c ****     *
2588:Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if mode for counter 2 has
2589:Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
2590:Generated_Source\PSoC4/CyLFClk.c ****     *
2591:Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31]. Counter 2 bit to monitor for a toggle.
2592:Generated_Source\PSoC4/CyLFClk.c ****     *
2593:Generated_Source\PSoC4/CyLFClk.c ****     * \details Timer counter 2 should be disabled. Otherwise this function call has
2594:Generated_Source\PSoC4/CyLFClk.c ****     * no effect.
2595:Generated_Source\PSoC4/CyLFClk.c ****     *
2596:Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysTimerDisable() function with
2597:Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
2598:Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to three Timer source-cycles.
2599:Generated_Source\PSoC4/CyLFClk.c ****     *
2600:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2601:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerSetToggleBit(uint32 bits)
2602:Generated_Source\PSoC4/CyLFClk.c ****     {
2603:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
2604:Generated_Source\PSoC4/CyLFClk.c **** 
2605:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysTimerGetEnabledStatus(CY_SYS_TIMER2))
2606:Generated_Source\PSoC4/CyLFClk.c ****         {
2607:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WCO_WDT_CONFIG_REG;
2608:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_TIMER_CONFIG_BITS2_MASK << CY_SYS_TIMER_CO
2609:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_TIMER_CONFIG_BITS2_MASK) << CY_SYS_TIMER_CONFIG_BITS2
2610:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WCO_WDT_CONFIG_REG = configRegValue;
2611:Generated_Source\PSoC4/CyLFClk.c ****         }
2612:Generated_Source\PSoC4/CyLFClk.c ****     }
2613:Generated_Source\PSoC4/CyLFClk.c **** 
2614:Generated_Source\PSoC4/CyLFClk.c **** 
2615:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2616:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetToggleBit
2617:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2618:Generated_Source\PSoC4/CyLFClk.c ****     *
2619:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads which bit in Timer counter 2 is monitored for a toggle.
2620:Generated_Source\PSoC4/CyLFClk.c ****     *
2621:Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
2622:Generated_Source\PSoC4/CyLFClk.c ****     *
2623:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2624:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetToggleBit(void)
2625:Generated_Source\PSoC4/CyLFClk.c ****     {
2626:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WCO_WDT_CONFIG_REG >> CY_SYS_TIMER_CONFIG_BITS2_POS) & CY_SYS_TIMER_CONFIG_
2627:Generated_Source\PSoC4/CyLFClk.c ****     }
2628:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 91


2629:Generated_Source\PSoC4/CyLFClk.c **** 
2630:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2631:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetMatch
2632:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2633:Generated_Source\PSoC4/CyLFClk.c ****     *
2634:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the Timer counter match comparison value.
2635:Generated_Source\PSoC4/CyLFClk.c ****     *
2636:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1]. The number of the DeepSleep Timer 
2637:Generated_Source\PSoC4/CyLFClk.c ****     * counter. The match values are not supported by counter 2.
2638:Generated_Source\PSoC4/CyLFClk.c ****     *
2639:Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
2640:Generated_Source\PSoC4/CyLFClk.c ****     *
2641:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2642:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetMatch(uint32 counterNum)
2643:Generated_Source\PSoC4/CyLFClk.c ****     {
2644:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_TIMER0) ||
2645:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_TIMER1));
2646:Generated_Source\PSoC4/CyLFClk.c **** 
2647:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WCO_WDT_MATCH_REG >> (counterNum * CY_SYS_TIMER_CNT_MATCH_SHIFT)) &
2648:Generated_Source\PSoC4/CyLFClk.c ****                                                                   CY_SYS_TIMER_LOWER_16BITS_MASK);
2649:Generated_Source\PSoC4/CyLFClk.c ****     }
2650:Generated_Source\PSoC4/CyLFClk.c **** 
2651:Generated_Source\PSoC4/CyLFClk.c **** 
2652:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2653:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetCount
2654:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2655:Generated_Source\PSoC4/CyLFClk.c ****     *
2656:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current DeepSleep Timer counter value.
2657:Generated_Source\PSoC4/CyLFClk.c ****     *
2658:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the Timer counter.
2659:Generated_Source\PSoC4/CyLFClk.c ****     *
2660:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value. Counter 0 and Counter 1 are 16 bit counters 
2661:Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
2662:Generated_Source\PSoC4/CyLFClk.c ****     *
2663:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2664:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetCount(uint32 counterNum)
2665:Generated_Source\PSoC4/CyLFClk.c ****     {
2666:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
2667:Generated_Source\PSoC4/CyLFClk.c **** 
2668:Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
2669:Generated_Source\PSoC4/CyLFClk.c ****         {
2670:Generated_Source\PSoC4/CyLFClk.c ****             /* Timer Counter 0 */
2671:Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
2672:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WCO_WDT_CTRLOW_REG & CY_SYS_TIMER_LOWER_16BITS_MASK;
2673:Generated_Source\PSoC4/CyLFClk.c ****             break;
2674:Generated_Source\PSoC4/CyLFClk.c **** 
2675:Generated_Source\PSoC4/CyLFClk.c ****             /* Timer Counter 1 */
2676:Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
2677:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WCO_WDT_CTRLOW_REG >> CY_SYS_TIMER_CNT_MATCH_SHIFT) & CY_SYS_TIM
2678:Generated_Source\PSoC4/CyLFClk.c ****             break;
2679:Generated_Source\PSoC4/CyLFClk.c **** 
2680:Generated_Source\PSoC4/CyLFClk.c ****             /* Timer Counter 2 */
2681:Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
2682:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WCO_WDT_CTRHIGH_REG;
2683:Generated_Source\PSoC4/CyLFClk.c ****             break;
2684:Generated_Source\PSoC4/CyLFClk.c **** 
2685:Generated_Source\PSoC4/CyLFClk.c ****             default:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 92


2686:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
2687:Generated_Source\PSoC4/CyLFClk.c ****             break;
2688:Generated_Source\PSoC4/CyLFClk.c ****         }
2689:Generated_Source\PSoC4/CyLFClk.c **** 
2690:Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
2691:Generated_Source\PSoC4/CyLFClk.c ****     }
2692:Generated_Source\PSoC4/CyLFClk.c **** 
2693:Generated_Source\PSoC4/CyLFClk.c **** 
2694:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2695:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetInterruptSource
2696:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2697:Generated_Source\PSoC4/CyLFClk.c ****     *
2698:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2699:Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the DeepSleep Timer counters interrupts that are 
2700:Generated_Source\PSoC4/CyLFClk.c ****     * currently set by the hardware, if a corresponding mode is selected.
2701:Generated_Source\PSoC4/CyLFClk.c ****     *
2702:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
2703:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER0_INT - Set interrupt for Counter 0
2704:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER1_INT - Set interrupt for Counter 1
2705:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_TIMER2_INT - Set interrupt for Counter 2
2706:Generated_Source\PSoC4/CyLFClk.c ****     *
2707:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2708:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysTimerGetInterruptSource(void)
2709:Generated_Source\PSoC4/CyLFClk.c ****     {
2710:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WCO_WDT_CONTROL_REG & (CY_SYS_TIMER0_INT | CY_SYS_TIMER1_INT | CY_SYS_TIMER2
2711:Generated_Source\PSoC4/CyLFClk.c ****     }
2712:Generated_Source\PSoC4/CyLFClk.c **** 
2713:Generated_Source\PSoC4/CyLFClk.c **** 
2714:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2715:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerClearInterrupt
2716:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2717:Generated_Source\PSoC4/CyLFClk.c ****     *
2718:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Clears all the DeepSleep Timer counter interrupts set in the mask.
2719:Generated_Source\PSoC4/CyLFClk.c ****     *
2720:Generated_Source\PSoC4/CyLFClk.c ****     * All the Timer interrupts are to be cleared by the firmware, otherwise
2721:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
2722:Generated_Source\PSoC4/CyLFClk.c ****     *
2723:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
2724:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_TIMER0_INT - Clear counter 0<br>
2725:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER1_INT - Clear counter 1<br>
2726:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER2_INT - Clear counter 2
2727:Generated_Source\PSoC4/CyLFClk.c ****     *
2728:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2729:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerClearInterrupt(uint32 counterMask)
2730:Generated_Source\PSoC4/CyLFClk.c ****     {
2731:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
2732:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
2733:Generated_Source\PSoC4/CyLFClk.c **** 
2734:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WCO_TIMER control register value */
2735:Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_TIMER0_INT |
2736:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_TIMER1_INT |
2737:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_TIMER2_INT);
2738:Generated_Source\PSoC4/CyLFClk.c **** 
2739:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_CONTROL_REG = counterMask | (CY_SYS_WCO_WDT_CONTROL_REG & ~(CY_SYS_TIMER0_IN
2740:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_TIMER1_INT |
2741:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_TIMER2_INT));
2742:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 93


2743:Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
2744:Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
2745:Generated_Source\PSoC4/CyLFClk.c ****         */
2746:Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WCO_WDT_CONTROL_REG;
2747:Generated_Source\PSoC4/CyLFClk.c **** 
2748:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
2749:Generated_Source\PSoC4/CyLFClk.c ****     }
2750:Generated_Source\PSoC4/CyLFClk.c **** 
2751:Generated_Source\PSoC4/CyLFClk.c **** 
2752:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2753:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerSetInterruptCallback
2754:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2755:Generated_Source\PSoC4/CyLFClk.c ****     *
2756:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2757:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular DeepSleep Timer counter.
2758:Generated_Source\PSoC4/CyLFClk.c ****     *
2759:Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the Timer interrupt.
2760:Generated_Source\PSoC4/CyLFClk.c ****     *
2761:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the Timer counter.
2762:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2763:Generated_Source\PSoC4/CyLFClk.c ****     *
2764:Generated_Source\PSoC4/CyLFClk.c ****     * \return  The pointer to the previous callback function. 
2765:Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
2766:Generated_Source\PSoC4/CyLFClk.c ****     *
2767:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2768:Generated_Source\PSoC4/CyLFClk.c ****     cyTimerCallback CySysTimerSetInterruptCallback(uint32 counterNum, cyTimerCallback function)
2769:Generated_Source\PSoC4/CyLFClk.c ****     {
2770:Generated_Source\PSoC4/CyLFClk.c ****         cyTimerCallback prevCallback = (void *)0;
2771:Generated_Source\PSoC4/CyLFClk.c **** 
2772:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_SYS_NUM_OF_TIMERS)
2773:Generated_Source\PSoC4/CyLFClk.c ****         {
2774:Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysTimerCallback[counterNum];
2775:Generated_Source\PSoC4/CyLFClk.c ****             cySysTimerCallback[counterNum] = function;
2776:Generated_Source\PSoC4/CyLFClk.c ****         }
2777:Generated_Source\PSoC4/CyLFClk.c ****         else
2778:Generated_Source\PSoC4/CyLFClk.c ****         {
2779:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
2780:Generated_Source\PSoC4/CyLFClk.c ****         }
2781:Generated_Source\PSoC4/CyLFClk.c **** 
2782:Generated_Source\PSoC4/CyLFClk.c ****         return((cyTimerCallback)prevCallback);
2783:Generated_Source\PSoC4/CyLFClk.c ****     }
2784:Generated_Source\PSoC4/CyLFClk.c **** 
2785:Generated_Source\PSoC4/CyLFClk.c **** 
2786:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2787:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerGetInterruptCallback
2788:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2789:Generated_Source\PSoC4/CyLFClk.c ****     *
2790:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Gets the ISR callback function for the particular DeepSleep Timer 
2791:Generated_Source\PSoC4/CyLFClk.c ****     * counter.
2792:Generated_Source\PSoC4/CyLFClk.c ****     *
2793:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the Timer counter.
2794:Generated_Source\PSoC4/CyLFClk.c ****     *
2795:Generated_Source\PSoC4/CyLFClk.c ****     * \return
2796:Generated_Source\PSoC4/CyLFClk.c ****     * The pointer to the callback function registered for a particular Timer by
2797:Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
2798:Generated_Source\PSoC4/CyLFClk.c ****     *
2799:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 94


2800:Generated_Source\PSoC4/CyLFClk.c ****     cyTimerCallback CySysTimerGetInterruptCallback(uint32 counterNum)
2801:Generated_Source\PSoC4/CyLFClk.c ****     {
2802:Generated_Source\PSoC4/CyLFClk.c ****         cyTimerCallback retCallback = (void *)0;
2803:Generated_Source\PSoC4/CyLFClk.c **** 
2804:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_SYS_NUM_OF_TIMERS)
2805:Generated_Source\PSoC4/CyLFClk.c ****         {
2806:Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyTimerCallback)cySysTimerCallback[counterNum];
2807:Generated_Source\PSoC4/CyLFClk.c ****         }
2808:Generated_Source\PSoC4/CyLFClk.c ****         else
2809:Generated_Source\PSoC4/CyLFClk.c ****         {
2810:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
2811:Generated_Source\PSoC4/CyLFClk.c ****         }
2812:Generated_Source\PSoC4/CyLFClk.c **** 
2813:Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
2814:Generated_Source\PSoC4/CyLFClk.c ****     }
2815:Generated_Source\PSoC4/CyLFClk.c **** 
2816:Generated_Source\PSoC4/CyLFClk.c **** 
2817:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2818:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerEnableIsr
2819:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2820:Generated_Source\PSoC4/CyLFClk.c ****     *
2821:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the ISR callback servicing for the particular Timer counter
2822:Generated_Source\PSoC4/CyLFClk.c ****     *
2823:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the Timer counter.
2824:Generated_Source\PSoC4/CyLFClk.c ****     *
2825:Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate Timer counter. For example value 1 
2826:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second Timer counter.
2827:Generated_Source\PSoC4/CyLFClk.c ****     *
2828:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2829:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerEnableIsr(uint32 counterNum)
2830:Generated_Source\PSoC4/CyLFClk.c ****     {
2831:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_TIMER2)
2832:Generated_Source\PSoC4/CyLFClk.c ****         {
2833:Generated_Source\PSoC4/CyLFClk.c ****             disableTimerServicedIsr &= ~counterTimerIntMaskTbl[counterNum];
2834:Generated_Source\PSoC4/CyLFClk.c ****             timerIsrMask |= counterTimerIntMaskTbl[counterNum];
2835:Generated_Source\PSoC4/CyLFClk.c ****         }
2836:Generated_Source\PSoC4/CyLFClk.c ****         else
2837:Generated_Source\PSoC4/CyLFClk.c ****         {
2838:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
2839:Generated_Source\PSoC4/CyLFClk.c ****         }
2840:Generated_Source\PSoC4/CyLFClk.c ****     }
2841:Generated_Source\PSoC4/CyLFClk.c **** 
2842:Generated_Source\PSoC4/CyLFClk.c **** 
2843:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2844:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerDisableIsr
2845:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2846:Generated_Source\PSoC4/CyLFClk.c ****     *
2847:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the ISR callback servicing for the particular Timer counter
2848:Generated_Source\PSoC4/CyLFClk.c ****     *
2849:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the Timer counter.
2850:Generated_Source\PSoC4/CyLFClk.c ****     *
2851:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2852:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerDisableIsr(uint32 counterNum)
2853:Generated_Source\PSoC4/CyLFClk.c ****     {
2854:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_TIMER2)
2855:Generated_Source\PSoC4/CyLFClk.c ****         {
2856:Generated_Source\PSoC4/CyLFClk.c ****             timerIsrMask &= ~counterTimerIntMaskTbl[counterNum];
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 95


2857:Generated_Source\PSoC4/CyLFClk.c ****         }
2858:Generated_Source\PSoC4/CyLFClk.c ****         else
2859:Generated_Source\PSoC4/CyLFClk.c ****         {
2860:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
2861:Generated_Source\PSoC4/CyLFClk.c ****         }
2862:Generated_Source\PSoC4/CyLFClk.c ****     }
2863:Generated_Source\PSoC4/CyLFClk.c **** 
2864:Generated_Source\PSoC4/CyLFClk.c **** 
2865:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2866:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerIsr
2867:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2868:Generated_Source\PSoC4/CyLFClk.c ****     *
2869:Generated_Source\PSoC4/CyLFClk.c ****     * \brief This is the handler of the DeepSleep Timer interrupt in CPU NVIC.
2870:Generated_Source\PSoC4/CyLFClk.c ****     *
2871:Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which Timer triggered in the interrupt and calls the 
2872:Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
2873:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerSetIsrCallback() API.
2874:Generated_Source\PSoC4/CyLFClk.c ****     *
2875:Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
2876:Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
2877:Generated_Source\PSoC4/CyLFClk.c ****     *
2878:Generated_Source\PSoC4/CyLFClk.c ****     * \details This function clears the DeepSleep Timer interrupt every time when 
2879:Generated_Source\PSoC4/CyLFClk.c ****     * it is called.
2880:Generated_Source\PSoC4/CyLFClk.c ****     *
2881:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2882:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerIsr(void)
2883:Generated_Source\PSoC4/CyLFClk.c ****     {
2884:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_TIMER0_INT & CY_SYS_WCO_WDT_CONTROL_REG))
2885:Generated_Source\PSoC4/CyLFClk.c ****         {
2886:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_TIMER0_INT & timerIsrMask))
2887:Generated_Source\PSoC4/CyLFClk.c ****             {
2888:Generated_Source\PSoC4/CyLFClk.c ****                 timerIsrMask &= ~(disableTimerServicedIsr & CY_SYS_TIMER0_INT);
2889:Generated_Source\PSoC4/CyLFClk.c ****                 disableTimerServicedIsr  &= ~CY_SYS_TIMER0_INT;
2890:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysTimerCallback[CY_SYS_TIMER0] != (void *) 0)
2891:Generated_Source\PSoC4/CyLFClk.c ****                 {
2892:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysTimerCallback[CY_SYS_TIMER0])();
2893:Generated_Source\PSoC4/CyLFClk.c ****                 }
2894:Generated_Source\PSoC4/CyLFClk.c ****             }
2895:Generated_Source\PSoC4/CyLFClk.c ****             CySysTimerClearInterrupt(CY_SYS_TIMER0_INT);
2896:Generated_Source\PSoC4/CyLFClk.c ****         }
2897:Generated_Source\PSoC4/CyLFClk.c **** 
2898:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_TIMER1_INT & CY_SYS_WCO_WDT_CONTROL_REG))
2899:Generated_Source\PSoC4/CyLFClk.c ****         {
2900:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_TIMER1_INT & timerIsrMask))
2901:Generated_Source\PSoC4/CyLFClk.c ****             {
2902:Generated_Source\PSoC4/CyLFClk.c ****                 timerIsrMask &= ~(disableTimerServicedIsr & CY_SYS_TIMER1_INT);
2903:Generated_Source\PSoC4/CyLFClk.c ****                 disableTimerServicedIsr  &= ~CY_SYS_TIMER1_INT;
2904:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysTimerCallback[CY_SYS_TIMER1] != (void *) 0)
2905:Generated_Source\PSoC4/CyLFClk.c ****                 {
2906:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysTimerCallback[CY_SYS_TIMER1])();
2907:Generated_Source\PSoC4/CyLFClk.c ****                 }
2908:Generated_Source\PSoC4/CyLFClk.c ****             }
2909:Generated_Source\PSoC4/CyLFClk.c ****             CySysTimerClearInterrupt(CY_SYS_TIMER1_INT);
2910:Generated_Source\PSoC4/CyLFClk.c ****         }
2911:Generated_Source\PSoC4/CyLFClk.c **** 
2912:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_TIMER2_INT & CY_SYS_WCO_WDT_CONTROL_REG))
2913:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 96


2914:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_TIMER2_INT & timerIsrMask))
2915:Generated_Source\PSoC4/CyLFClk.c ****             {
2916:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysTimerCallback[CY_SYS_TIMER2] != (void *) 0)
2917:Generated_Source\PSoC4/CyLFClk.c ****                 {
2918:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysTimerCallback[CY_SYS_TIMER2])();
2919:Generated_Source\PSoC4/CyLFClk.c ****                 }
2920:Generated_Source\PSoC4/CyLFClk.c ****             }
2921:Generated_Source\PSoC4/CyLFClk.c ****             CySysTimerClearInterrupt(CY_SYS_TIMER2_INT);
2922:Generated_Source\PSoC4/CyLFClk.c ****         }
2923:Generated_Source\PSoC4/CyLFClk.c ****     }
2924:Generated_Source\PSoC4/CyLFClk.c **** 
2925:Generated_Source\PSoC4/CyLFClk.c **** 
2926:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2927:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerResetCounters
2928:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2929:Generated_Source\PSoC4/CyLFClk.c ****     *
2930:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Resets all the Timer counters set in the mask.
2931:Generated_Source\PSoC4/CyLFClk.c ****     *
2932:Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
2933:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER0_RESET - Reset the Counter 0<br>
2934:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER1_RESET - Reset the Counter 1<br>
2935:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER2_RESET - Reset the Counter 2
2936:Generated_Source\PSoC4/CyLFClk.c ****     *
2937:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2938:Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
2939:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 DeepSleep Timer source-cycles. DeepSleep Timer source must be 
2940:Generated_Source\PSoC4/CyLFClk.c ****     * enabled. Otherwise, the function will never exit.
2941:Generated_Source\PSoC4/CyLFClk.c ****     *
2942:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2943:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerResetCounters(uint32 countersMask)
2944:Generated_Source\PSoC4/CyLFClk.c ****     {
2945:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new Timer reset value */
2946:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WCO_WDT_CONTROL_REG |= (countersMask & CY_SYS_TIMER_RESET);
2947:Generated_Source\PSoC4/CyLFClk.c **** 
2948:Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WCO_WDT_CONTROL_REG & CY_SYS_TIMER_RESET))
2949:Generated_Source\PSoC4/CyLFClk.c ****         {
2950:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
2951:Generated_Source\PSoC4/CyLFClk.c ****         }
2952:Generated_Source\PSoC4/CyLFClk.c ****     }
2953:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN) */
2954:Generated_Source\PSoC4/CyLFClk.c **** 
2955:Generated_Source\PSoC4/CyLFClk.c **** 
2956:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 || (CY_IP_WCO_WDT_EN && CY_IP_SRSSLT))
2957:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2958:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerDelay
2959:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2960:Generated_Source\PSoC4/CyLFClk.c ****     *
2961:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2962:Generated_Source\PSoC4/CyLFClk.c ****     * The function implements the delay specified in the LFCLK clock ticks.
2963:Generated_Source\PSoC4/CyLFClk.c ****     *
2964:Generated_Source\PSoC4/CyLFClk.c ****     * This API is applicable for PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / 
2965:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4200 BLE / PRoC BLE / PSoC 4200L / PSoC 4100M / PSoC 4200M devices to 
2966:Generated_Source\PSoC4/CyLFClk.c ****     * use WDT. Also this API is available to use for PSoC4100S and / PSoC Analog 
2967:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices to use DeepSleep Timers.
2968:Generated_Source\PSoC4/CyLFClk.c ****     *
2969:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 
2970:Generated_Source\PSoC4/CyLFClk.c ****     * 4200L / PSoC 4100M / PSoC 4200M devices:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 97


2971:Generated_Source\PSoC4/CyLFClk.c ****     * The specified WDT counter should be configured as described below and started.
2972:Generated_Source\PSoC4/CyLFClk.c ****     *
2973:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100S / PSoC Analog Coprocessor devices:
2974:Generated_Source\PSoC4/CyLFClk.c ****     * The specified DeepSleep Timer counter should be configured as described below
2975:Generated_Source\PSoC4/CyLFClk.c ****     * and started.
2976:Generated_Source\PSoC4/CyLFClk.c ****     *
2977:Generated_Source\PSoC4/CyLFClk.c ****     * This function can operate in two modes: the "WAIT" and "INTERRUPT" modes. In
2978:Generated_Source\PSoC4/CyLFClk.c ****     * the "WAIT" mode, the function waits for the specified number of ticks. In the
2979:Generated_Source\PSoC4/CyLFClk.c ****     * "INTERRUPT" mode, the interrupt is generated after the specified number of
2980:Generated_Source\PSoC4/CyLFClk.c ****     * ticks.
2981:Generated_Source\PSoC4/CyLFClk.c ****     *
2982:Generated_Source\PSoC4/CyLFClk.c ****     * For the correct function operation, the "Clear On Match" option should be
2983:Generated_Source\PSoC4/CyLFClk.c ****     * disabled for the specified WDT or DeepSleep Timer counter. Use 
2984:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetClearOnMatch() for WDT or CySysTimerSetClearOnMatch() for DeepSleep
2985:Generated_Source\PSoC4/CyLFClk.c ****     * Timer function with the "enable" parameter equal to zero for the used WDT 
2986:Generated_Source\PSoC4/CyLFClk.c ****     * counter or DeepSleep Timer counter.
2987:Generated_Source\PSoC4/CyLFClk.c ****     *
2988:Generated_Source\PSoC4/CyLFClk.c ****     * The corresponding WDT counter should be configured to match the selected
2989:Generated_Source\PSoC4/CyLFClk.c ****     * mode: "Free running Timer" for the "WAIT" mode, and
2990:Generated_Source\PSoC4/CyLFClk.c ****     * "Periodic Timer" / "Watchdog (w/Interrupt)" for the "INTERRUPT" mode.
2991:Generated_Source\PSoC4/CyLFClk.c ****     *
2992:Generated_Source\PSoC4/CyLFClk.c ****     * Or the corresponding DeepSleep Timer counter should be configured to match the
2993:Generated_Source\PSoC4/CyLFClk.c ****     * selected mode: "Free running Timer" for the "WAIT" mode, and
2994:Generated_Source\PSoC4/CyLFClk.c ****     * "Periodic Timer" for the "INTERRUPT" mode.
2995:Generated_Source\PSoC4/CyLFClk.c ****     *
2996:Generated_Source\PSoC4/CyLFClk.c ****     * This can be configured in two ways:
2997:Generated_Source\PSoC4/CyLFClk.c ****     * - Through the DWR page. Open the "Clocks" tab, click the "Edit Clocks..."
2998:Generated_Source\PSoC4/CyLFClk.c ****     * button, in the "Configure System Clocks" window click on the
2999:Generated_Source\PSoC4/CyLFClk.c ****     * "Low Frequency Clocks" tab and choose the appropriate option for the used
3000:Generated_Source\PSoC4/CyLFClk.c ****     * WDT or DeepSleep Timer counter.
3001:Generated_Source\PSoC4/CyLFClk.c ****     *
3002:Generated_Source\PSoC4/CyLFClk.c ****     * - Through the CySysWdtSetMode() for WDT or CySysTimerSetMode() for DeepSleep
3003:Generated_Source\PSoC4/CyLFClk.c ****     * Timer function. Call it with the appropriate "mode" parameter for the 
3004:Generated_Source\PSoC4/CyLFClk.c ****     * used WDT or DeepSleep Timer counter.
3005:Generated_Source\PSoC4/CyLFClk.c ****     *
3006:Generated_Source\PSoC4/CyLFClk.c ****     * For the "INTERRUPT" mode, the recommended sequence is the following:
3007:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysWdtDisableCounterIsr() for WDT or 
3008:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerDisableIsr() for DeepSleep Timer function to disable servicing
3009:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts of the specified WDT or DeepSleep Timer counter.
3010:Generated_Source\PSoC4/CyLFClk.c ****     *
3011:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysWdtSetInterruptCallback() for WDT or 
3012:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerSetIsrCallback() for DeepSleep Timer function to register 
3013:Generated_Source\PSoC4/CyLFClk.c ****     * the callback function for the corresponding WDT or DeepSleep Timer counter.
3014:Generated_Source\PSoC4/CyLFClk.c ****     *
3015:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysTimerDelay() function.
3016:Generated_Source\PSoC4/CyLFClk.c ****     *
3017:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1]. The number of the counter 
3018:Generated_Source\PSoC4/CyLFClk.c ****     * (Timer0 or Timer1).
3019:Generated_Source\PSoC4/CyLFClk.c ****     * \param delayType
3020:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_WAIT - "WAIT" mode. <br>
3021:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_INTERRUPT - "INTERRUPT" mode.
3022:Generated_Source\PSoC4/CyLFClk.c ****     * \param delay The delay value in the LFCLK ticks 
3023:Generated_Source\PSoC4/CyLFClk.c ****     * (allowable range - 16-bit value).
3024:Generated_Source\PSoC4/CyLFClk.c ****     *
3025:Generated_Source\PSoC4/CyLFClk.c ****     * \details
3026:Generated_Source\PSoC4/CyLFClk.c ****     * In the "INTERRUPT" mode, this function enables ISR callback servicing
3027:Generated_Source\PSoC4/CyLFClk.c ****     * from the corresponding WDT or DeepSleep Timer counter. Servicing of this ISR 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 98


3028:Generated_Source\PSoC4/CyLFClk.c ****     * callback will be disabled after the expiration of the delay time.
3029:Generated_Source\PSoC4/CyLFClk.c ****     *
3030:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
3031:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerDelay(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32 delay)
3032:Generated_Source\PSoC4/CyLFClk.c ****     {
 2475              		.loc 1 3032 0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 24
 2478              		@ frame_needed = 1, uses_anonymous_args = 0
 2479 0000 80B5     		push	{r7, lr}
 2480              		.cfi_def_cfa_offset 8
 2481              		.cfi_offset 7, -8
 2482              		.cfi_offset 14, -4
 2483 0002 86B0     		sub	sp, sp, #24
 2484              		.cfi_def_cfa_offset 32
 2485 0004 00AF     		add	r7, sp, #0
 2486              		.cfi_def_cfa_register 7
 2487 0006 F860     		str	r0, [r7, #12]
 2488 0008 7A60     		str	r2, [r7, #4]
 2489 000a 0B23     		movs	r3, #11
 2490 000c FB18     		adds	r3, r7, r3
 2491 000e 0A1C     		adds	r2, r1, #0
 2492 0010 1A70     		strb	r2, [r3]
3033:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
3034:Generated_Source\PSoC4/CyLFClk.c ****         uint32 matchValue;
3035:Generated_Source\PSoC4/CyLFClk.c **** 
3036:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_SRSSV2)
3037:Generated_Source\PSoC4/CyLFClk.c ****             if((counterNum < CY_SYS_WDT_COUNTER2) && (0uL == CySysWdtGetClearOnMatch(counterNum)) &
 2493              		.loc 1 3037 0
 2494 0012 FB68     		ldr	r3, [r7, #12]
 2495 0014 012B     		cmp	r3, #1
 2496 0016 1ED8     		bhi	.L210
 2497              		.loc 1 3037 0 is_stmt 0 discriminator 1
 2498 0018 FB68     		ldr	r3, [r7, #12]
 2499 001a 1800     		movs	r0, r3
 2500 001c FFF7FEFF 		bl	CySysWdtGetClearOnMatch
 2501 0020 031E     		subs	r3, r0, #0
 2502 0022 18D1     		bne	.L210
 2503              		.loc 1 3037 0 discriminator 2
 2504 0024 7B68     		ldr	r3, [r7, #4]
 2505 0026 0F4A     		ldr	r2, .L212
 2506 0028 9342     		cmp	r3, r2
 2507 002a 14D8     		bhi	.L210
3038:Generated_Source\PSoC4/CyLFClk.c ****                                                                 (delay <= CY_SYS_UINT16_MAX_VAL))
3039:Generated_Source\PSoC4/CyLFClk.c ****             {
3040:Generated_Source\PSoC4/CyLFClk.c ****                 regValue   = CySysWdtGetCount(counterNum);
 2508              		.loc 1 3040 0 is_stmt 1
 2509 002c FB68     		ldr	r3, [r7, #12]
 2510 002e 1800     		movs	r0, r3
 2511 0030 FFF7FEFF 		bl	CySysWdtGetCount
 2512 0034 0300     		movs	r3, r0
 2513 0036 7B61     		str	r3, [r7, #20]
3041:Generated_Source\PSoC4/CyLFClk.c ****                 matchValue = (regValue + delay) & (uint32)CY_SYS_UINT16_MAX_VAL;
 2514              		.loc 1 3041 0
 2515 0038 7A69     		ldr	r2, [r7, #20]
 2516 003a 7B68     		ldr	r3, [r7, #4]
 2517 003c D318     		adds	r3, r2, r3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 99


 2518 003e 1B04     		lsls	r3, r3, #16
 2519 0040 1B0C     		lsrs	r3, r3, #16
 2520 0042 3B61     		str	r3, [r7, #16]
3042:Generated_Source\PSoC4/CyLFClk.c **** 
3043:Generated_Source\PSoC4/CyLFClk.c ****                 CySysTimerDelayUntilMatch(counterNum, delayType, matchValue);
 2521              		.loc 1 3043 0
 2522 0044 3A69     		ldr	r2, [r7, #16]
 2523 0046 0B23     		movs	r3, #11
 2524 0048 FB18     		adds	r3, r7, r3
 2525 004a 1978     		ldrb	r1, [r3]
 2526 004c FB68     		ldr	r3, [r7, #12]
 2527 004e 1800     		movs	r0, r3
 2528 0050 FFF7FEFF 		bl	CySysTimerDelayUntilMatch
 2529 0054 02E0     		b	.L211
 2530              	.L210:
3044:Generated_Source\PSoC4/CyLFClk.c ****             }
3045:Generated_Source\PSoC4/CyLFClk.c ****             else
3046:Generated_Source\PSoC4/CyLFClk.c ****             {
3047:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 2531              		.loc 1 3047 0 discriminator 1
 2532 0056 0020     		movs	r0, #0
 2533 0058 FFF7FEFF 		bl	CyHalt
 2534              	.L211:
3048:Generated_Source\PSoC4/CyLFClk.c ****             }
3049:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
3050:Generated_Source\PSoC4/CyLFClk.c **** 
3051:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_WCO_WDT_EN && CY_IP_SRSSLT)
3052:Generated_Source\PSoC4/CyLFClk.c ****             if((counterNum < CY_SYS_TIMER2) && (0uL == CySysTimerGetClearOnMatch(counterNum)) && 
3053:Generated_Source\PSoC4/CyLFClk.c ****                                                             (delay <= CY_SYS_UINT16_MAX_VAL))
3054:Generated_Source\PSoC4/CyLFClk.c ****             {
3055:Generated_Source\PSoC4/CyLFClk.c ****                 regValue   = CySysTimerGetCount(counterNum);
3056:Generated_Source\PSoC4/CyLFClk.c ****                 matchValue = (regValue + delay) & (uint32)CY_SYS_UINT16_MAX_VAL;
3057:Generated_Source\PSoC4/CyLFClk.c **** 
3058:Generated_Source\PSoC4/CyLFClk.c ****                 CySysTimerDelayUntilMatch(counterNum, delayType, matchValue);
3059:Generated_Source\PSoC4/CyLFClk.c ****             }
3060:Generated_Source\PSoC4/CyLFClk.c ****             else
3061:Generated_Source\PSoC4/CyLFClk.c ****             {
3062:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
3063:Generated_Source\PSoC4/CyLFClk.c ****             }
3064:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_WCO_WDT_EN) */
3065:Generated_Source\PSoC4/CyLFClk.c ****     }
 2535              		.loc 1 3065 0
 2536 005c C046     		nop
 2537 005e BD46     		mov	sp, r7
 2538 0060 06B0     		add	sp, sp, #24
 2539              		@ sp needed
 2540 0062 80BD     		pop	{r7, pc}
 2541              	.L213:
 2542              		.align	2
 2543              	.L212:
 2544 0064 FFFF0000 		.word	65535
 2545              		.cfi_endproc
 2546              	.LFE34:
 2547              		.size	CySysTimerDelay, .-CySysTimerDelay
 2548              		.section	.text.CySysTimerDelayUntilMatch,"ax",%progbits
 2549              		.align	2
 2550              		.global	CySysTimerDelayUntilMatch
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 100


 2551              		.code	16
 2552              		.thumb_func
 2553              		.type	CySysTimerDelayUntilMatch, %function
 2554              	CySysTimerDelayUntilMatch:
 2555              	.LFB35:
3066:Generated_Source\PSoC4/CyLFClk.c **** 
3067:Generated_Source\PSoC4/CyLFClk.c **** 
3068:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
3069:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysTimerDelayUntilMatch
3070:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
3071:Generated_Source\PSoC4/CyLFClk.c ****     *
3072:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
3073:Generated_Source\PSoC4/CyLFClk.c ****     * The function implements the delay specified as the number of WDT or DeepSleep
3074:Generated_Source\PSoC4/CyLFClk.c ****     * Timer clock source ticks between WDT or DeepSleep Timer current value and 
3075:Generated_Source\PSoC4/CyLFClk.c ****     * match" value.
3076:Generated_Source\PSoC4/CyLFClk.c ****     *
3077:Generated_Source\PSoC4/CyLFClk.c ****     * This API is applicable for PSoC 4100 / PSoC 4200 / PRoC BLE / PSoC 4100 BLE /
3078:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / PSoC 4200M devices to use WDT.
3079:Generated_Source\PSoC4/CyLFClk.c ****     * Also this API is available to use for PSoC4100S / Analog Coprocessor devices
3080:Generated_Source\PSoC4/CyLFClk.c ****     * to use DeepSleep Timers.
3081:Generated_Source\PSoC4/CyLFClk.c ****     * 
3082:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 
3083:Generated_Source\PSoC4/CyLFClk.c ****     * 4200L / PSoC 4100M / PSoC 4200M devices:
3084:Generated_Source\PSoC4/CyLFClk.c ****     * The function implements the delay specified as the number of LFCLK ticks
3085:Generated_Source\PSoC4/CyLFClk.c ****     * between the specified WDT counter's current value and the "match"
3086:Generated_Source\PSoC4/CyLFClk.c ****     * passed as the parameter to this function. The current WDT counter value can 
3087:Generated_Source\PSoC4/CyLFClk.c ****     * be obtained using the CySysWdtGetCount() function.
3088:Generated_Source\PSoC4/CyLFClk.c ****     *
3089:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC4100 S and Analog Coprocessor devices:
3090:Generated_Source\PSoC4/CyLFClk.c ****     * The function implements the delay specified as the number of DeepSleep Timer 
3091:Generated_Source\PSoC4/CyLFClk.c ****     * input clock ticks for Timer0/Timer1 counter's current value and the "match" 
3092:Generated_Source\PSoC4/CyLFClk.c ****     * passed as the parameter to this function. The current DeepSleep Timer counter
3093:Generated_Source\PSoC4/CyLFClk.c ****     * value can be obtained using the CySysWdtGetCount() function.
3094:Generated_Source\PSoC4/CyLFClk.c ****     *
3095:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 
3096:Generated_Source\PSoC4/CyLFClk.c ****     * 4200L / PSoC 4100M / PSoC 4200M devices:
3097:Generated_Source\PSoC4/CyLFClk.c ****     * The specified WDT counter should be configured as described below and started.
3098:Generated_Source\PSoC4/CyLFClk.c ****     *
3099:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC PSoC 4100S / PSoC Analog Coprocessor devices:
3100:Generated_Source\PSoC4/CyLFClk.c ****     * The specified DeepSleep Timer counter should be configured as described below
3101:Generated_Source\PSoC4/CyLFClk.c ****     * and started.
3102:Generated_Source\PSoC4/CyLFClk.c ****     *
3103:Generated_Source\PSoC4/CyLFClk.c ****     * This function can operate in two modes: the "WAIT" and "INTERRUPT" modes. In
3104:Generated_Source\PSoC4/CyLFClk.c ****     * the "WAIT" mode, the function waits for the specified number of ticks. In the
3105:Generated_Source\PSoC4/CyLFClk.c ****     * "INTERRUPT" mode, the interrupt is generated after the specified number of
3106:Generated_Source\PSoC4/CyLFClk.c ****     * ticks.
3107:Generated_Source\PSoC4/CyLFClk.c ****     *
3108:Generated_Source\PSoC4/CyLFClk.c ****     * For the correct function operation, the "Clear On Match" option should be
3109:Generated_Source\PSoC4/CyLFClk.c ****     * disabled for the specified WDT or DeepSleep Timer counter. Use 
3110:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetClearOnMatch() for WDT or CySysTimerSetClearOnMatch() for DeepSleep
3111:Generated_Source\PSoC4/CyLFClk.c ****     * Timer function with the "enable" parameter equal to zero for the used WDT 
3112:Generated_Source\PSoC4/CyLFClk.c ****     * or DeepSleep Timer counter.
3113:Generated_Source\PSoC4/CyLFClk.c ****     *
3114:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 
3115:Generated_Source\PSoC4/CyLFClk.c ****     * 4200L / PSoC 4100M/PSoC 4200M devices:
3116:Generated_Source\PSoC4/CyLFClk.c ****     * The corresponding WDT counter should be configured to match the selected
3117:Generated_Source\PSoC4/CyLFClk.c ****     * mode: "Free running Timer" for the "WAIT" mode, and
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 101


3118:Generated_Source\PSoC4/CyLFClk.c ****     * "Periodic Timer" / "Watchdog (w/Interrupt)" for the "INTERRUPT" mode.
3119:Generated_Source\PSoC4/CyLFClk.c ****     *
3120:Generated_Source\PSoC4/CyLFClk.c ****     * For PSoC 4100S / PSoC Analog Coprocessor devices:
3121:Generated_Source\PSoC4/CyLFClk.c ****     * Corresponding DeepSleep Timer counter should be configured to match the 
3122:Generated_Source\PSoC4/CyLFClk.c ****     * selected mode: "Free running Timer" for the "WAIT" mode, and
3123:Generated_Source\PSoC4/CyLFClk.c ****     * "Periodic Timer" for the "INTERRUPT" mode.
3124:Generated_Source\PSoC4/CyLFClk.c ****     *
3125:Generated_Source\PSoC4/CyLFClk.c ****     * This can be configured in two ways:
3126:Generated_Source\PSoC4/CyLFClk.c ****     * - Through the DWR page. Open the "Clocks" tab, click the "Edit Clocks..."
3127:Generated_Source\PSoC4/CyLFClk.c ****     * button, in the "Configure System Clocks" window click on the
3128:Generated_Source\PSoC4/CyLFClk.c ****     * "Low Frequency Clocks" tab and choose the appropriate option for the used
3129:Generated_Source\PSoC4/CyLFClk.c ****     * WDT or DeepSleep Timer counter.
3130:Generated_Source\PSoC4/CyLFClk.c ****     *
3131:Generated_Source\PSoC4/CyLFClk.c ****     * - Through the CySysWdtSetMode() for WDT or CySysTimerSetMode() for DeepSleep
3132:Generated_Source\PSoC4/CyLFClk.c ****     * Timer function. Call it with the appropriate "mode" parameter for the 
3133:Generated_Source\PSoC4/CyLFClk.c ****     * used WDT or DeepSleep Timer counter.
3134:Generated_Source\PSoC4/CyLFClk.c ****     *
3135:Generated_Source\PSoC4/CyLFClk.c ****     * For the "INTERRUPT" mode, the recommended sequence is the following:
3136:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysWdtDisableCounterIsr() for WDT or 
3137:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerDisableIsr() for DeepSleep Timer function to disable servicing
3138:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts of the specified WDT or DeepSleep Timer counter.
3139:Generated_Source\PSoC4/CyLFClk.c ****     *
3140:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysWdtSetInterruptCallback() for WDT or 
3141:Generated_Source\PSoC4/CyLFClk.c ****     * CySysTimerSetInterruptCallback() for DeepSleep Timer function to register 
3142:Generated_Source\PSoC4/CyLFClk.c ****     * the callback function for the corresponding WDT or DeepSleep Timer counter.
3143:Generated_Source\PSoC4/CyLFClk.c ****     *
3144:Generated_Source\PSoC4/CyLFClk.c ****     * - Call the CySysTimerDelay() function.
3145:Generated_Source\PSoC4/CyLFClk.c ****     *
3146:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1]. The number of the WDT or DeepSleep 
3147:Generated_Source\PSoC4/CyLFClk.c ****     * Timer.
3148:Generated_Source\PSoC4/CyLFClk.c ****     * counter (Timer0 or Timer1).
3149:Generated_Source\PSoC4/CyLFClk.c ****     * \param delayType  CY_SYS_TIMER_WAIT - "WAIT" mode.<br>
3150:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_TIMER_INTERRUPT - "INTERRUPT" mode.
3151:Generated_Source\PSoC4/CyLFClk.c ****     * \param delay The delay value in the LFCLK ticks
3152:Generated_Source\PSoC4/CyLFClk.c ****     * (allowable range - 16-bit value).
3153:Generated_Source\PSoC4/CyLFClk.c ****     *
3154:Generated_Source\PSoC4/CyLFClk.c ****     * \details
3155:Generated_Source\PSoC4/CyLFClk.c ****     * In the "INTERRUPT" mode, this function enables ISR callback servicing
3156:Generated_Source\PSoC4/CyLFClk.c ****     * from the corresponding WDT counter. Servicing of this ISR callback will be
3157:Generated_Source\PSoC4/CyLFClk.c ****     * disabled after the expiration of the delay time.
3158:Generated_Source\PSoC4/CyLFClk.c ****     *
3159:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
3160:Generated_Source\PSoC4/CyLFClk.c ****     void CySysTimerDelayUntilMatch(uint32 counterNum, cy_sys_timer_delaytype_enum delayType, uint32
3161:Generated_Source\PSoC4/CyLFClk.c ****     {
 2556              		.loc 1 3161 0
 2557              		.cfi_startproc
 2558              		@ args = 0, pretend = 0, frame = 24
 2559              		@ frame_needed = 1, uses_anonymous_args = 0
 2560 0000 80B5     		push	{r7, lr}
 2561              		.cfi_def_cfa_offset 8
 2562              		.cfi_offset 7, -8
 2563              		.cfi_offset 14, -4
 2564 0002 86B0     		sub	sp, sp, #24
 2565              		.cfi_def_cfa_offset 32
 2566 0004 00AF     		add	r7, sp, #0
 2567              		.cfi_def_cfa_register 7
 2568 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 102


 2569 0008 7A60     		str	r2, [r7, #4]
 2570 000a 0B23     		movs	r3, #11
 2571 000c FB18     		adds	r3, r7, r3
 2572 000e 0A1C     		adds	r2, r1, #0
 2573 0010 1A70     		strb	r2, [r3]
3162:Generated_Source\PSoC4/CyLFClk.c ****         uint32 tmpValue;
3163:Generated_Source\PSoC4/CyLFClk.c **** 
3164:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_SRSSV2)
3165:Generated_Source\PSoC4/CyLFClk.c ****             if((counterNum < CY_SYS_WDT_COUNTER2) && (0uL == CySysWdtGetClearOnMatch(counterNum)) &
 2574              		.loc 1 3165 0
 2575 0012 FB68     		ldr	r3, [r7, #12]
 2576 0014 012B     		cmp	r3, #1
 2577 0016 3BD8     		bhi	.L215
 2578              		.loc 1 3165 0 is_stmt 0 discriminator 1
 2579 0018 FB68     		ldr	r3, [r7, #12]
 2580 001a 1800     		movs	r0, r3
 2581 001c FFF7FEFF 		bl	CySysWdtGetClearOnMatch
 2582 0020 031E     		subs	r3, r0, #0
 2583 0022 35D1     		bne	.L215
 2584              		.loc 1 3165 0 discriminator 2
 2585 0024 7B68     		ldr	r3, [r7, #4]
 2586 0026 1E4A     		ldr	r2, .L221
 2587 0028 9342     		cmp	r3, r2
 2588 002a 31D8     		bhi	.L215
3166:Generated_Source\PSoC4/CyLFClk.c ****                                                                 (match <= CY_SYS_UINT16_MAX_VAL))
3167:Generated_Source\PSoC4/CyLFClk.c ****             {
3168:Generated_Source\PSoC4/CyLFClk.c ****                 if(delayType == CY_SYS_TIMER_WAIT)
 2589              		.loc 1 3168 0 is_stmt 1
 2590 002c 0B23     		movs	r3, #11
 2591 002e FB18     		adds	r3, r7, r3
 2592 0030 1B78     		ldrb	r3, [r3]
 2593 0032 002B     		cmp	r3, #0
 2594 0034 14D1     		bne	.L216
 2595              	.L217:
3169:Generated_Source\PSoC4/CyLFClk.c ****                 {
3170:Generated_Source\PSoC4/CyLFClk.c ****                     do
3171:Generated_Source\PSoC4/CyLFClk.c ****                     {
3172:Generated_Source\PSoC4/CyLFClk.c ****                         tmpValue = CySysWdtGetCount(counterNum);
 2596              		.loc 1 3172 0 discriminator 1
 2597 0036 FB68     		ldr	r3, [r7, #12]
 2598 0038 1800     		movs	r0, r3
 2599 003a FFF7FEFF 		bl	CySysWdtGetCount
 2600 003e 0300     		movs	r3, r0
 2601 0040 7B61     		str	r3, [r7, #20]
3173:Generated_Source\PSoC4/CyLFClk.c ****                     }while(tmpValue > match);
 2602              		.loc 1 3173 0 discriminator 1
 2603 0042 7A69     		ldr	r2, [r7, #20]
 2604 0044 7B68     		ldr	r3, [r7, #4]
 2605 0046 9A42     		cmp	r2, r3
 2606 0048 F5D8     		bhi	.L217
 2607              	.L218:
3174:Generated_Source\PSoC4/CyLFClk.c **** 
3175:Generated_Source\PSoC4/CyLFClk.c ****                     do
3176:Generated_Source\PSoC4/CyLFClk.c ****                     {
3177:Generated_Source\PSoC4/CyLFClk.c ****                         tmpValue = CySysWdtGetCount(counterNum);
 2608              		.loc 1 3177 0 discriminator 1
 2609 004a FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 103


 2610 004c 1800     		movs	r0, r3
 2611 004e FFF7FEFF 		bl	CySysWdtGetCount
 2612 0052 0300     		movs	r3, r0
 2613 0054 7B61     		str	r3, [r7, #20]
3178:Generated_Source\PSoC4/CyLFClk.c ****                     }while(tmpValue < match);
 2614              		.loc 1 3178 0 discriminator 1
 2615 0056 7A69     		ldr	r2, [r7, #20]
 2616 0058 7B68     		ldr	r3, [r7, #4]
 2617 005a 9A42     		cmp	r2, r3
 2618 005c F5D3     		bcc	.L218
3168:Generated_Source\PSoC4/CyLFClk.c ****                 {
 2619              		.loc 1 3168 0
 2620 005e 1AE0     		b	.L220
 2621              	.L216:
3179:Generated_Source\PSoC4/CyLFClk.c ****                 }
3180:Generated_Source\PSoC4/CyLFClk.c ****                 else
3181:Generated_Source\PSoC4/CyLFClk.c ****                 {
3182:Generated_Source\PSoC4/CyLFClk.c ****                     tmpValue = counterIntMaskTbl[counterNum];
 2622              		.loc 1 3182 0
 2623 0060 104B     		ldr	r3, .L221+4
 2624 0062 FA68     		ldr	r2, [r7, #12]
 2625 0064 9200     		lsls	r2, r2, #2
 2626 0066 D358     		ldr	r3, [r2, r3]
 2627 0068 7B61     		str	r3, [r7, #20]
3183:Generated_Source\PSoC4/CyLFClk.c ****                     CySysWdtSetMatch(counterNum, match);
 2628              		.loc 1 3183 0
 2629 006a 7A68     		ldr	r2, [r7, #4]
 2630 006c FB68     		ldr	r3, [r7, #12]
 2631 006e 1100     		movs	r1, r2
 2632 0070 1800     		movs	r0, r3
 2633 0072 FFF7FEFF 		bl	CySysWdtSetMatch
3184:Generated_Source\PSoC4/CyLFClk.c **** 
3185:Generated_Source\PSoC4/CyLFClk.c ****                     disableServicedIsr  |= tmpValue;
 2634              		.loc 1 3185 0
 2635 0076 0C4B     		ldr	r3, .L221+8
 2636 0078 1A68     		ldr	r2, [r3]
 2637 007a 7B69     		ldr	r3, [r7, #20]
 2638 007c 1A43     		orrs	r2, r3
 2639 007e 0A4B     		ldr	r3, .L221+8
 2640 0080 1A60     		str	r2, [r3]
3186:Generated_Source\PSoC4/CyLFClk.c ****                     wdtIsrMask |= tmpValue;
 2641              		.loc 1 3186 0
 2642 0082 0A4B     		ldr	r3, .L221+12
 2643 0084 1A68     		ldr	r2, [r3]
 2644 0086 7B69     		ldr	r3, [r7, #20]
 2645 0088 1A43     		orrs	r2, r3
 2646 008a 084B     		ldr	r3, .L221+12
 2647 008c 1A60     		str	r2, [r3]
3168:Generated_Source\PSoC4/CyLFClk.c ****                 {
 2648              		.loc 1 3168 0
 2649 008e 02E0     		b	.L220
 2650              	.L215:
3187:Generated_Source\PSoC4/CyLFClk.c ****                 }
3188:Generated_Source\PSoC4/CyLFClk.c ****             }
3189:Generated_Source\PSoC4/CyLFClk.c ****             else
3190:Generated_Source\PSoC4/CyLFClk.c ****             {
3191:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 104


 2651              		.loc 1 3191 0 discriminator 1
 2652 0090 0020     		movs	r0, #0
 2653 0092 FFF7FEFF 		bl	CyHalt
 2654              	.L220:
3192:Generated_Source\PSoC4/CyLFClk.c ****             }
3193:Generated_Source\PSoC4/CyLFClk.c **** 
3194:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */  
3195:Generated_Source\PSoC4/CyLFClk.c **** 
3196:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_WCO_WDT_EN && CY_IP_SRSSLT)
3197:Generated_Source\PSoC4/CyLFClk.c ****         if((counterNum < CY_SYS_TIMER2) && (0uL == CySysTimerGetClearOnMatch(counterNum)) &&
3198:Generated_Source\PSoC4/CyLFClk.c ****                                                         (match <= CY_SYS_UINT16_MAX_VAL))
3199:Generated_Source\PSoC4/CyLFClk.c ****         {
3200:Generated_Source\PSoC4/CyLFClk.c ****             if(delayType == CY_SYS_TIMER_WAIT)
3201:Generated_Source\PSoC4/CyLFClk.c ****             {
3202:Generated_Source\PSoC4/CyLFClk.c ****                 do
3203:Generated_Source\PSoC4/CyLFClk.c ****                 {
3204:Generated_Source\PSoC4/CyLFClk.c ****                     tmpValue = CySysTimerGetCount(counterNum);
3205:Generated_Source\PSoC4/CyLFClk.c ****                 }while(tmpValue > match);
3206:Generated_Source\PSoC4/CyLFClk.c **** 
3207:Generated_Source\PSoC4/CyLFClk.c ****                 do
3208:Generated_Source\PSoC4/CyLFClk.c ****                 {
3209:Generated_Source\PSoC4/CyLFClk.c ****                     tmpValue = CySysTimerGetCount(counterNum);
3210:Generated_Source\PSoC4/CyLFClk.c ****                 }while(tmpValue < match);
3211:Generated_Source\PSoC4/CyLFClk.c ****             }
3212:Generated_Source\PSoC4/CyLFClk.c ****             else
3213:Generated_Source\PSoC4/CyLFClk.c ****             {
3214:Generated_Source\PSoC4/CyLFClk.c ****                 tmpValue = counterTimerIntMaskTbl[counterNum];
3215:Generated_Source\PSoC4/CyLFClk.c ****                 CySysTimerSetMatch(counterNum, match);
3216:Generated_Source\PSoC4/CyLFClk.c **** 
3217:Generated_Source\PSoC4/CyLFClk.c ****                 disableTimerServicedIsr  |= tmpValue;
3218:Generated_Source\PSoC4/CyLFClk.c ****                 timerIsrMask |= tmpValue;
3219:Generated_Source\PSoC4/CyLFClk.c ****             }
3220:Generated_Source\PSoC4/CyLFClk.c ****         }
3221:Generated_Source\PSoC4/CyLFClk.c ****         else
3222:Generated_Source\PSoC4/CyLFClk.c ****         {
3223:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
3224:Generated_Source\PSoC4/CyLFClk.c ****         }
3225:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_WCO_WDT_EN && CY_IP_SRSSLT) */
3226:Generated_Source\PSoC4/CyLFClk.c ****     }
 2655              		.loc 1 3226 0
 2656 0096 C046     		nop
 2657 0098 BD46     		mov	sp, r7
 2658 009a 06B0     		add	sp, sp, #24
 2659              		@ sp needed
 2660 009c 80BD     		pop	{r7, pc}
 2661              	.L222:
 2662 009e C046     		.align	2
 2663              	.L221:
 2664 00a0 FFFF0000 		.word	65535
 2665 00a4 00000000 		.word	counterIntMaskTbl
 2666 00a8 08000000 		.word	disableServicedIsr
 2667 00ac 00000000 		.word	wdtIsrMask
 2668              		.cfi_endproc
 2669              	.LFE35:
 2670              		.size	CySysTimerDelayUntilMatch, .-CySysTimerDelayUntilMatch
 2671              		.bss
 2672              		.align	2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 105


 2673              	compensateRunningStatus.4836:
 2674 0018 00000000 		.space	4
 2675              		.align	2
 2676              	lfclkPosedgeEnabledWdtCounter.4967:
 2677 001c 00000000 		.space	4
 2678              		.text
 2679              	.Letext0:
 2680              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2681              		.file 3 "Generated_Source\\PSoC4\\CyLFClk.h"
 2682              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 2683              		.section	.debug_info,"",%progbits
 2684              	.Ldebug_info0:
 2685 0000 1B080000 		.4byte	0x81b
 2686 0004 0400     		.2byte	0x4
 2687 0006 00000000 		.4byte	.Ldebug_abbrev0
 2688 000a 04       		.byte	0x4
 2689 000b 01       		.uleb128 0x1
 2690 000c 9F030000 		.4byte	.LASF92
 2691 0010 0C       		.byte	0xc
 2692 0011 A9050000 		.4byte	.LASF93
 2693 0015 F6020000 		.4byte	.LASF94
 2694 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2695 001d 00000000 		.4byte	0
 2696 0021 00000000 		.4byte	.Ldebug_line0
 2697 0025 02       		.uleb128 0x2
 2698 0026 01       		.byte	0x1
 2699 0027 06       		.byte	0x6
 2700 0028 F3000000 		.4byte	.LASF0
 2701 002c 02       		.uleb128 0x2
 2702 002d 01       		.byte	0x1
 2703 002e 08       		.byte	0x8
 2704 002f 0D050000 		.4byte	.LASF1
 2705 0033 02       		.uleb128 0x2
 2706 0034 02       		.byte	0x2
 2707 0035 05       		.byte	0x5
 2708 0036 57050000 		.4byte	.LASF2
 2709 003a 02       		.uleb128 0x2
 2710 003b 02       		.byte	0x2
 2711 003c 07       		.byte	0x7
 2712 003d E3020000 		.4byte	.LASF3
 2713 0041 02       		.uleb128 0x2
 2714 0042 04       		.byte	0x4
 2715 0043 05       		.byte	0x5
 2716 0044 46010000 		.4byte	.LASF4
 2717 0048 02       		.uleb128 0x2
 2718 0049 04       		.byte	0x4
 2719 004a 07       		.byte	0x7
 2720 004b 91020000 		.4byte	.LASF5
 2721 004f 02       		.uleb128 0x2
 2722 0050 08       		.byte	0x8
 2723 0051 05       		.byte	0x5
 2724 0052 E5000000 		.4byte	.LASF6
 2725 0056 02       		.uleb128 0x2
 2726 0057 08       		.byte	0x8
 2727 0058 07       		.byte	0x7
 2728 0059 CE000000 		.4byte	.LASF7
 2729 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 106


 2730 005e 04       		.byte	0x4
 2731 005f 05       		.byte	0x5
 2732 0060 696E7400 		.ascii	"int\000"
 2733 0064 02       		.uleb128 0x2
 2734 0065 04       		.byte	0x4
 2735 0066 07       		.byte	0x7
 2736 0067 60020000 		.4byte	.LASF8
 2737 006b 04       		.uleb128 0x4
 2738 006c 58010000 		.4byte	.LASF9
 2739 0070 02       		.byte	0x2
 2740 0071 B901     		.2byte	0x1b9
 2741 0073 2C000000 		.4byte	0x2c
 2742 0077 04       		.uleb128 0x4
 2743 0078 00000000 		.4byte	.LASF10
 2744 007c 02       		.byte	0x2
 2745 007d BA01     		.2byte	0x1ba
 2746 007f 3A000000 		.4byte	0x3a
 2747 0083 04       		.uleb128 0x4
 2748 0084 B0010000 		.4byte	.LASF11
 2749 0088 02       		.byte	0x2
 2750 0089 BB01     		.2byte	0x1bb
 2751 008b 48000000 		.4byte	0x48
 2752 008f 02       		.uleb128 0x2
 2753 0090 04       		.byte	0x4
 2754 0091 04       		.byte	0x4
 2755 0092 CE040000 		.4byte	.LASF12
 2756 0096 02       		.uleb128 0x2
 2757 0097 08       		.byte	0x8
 2758 0098 04       		.byte	0x4
 2759 0099 65010000 		.4byte	.LASF13
 2760 009d 02       		.uleb128 0x2
 2761 009e 01       		.byte	0x1
 2762 009f 08       		.byte	0x8
 2763 00a0 E4050000 		.4byte	.LASF14
 2764 00a4 04       		.uleb128 0x4
 2765 00a5 B3060000 		.4byte	.LASF15
 2766 00a9 02       		.byte	0x2
 2767 00aa 5B02     		.2byte	0x25b
 2768 00ac 48000000 		.4byte	0x48
 2769 00b0 04       		.uleb128 0x4
 2770 00b1 2D040000 		.4byte	.LASF16
 2771 00b5 02       		.byte	0x2
 2772 00b6 6502     		.2byte	0x265
 2773 00b8 BC000000 		.4byte	0xbc
 2774 00bc 05       		.uleb128 0x5
 2775 00bd 83000000 		.4byte	0x83
 2776 00c1 06       		.uleb128 0x6
 2777 00c2 04       		.byte	0x4
 2778 00c3 C7000000 		.4byte	0xc7
 2779 00c7 07       		.uleb128 0x7
 2780 00c8 08       		.uleb128 0x8
 2781 00c9 01       		.byte	0x1
 2782 00ca 2C000000 		.4byte	0x2c
 2783 00ce 03       		.byte	0x3
 2784 00cf 1B       		.byte	0x1b
 2785 00d0 E1000000 		.4byte	0xe1
 2786 00d4 09       		.uleb128 0x9
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 107


 2787 00d5 75040000 		.4byte	.LASF17
 2788 00d9 00       		.byte	0
 2789 00da 09       		.uleb128 0x9
 2790 00db E7060000 		.4byte	.LASF18
 2791 00df 01       		.byte	0x1
 2792 00e0 00       		.byte	0
 2793 00e1 0A       		.uleb128 0xa
 2794 00e2 25010000 		.4byte	.LASF19
 2795 00e6 03       		.byte	0x3
 2796 00e7 1E       		.byte	0x1e
 2797 00e8 C8000000 		.4byte	0xc8
 2798 00ec 0A       		.uleb128 0xa
 2799 00ed 17010000 		.4byte	.LASF20
 2800 00f1 03       		.byte	0x3
 2801 00f2 58       		.byte	0x58
 2802 00f3 C1000000 		.4byte	0xc1
 2803 00f7 02       		.uleb128 0x2
 2804 00f8 08       		.byte	0x8
 2805 00f9 04       		.byte	0x4
 2806 00fa 52040000 		.4byte	.LASF21
 2807 00fe 02       		.uleb128 0x2
 2808 00ff 04       		.byte	0x4
 2809 0100 07       		.byte	0x7
 2810 0101 49040000 		.4byte	.LASF22
 2811 0105 0B       		.uleb128 0xb
 2812 0106 79030000 		.4byte	.LASF23
 2813 010a 01       		.byte	0x1
 2814 010b 53       		.byte	0x53
 2815 010c 00000000 		.4byte	.LFB0
 2816 0110 1C000000 		.4byte	.LFE0-.LFB0
 2817 0114 01       		.uleb128 0x1
 2818 0115 9C       		.byte	0x9c
 2819 0116 0C       		.uleb128 0xc
 2820 0117 7E010000 		.4byte	.LASF34
 2821 011b 01       		.byte	0x1
 2822 011c 6C       		.byte	0x6c
 2823 011d 00000000 		.4byte	.LFB1
 2824 0121 4C000000 		.4byte	.LFE1-.LFB1
 2825 0125 01       		.uleb128 0x1
 2826 0126 9C       		.byte	0x9c
 2827 0127 3A010000 		.4byte	0x13a
 2828 012b 0D       		.uleb128 0xd
 2829 012c 08010000 		.4byte	.LASF28
 2830 0130 01       		.byte	0x1
 2831 0131 6F       		.byte	0x6f
 2832 0132 6B000000 		.4byte	0x6b
 2833 0136 02       		.uleb128 0x2
 2834 0137 91       		.byte	0x91
 2835 0138 6F       		.sleb128 -17
 2836 0139 00       		.byte	0
 2837 013a 0B       		.uleb128 0xb
 2838 013b 93000000 		.4byte	.LASF24
 2839 013f 01       		.byte	0x1
 2840 0140 A8       		.byte	0xa8
 2841 0141 00000000 		.4byte	.LFB2
 2842 0145 40000000 		.4byte	.LFE2-.LFB2
 2843 0149 01       		.uleb128 0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 108


 2844 014a 9C       		.byte	0x9c
 2845 014b 0B       		.uleb128 0xb
 2846 014c B7010000 		.4byte	.LASF25
 2847 0150 01       		.byte	0x1
 2848 0151 C9       		.byte	0xc9
 2849 0152 00000000 		.4byte	.LFB3
 2850 0156 20000000 		.4byte	.LFE3-.LFB3
 2851 015a 01       		.uleb128 0x1
 2852 015b 9C       		.byte	0x9c
 2853 015c 0E       		.uleb128 0xe
 2854 015d D1060000 		.4byte	.LASF39
 2855 0161 01       		.byte	0x1
 2856 0162 0B01     		.2byte	0x10b
 2857 0164 A4000000 		.4byte	0xa4
 2858 0168 00000000 		.4byte	.LFB4
 2859 016c 58010000 		.4byte	.LFE4-.LFB4
 2860 0170 01       		.uleb128 0x1
 2861 0171 9C       		.byte	0x9c
 2862 0172 E3010000 		.4byte	0x1e3
 2863 0176 0F       		.uleb128 0xf
 2864 0177 84020000 		.4byte	.LASF26
 2865 017b 01       		.byte	0x1
 2866 017c 0B01     		.2byte	0x10b
 2867 017e 83000000 		.4byte	0x83
 2868 0182 02       		.uleb128 0x2
 2869 0183 91       		.byte	0x91
 2870 0184 5C       		.sleb128 -36
 2871 0185 0F       		.uleb128 0xf
 2872 0186 6C010000 		.4byte	.LASF27
 2873 018a 01       		.byte	0x1
 2874 018b 0B01     		.2byte	0x10b
 2875 018d E3010000 		.4byte	0x1e3
 2876 0191 02       		.uleb128 0x2
 2877 0192 91       		.byte	0x91
 2878 0193 58       		.sleb128 -40
 2879 0194 10       		.uleb128 0x10
 2880 0195 8E010000 		.4byte	.LASF29
 2881 0199 01       		.byte	0x1
 2882 019a 0D01     		.2byte	0x10d
 2883 019c 83000000 		.4byte	0x83
 2884 01a0 02       		.uleb128 0x2
 2885 01a1 91       		.byte	0x91
 2886 01a2 6C       		.sleb128 -20
 2887 01a3 10       		.uleb128 0x10
 2888 01a4 5A060000 		.4byte	.LASF30
 2889 01a8 01       		.byte	0x1
 2890 01a9 0E01     		.2byte	0x10e
 2891 01ab 83000000 		.4byte	0x83
 2892 01af 02       		.uleb128 0x2
 2893 01b0 91       		.byte	0x91
 2894 01b1 60       		.sleb128 -32
 2895 01b2 10       		.uleb128 0x10
 2896 01b3 1B050000 		.4byte	.LASF31
 2897 01b7 01       		.byte	0x1
 2898 01b8 0F01     		.2byte	0x10f
 2899 01ba 83000000 		.4byte	0x83
 2900 01be 05       		.uleb128 0x5
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 109


 2901 01bf 03       		.byte	0x3
 2902 01c0 18000000 		.4byte	compensateRunningStatus.4836
 2903 01c4 10       		.uleb128 0x10
 2904 01c5 87040000 		.4byte	.LASF32
 2905 01c9 01       		.byte	0x1
 2906 01ca 1001     		.2byte	0x110
 2907 01cc 83000000 		.4byte	0x83
 2908 01d0 02       		.uleb128 0x2
 2909 01d1 91       		.byte	0x91
 2910 01d2 64       		.sleb128 -28
 2911 01d3 10       		.uleb128 0x10
 2912 01d4 3C040000 		.4byte	.LASF33
 2913 01d8 01       		.byte	0x1
 2914 01d9 1101     		.2byte	0x111
 2915 01db A4000000 		.4byte	0xa4
 2916 01df 02       		.uleb128 0x2
 2917 01e0 91       		.byte	0x91
 2918 01e1 68       		.sleb128 -24
 2919 01e2 00       		.byte	0
 2920 01e3 06       		.uleb128 0x6
 2921 01e4 04       		.byte	0x4
 2922 01e5 83000000 		.4byte	0x83
 2923 01e9 11       		.uleb128 0x11
 2924 01ea 7B050000 		.4byte	.LASF36
 2925 01ee 01       		.byte	0x1
 2926 01ef 7201     		.2byte	0x172
 2927 01f1 83000000 		.4byte	0x83
 2928 01f5 00000000 		.4byte	.LFB5
 2929 01f9 1C000000 		.4byte	.LFE5-.LFB5
 2930 01fd 01       		.uleb128 0x1
 2931 01fe 9C       		.byte	0x9c
 2932 01ff 12       		.uleb128 0x12
 2933 0200 FF050000 		.4byte	.LASF35
 2934 0204 01       		.byte	0x1
 2935 0205 B403     		.2byte	0x3b4
 2936 0207 00000000 		.4byte	.LFB6
 2937 020b 34000000 		.4byte	.LFE6-.LFB6
 2938 020f 01       		.uleb128 0x1
 2939 0210 9C       		.byte	0x9c
 2940 0211 25020000 		.4byte	0x225
 2941 0215 10       		.uleb128 0x10
 2942 0216 08010000 		.4byte	.LASF28
 2943 021a 01       		.byte	0x1
 2944 021b B603     		.2byte	0x3b6
 2945 021d 6B000000 		.4byte	0x6b
 2946 0221 02       		.uleb128 0x2
 2947 0222 91       		.byte	0x91
 2948 0223 6F       		.sleb128 -17
 2949 0224 00       		.byte	0
 2950 0225 11       		.uleb128 0x11
 2951 0226 FE040000 		.4byte	.LASF37
 2952 022a 01       		.byte	0x1
 2953 022b C903     		.2byte	0x3c9
 2954 022d 83000000 		.4byte	0x83
 2955 0231 00000000 		.4byte	.LFB7
 2956 0235 20000000 		.4byte	.LFE7-.LFB7
 2957 0239 01       		.uleb128 0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 110


 2958 023a 9C       		.byte	0x9c
 2959 023b 12       		.uleb128 0x12
 2960 023c 3A000000 		.4byte	.LASF38
 2961 0240 01       		.byte	0x1
 2962 0241 D703     		.2byte	0x3d7
 2963 0243 00000000 		.4byte	.LFB8
 2964 0247 50000000 		.4byte	.LFE8-.LFB8
 2965 024b 01       		.uleb128 0x1
 2966 024c 9C       		.byte	0x9c
 2967 024d 61020000 		.4byte	0x261
 2968 0251 10       		.uleb128 0x10
 2969 0252 08010000 		.4byte	.LASF28
 2970 0256 01       		.byte	0x1
 2971 0257 D903     		.2byte	0x3d9
 2972 0259 6B000000 		.4byte	0x6b
 2973 025d 02       		.uleb128 0x2
 2974 025e 91       		.byte	0x91
 2975 025f 6F       		.sleb128 -17
 2976 0260 00       		.byte	0
 2977 0261 0E       		.uleb128 0xe
 2978 0262 37030000 		.4byte	.LASF40
 2979 0266 01       		.byte	0x1
 2980 0267 F903     		.2byte	0x3f9
 2981 0269 83000000 		.4byte	0x83
 2982 026d 00000000 		.4byte	.LFB9
 2983 0271 34000000 		.4byte	.LFE9-.LFB9
 2984 0275 01       		.uleb128 0x1
 2985 0276 9C       		.byte	0x9c
 2986 0277 8B020000 		.4byte	0x28b
 2987 027b 0F       		.uleb128 0xf
 2988 027c 5B000000 		.4byte	.LASF41
 2989 0280 01       		.byte	0x1
 2990 0281 F903     		.2byte	0x3f9
 2991 0283 83000000 		.4byte	0x83
 2992 0287 02       		.uleb128 0x2
 2993 0288 91       		.byte	0x91
 2994 0289 74       		.sleb128 -12
 2995 028a 00       		.byte	0
 2996 028b 12       		.uleb128 0x12
 2997 028c 2A000000 		.4byte	.LASF42
 2998 0290 01       		.byte	0x1
 2999 0291 1704     		.2byte	0x417
 3000 0293 00000000 		.4byte	.LFB10
 3001 0297 5C000000 		.4byte	.LFE10-.LFB10
 3002 029b 01       		.uleb128 0x1
 3003 029c 9C       		.byte	0x9c
 3004 029d CF020000 		.4byte	0x2cf
 3005 02a1 0F       		.uleb128 0xf
 3006 02a2 5B000000 		.4byte	.LASF41
 3007 02a6 01       		.byte	0x1
 3008 02a7 1704     		.2byte	0x417
 3009 02a9 83000000 		.4byte	0x83
 3010 02ad 02       		.uleb128 0x2
 3011 02ae 91       		.byte	0x91
 3012 02af 6C       		.sleb128 -20
 3013 02b0 0F       		.uleb128 0xf
 3014 02b1 E9050000 		.4byte	.LASF43
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 111


 3015 02b5 01       		.byte	0x1
 3016 02b6 1704     		.2byte	0x417
 3017 02b8 83000000 		.4byte	0x83
 3018 02bc 02       		.uleb128 0x2
 3019 02bd 91       		.byte	0x91
 3020 02be 68       		.sleb128 -24
 3021 02bf 10       		.uleb128 0x10
 3022 02c0 6F060000 		.4byte	.LASF44
 3023 02c4 01       		.byte	0x1
 3024 02c5 1904     		.2byte	0x419
 3025 02c7 83000000 		.4byte	0x83
 3026 02cb 02       		.uleb128 0x2
 3027 02cc 91       		.byte	0x91
 3028 02cd 74       		.sleb128 -12
 3029 02ce 00       		.byte	0
 3030 02cf 13       		.uleb128 0x13
 3031 02d0 4A060000 		.4byte	.LASF45
 3032 02d4 01       		.byte	0x1
 3033 02d5 3304     		.2byte	0x433
 3034 02d7 83000000 		.4byte	0x83
 3035 02db 00000000 		.4byte	.LFB11
 3036 02df 24000000 		.4byte	.LFE11-.LFB11
 3037 02e3 01       		.uleb128 0x1
 3038 02e4 9C       		.byte	0x9c
 3039 02e5 F9020000 		.4byte	0x2f9
 3040 02e9 0F       		.uleb128 0xf
 3041 02ea 5B000000 		.4byte	.LASF41
 3042 02ee 01       		.byte	0x1
 3043 02ef 3304     		.2byte	0x433
 3044 02f1 83000000 		.4byte	0x83
 3045 02f5 02       		.uleb128 0x2
 3046 02f6 91       		.byte	0x91
 3047 02f7 74       		.sleb128 -12
 3048 02f8 00       		.byte	0
 3049 02f9 12       		.uleb128 0x12
 3050 02fa 1F060000 		.4byte	.LASF46
 3051 02fe 01       		.byte	0x1
 3052 02ff 5004     		.2byte	0x450
 3053 0301 00000000 		.4byte	.LFB12
 3054 0305 6C000000 		.4byte	.LFE12-.LFB12
 3055 0309 01       		.uleb128 0x1
 3056 030a 9C       		.byte	0x9c
 3057 030b 3D030000 		.4byte	0x33d
 3058 030f 0F       		.uleb128 0xf
 3059 0310 5B000000 		.4byte	.LASF41
 3060 0314 01       		.byte	0x1
 3061 0315 5004     		.2byte	0x450
 3062 0317 83000000 		.4byte	0x83
 3063 031b 02       		.uleb128 0x2
 3064 031c 91       		.byte	0x91
 3065 031d 6C       		.sleb128 -20
 3066 031e 0F       		.uleb128 0xf
 3067 031f 5E010000 		.4byte	.LASF47
 3068 0323 01       		.byte	0x1
 3069 0324 5004     		.2byte	0x450
 3070 0326 83000000 		.4byte	0x83
 3071 032a 02       		.uleb128 0x2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 112


 3072 032b 91       		.byte	0x91
 3073 032c 68       		.sleb128 -24
 3074 032d 10       		.uleb128 0x10
 3075 032e 6F060000 		.4byte	.LASF44
 3076 0332 01       		.byte	0x1
 3077 0333 5204     		.2byte	0x452
 3078 0335 83000000 		.4byte	0x83
 3079 0339 02       		.uleb128 0x2
 3080 033a 91       		.byte	0x91
 3081 033b 74       		.sleb128 -12
 3082 033c 00       		.byte	0
 3083 033d 0E       		.uleb128 0xe
 3084 033e 48020000 		.4byte	.LASF48
 3085 0342 01       		.byte	0x1
 3086 0343 7104     		.2byte	0x471
 3087 0345 83000000 		.4byte	0x83
 3088 0349 00000000 		.4byte	.LFB13
 3089 034d 44000000 		.4byte	.LFE13-.LFB13
 3090 0351 01       		.uleb128 0x1
 3091 0352 9C       		.byte	0x9c
 3092 0353 67030000 		.4byte	0x367
 3093 0357 0F       		.uleb128 0xf
 3094 0358 5B000000 		.4byte	.LASF41
 3095 035c 01       		.byte	0x1
 3096 035d 7104     		.2byte	0x471
 3097 035f 83000000 		.4byte	0x83
 3098 0363 02       		.uleb128 0x2
 3099 0364 91       		.byte	0x91
 3100 0365 74       		.sleb128 -12
 3101 0366 00       		.byte	0
 3102 0367 12       		.uleb128 0x12
 3103 0368 10020000 		.4byte	.LASF49
 3104 036c 01       		.byte	0x1
 3105 036d 9A04     		.2byte	0x49a
 3106 036f 00000000 		.4byte	.LFB14
 3107 0373 64000000 		.4byte	.LFE14-.LFB14
 3108 0377 01       		.uleb128 0x1
 3109 0378 9C       		.byte	0x9c
 3110 0379 8D030000 		.4byte	0x38d
 3111 037d 0F       		.uleb128 0xf
 3112 037e 3C020000 		.4byte	.LASF50
 3113 0382 01       		.byte	0x1
 3114 0383 9A04     		.2byte	0x49a
 3115 0385 83000000 		.4byte	0x83
 3116 0389 02       		.uleb128 0x2
 3117 038a 91       		.byte	0x91
 3118 038b 74       		.sleb128 -12
 3119 038c 00       		.byte	0
 3120 038d 12       		.uleb128 0x12
 3121 038e 6B050000 		.4byte	.LASF51
 3122 0392 01       		.byte	0x1
 3123 0393 CA04     		.2byte	0x4ca
 3124 0395 00000000 		.4byte	.LFB15
 3125 0399 6C000000 		.4byte	.LFE15-.LFB15
 3126 039d 01       		.uleb128 0x1
 3127 039e 9C       		.byte	0x9c
 3128 039f B3030000 		.4byte	0x3b3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 113


 3129 03a3 0F       		.uleb128 0xf
 3130 03a4 3C020000 		.4byte	.LASF50
 3131 03a8 01       		.byte	0x1
 3132 03a9 CA04     		.2byte	0x4ca
 3133 03ab 83000000 		.4byte	0x83
 3134 03af 02       		.uleb128 0x2
 3135 03b0 91       		.byte	0x91
 3136 03b1 74       		.sleb128 -12
 3137 03b2 00       		.byte	0
 3138 03b3 12       		.uleb128 0x12
 3139 03b4 37060000 		.4byte	.LASF52
 3140 03b8 01       		.byte	0x1
 3141 03b9 0505     		.2byte	0x505
 3142 03bb 00000000 		.4byte	.LFB16
 3143 03bf 58000000 		.4byte	.LFE16-.LFB16
 3144 03c3 01       		.uleb128 0x1
 3145 03c4 9C       		.byte	0x9c
 3146 03c5 F7030000 		.4byte	0x3f7
 3147 03c9 0F       		.uleb128 0xf
 3148 03ca A7060000 		.4byte	.LASF53
 3149 03ce 01       		.byte	0x1
 3150 03cf 0505     		.2byte	0x505
 3151 03d1 83000000 		.4byte	0x83
 3152 03d5 02       		.uleb128 0x2
 3153 03d6 91       		.byte	0x91
 3154 03d7 64       		.sleb128 -28
 3155 03d8 10       		.uleb128 0x10
 3156 03d9 6F060000 		.4byte	.LASF44
 3157 03dd 01       		.byte	0x1
 3158 03de 0705     		.2byte	0x507
 3159 03e0 83000000 		.4byte	0x83
 3160 03e4 02       		.uleb128 0x2
 3161 03e5 91       		.byte	0x91
 3162 03e6 68       		.sleb128 -24
 3163 03e7 10       		.uleb128 0x10
 3164 03e8 F0010000 		.4byte	.LASF54
 3165 03ec 01       		.byte	0x1
 3166 03ed 0805     		.2byte	0x508
 3167 03ef 83000000 		.4byte	0x83
 3168 03f3 02       		.uleb128 0x2
 3169 03f4 91       		.byte	0x91
 3170 03f5 6C       		.sleb128 -20
 3171 03f6 00       		.byte	0
 3172 03f7 14       		.uleb128 0x14
 3173 03f8 80000000 		.4byte	.LASF60
 3174 03fc 01       		.byte	0x1
 3175 03fd 2405     		.2byte	0x524
 3176 03ff 83000000 		.4byte	0x83
 3177 0403 00000000 		.4byte	.LFB17
 3178 0407 1C000000 		.4byte	.LFE17-.LFB17
 3179 040b 01       		.uleb128 0x1
 3180 040c 9C       		.byte	0x9c
 3181 040d 12       		.uleb128 0x12
 3182 040e DF010000 		.4byte	.LASF55
 3183 0412 01       		.byte	0x1
 3184 0413 3805     		.2byte	0x538
 3185 0415 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 114


 3186 0419 6C000000 		.4byte	.LFE18-.LFB18
 3187 041d 01       		.uleb128 0x1
 3188 041e 9C       		.byte	0x9c
 3189 041f 51040000 		.4byte	0x451
 3190 0423 0F       		.uleb128 0xf
 3191 0424 5B000000 		.4byte	.LASF41
 3192 0428 01       		.byte	0x1
 3193 0429 3805     		.2byte	0x538
 3194 042b 83000000 		.4byte	0x83
 3195 042f 02       		.uleb128 0x2
 3196 0430 91       		.byte	0x91
 3197 0431 6C       		.sleb128 -20
 3198 0432 0F       		.uleb128 0xf
 3199 0433 6F040000 		.4byte	.LASF56
 3200 0437 01       		.byte	0x1
 3201 0438 3805     		.2byte	0x538
 3202 043a 83000000 		.4byte	0x83
 3203 043e 02       		.uleb128 0x2
 3204 043f 91       		.byte	0x91
 3205 0440 68       		.sleb128 -24
 3206 0441 10       		.uleb128 0x10
 3207 0442 4F010000 		.4byte	.LASF57
 3208 0446 01       		.byte	0x1
 3209 0447 3A05     		.2byte	0x53a
 3210 0449 83000000 		.4byte	0x83
 3211 044d 02       		.uleb128 0x2
 3212 044e 91       		.byte	0x91
 3213 044f 74       		.sleb128 -12
 3214 0450 00       		.byte	0
 3215 0451 12       		.uleb128 0x12
 3216 0452 8A030000 		.4byte	.LASF58
 3217 0456 01       		.byte	0x1
 3218 0457 5F05     		.2byte	0x55f
 3219 0459 00000000 		.4byte	.LFB19
 3220 045d 48000000 		.4byte	.LFE19-.LFB19
 3221 0461 01       		.uleb128 0x1
 3222 0462 9C       		.byte	0x9c
 3223 0463 86040000 		.4byte	0x486
 3224 0467 0F       		.uleb128 0xf
 3225 0468 41010000 		.4byte	.LASF59
 3226 046c 01       		.byte	0x1
 3227 046d 5F05     		.2byte	0x55f
 3228 046f 83000000 		.4byte	0x83
 3229 0473 02       		.uleb128 0x2
 3230 0474 91       		.byte	0x91
 3231 0475 6C       		.sleb128 -20
 3232 0476 10       		.uleb128 0x10
 3233 0477 6F060000 		.4byte	.LASF44
 3234 047b 01       		.byte	0x1
 3235 047c 6105     		.2byte	0x561
 3236 047e 83000000 		.4byte	0x83
 3237 0482 02       		.uleb128 0x2
 3238 0483 91       		.byte	0x91
 3239 0484 74       		.sleb128 -12
 3240 0485 00       		.byte	0
 3241 0486 14       		.uleb128 0x14
 3242 0487 BC060000 		.4byte	.LASF61
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 115


 3243 048b 01       		.byte	0x1
 3244 048c 7605     		.2byte	0x576
 3245 048e 83000000 		.4byte	0x83
 3246 0492 00000000 		.4byte	.LFB20
 3247 0496 18000000 		.4byte	.LFE20-.LFB20
 3248 049a 01       		.uleb128 0x1
 3249 049b 9C       		.byte	0x9c
 3250 049c 0E       		.uleb128 0xe
 3251 049d 5E040000 		.4byte	.LASF62
 3252 04a1 01       		.byte	0x1
 3253 04a2 8805     		.2byte	0x588
 3254 04a4 83000000 		.4byte	0x83
 3255 04a8 00000000 		.4byte	.LFB21
 3256 04ac 40000000 		.4byte	.LFE21-.LFB21
 3257 04b0 01       		.uleb128 0x1
 3258 04b1 9C       		.byte	0x9c
 3259 04b2 C6040000 		.4byte	0x4c6
 3260 04b6 0F       		.uleb128 0xf
 3261 04b7 5B000000 		.4byte	.LASF41
 3262 04bb 01       		.byte	0x1
 3263 04bc 8805     		.2byte	0x588
 3264 04be 83000000 		.4byte	0x83
 3265 04c2 02       		.uleb128 0x2
 3266 04c3 91       		.byte	0x91
 3267 04c4 74       		.sleb128 -12
 3268 04c5 00       		.byte	0
 3269 04c6 0E       		.uleb128 0xe
 3270 04c7 EE050000 		.4byte	.LASF63
 3271 04cb 01       		.byte	0x1
 3272 04cc 9E05     		.2byte	0x59e
 3273 04ce 83000000 		.4byte	0x83
 3274 04d2 00000000 		.4byte	.LFB22
 3275 04d6 54000000 		.4byte	.LFE22-.LFB22
 3276 04da 01       		.uleb128 0x1
 3277 04db 9C       		.byte	0x9c
 3278 04dc FF040000 		.4byte	0x4ff
 3279 04e0 0F       		.uleb128 0xf
 3280 04e1 5B000000 		.4byte	.LASF41
 3281 04e5 01       		.byte	0x1
 3282 04e6 9E05     		.2byte	0x59e
 3283 04e8 83000000 		.4byte	0x83
 3284 04ec 02       		.uleb128 0x2
 3285 04ed 91       		.byte	0x91
 3286 04ee 6C       		.sleb128 -20
 3287 04ef 10       		.uleb128 0x10
 3288 04f0 4F010000 		.4byte	.LASF57
 3289 04f4 01       		.byte	0x1
 3290 04f5 A005     		.2byte	0x5a0
 3291 04f7 83000000 		.4byte	0x83
 3292 04fb 02       		.uleb128 0x2
 3293 04fc 91       		.byte	0x91
 3294 04fd 74       		.sleb128 -12
 3295 04fe 00       		.byte	0
 3296 04ff 14       		.uleb128 0x14
 3297 0500 8E050000 		.4byte	.LASF64
 3298 0504 01       		.byte	0x1
 3299 0505 C905     		.2byte	0x5c9
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 116


 3300 0507 83000000 		.4byte	0x83
 3301 050b 00000000 		.4byte	.LFB23
 3302 050f 1C000000 		.4byte	.LFE23-.LFB23
 3303 0513 01       		.uleb128 0x1
 3304 0514 9C       		.byte	0x9c
 3305 0515 12       		.uleb128 0x12
 3306 0516 B7040000 		.4byte	.LASF65
 3307 051a 01       		.byte	0x1
 3308 051b E605     		.2byte	0x5e6
 3309 051d 00000000 		.4byte	.LFB24
 3310 0521 70000000 		.4byte	.LFE24-.LFB24
 3311 0525 01       		.uleb128 0x1
 3312 0526 9C       		.byte	0x9c
 3313 0527 59050000 		.4byte	0x559
 3314 052b 0F       		.uleb128 0xf
 3315 052c 3C020000 		.4byte	.LASF50
 3316 0530 01       		.byte	0x1
 3317 0531 E605     		.2byte	0x5e6
 3318 0533 83000000 		.4byte	0x83
 3319 0537 02       		.uleb128 0x2
 3320 0538 91       		.byte	0x91
 3321 0539 64       		.sleb128 -28
 3322 053a 10       		.uleb128 0x10
 3323 053b 08010000 		.4byte	.LASF28
 3324 053f 01       		.byte	0x1
 3325 0540 E805     		.2byte	0x5e8
 3326 0542 6B000000 		.4byte	0x6b
 3327 0546 02       		.uleb128 0x2
 3328 0547 91       		.byte	0x91
 3329 0548 6B       		.sleb128 -21
 3330 0549 10       		.uleb128 0x10
 3331 054a 7E060000 		.4byte	.LASF66
 3332 054e 01       		.byte	0x1
 3333 054f E905     		.2byte	0x5e9
 3334 0551 83000000 		.4byte	0x83
 3335 0555 02       		.uleb128 0x2
 3336 0556 91       		.byte	0x91
 3337 0557 6C       		.sleb128 -20
 3338 0558 00       		.byte	0
 3339 0559 15       		.uleb128 0x15
 3340 055a A1040000 		.4byte	.LASF67
 3341 055e 01       		.byte	0x1
 3342 055f 2006     		.2byte	0x620
 3343 0561 00000000 		.4byte	.LFB25
 3344 0565 34000000 		.4byte	.LFE25-.LFB25
 3345 0569 01       		.uleb128 0x1
 3346 056a 9C       		.byte	0x9c
 3347 056b 7F050000 		.4byte	0x57f
 3348 056f 0F       		.uleb128 0xf
 3349 0570 A3010000 		.4byte	.LASF68
 3350 0574 01       		.byte	0x1
 3351 0575 2006     		.2byte	0x620
 3352 0577 83000000 		.4byte	0x83
 3353 057b 02       		.uleb128 0x2
 3354 057c 91       		.byte	0x91
 3355 057d 74       		.sleb128 -12
 3356 057e 00       		.byte	0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 117


 3357 057f 0E       		.uleb128 0xe
 3358 0580 1F020000 		.4byte	.LASF69
 3359 0584 01       		.byte	0x1
 3360 0585 3A06     		.2byte	0x63a
 3361 0587 EC000000 		.4byte	0xec
 3362 058b 00000000 		.4byte	.LFB26
 3363 058f 40000000 		.4byte	.LFE26-.LFB26
 3364 0593 01       		.uleb128 0x1
 3365 0594 9C       		.byte	0x9c
 3366 0595 C7050000 		.4byte	0x5c7
 3367 0599 0F       		.uleb128 0xf
 3368 059a 5B000000 		.4byte	.LASF41
 3369 059e 01       		.byte	0x1
 3370 059f 3A06     		.2byte	0x63a
 3371 05a1 83000000 		.4byte	0x83
 3372 05a5 02       		.uleb128 0x2
 3373 05a6 91       		.byte	0x91
 3374 05a7 6C       		.sleb128 -20
 3375 05a8 0F       		.uleb128 0xf
 3376 05a9 FF000000 		.4byte	.LASF70
 3377 05ad 01       		.byte	0x1
 3378 05ae 3A06     		.2byte	0x63a
 3379 05b0 EC000000 		.4byte	0xec
 3380 05b4 02       		.uleb128 0x2
 3381 05b5 91       		.byte	0x91
 3382 05b6 68       		.sleb128 -24
 3383 05b7 10       		.uleb128 0x10
 3384 05b8 D2010000 		.4byte	.LASF71
 3385 05bc 01       		.byte	0x1
 3386 05bd 3C06     		.2byte	0x63c
 3387 05bf EC000000 		.4byte	0xec
 3388 05c3 02       		.uleb128 0x2
 3389 05c4 91       		.byte	0x91
 3390 05c5 74       		.sleb128 -12
 3391 05c6 00       		.byte	0
 3392 05c7 0E       		.uleb128 0xe
 3393 05c8 50030000 		.4byte	.LASF72
 3394 05cc 01       		.byte	0x1
 3395 05cd 5806     		.2byte	0x658
 3396 05cf EC000000 		.4byte	0xec
 3397 05d3 00000000 		.4byte	.LFB27
 3398 05d7 34000000 		.4byte	.LFE27-.LFB27
 3399 05db 01       		.uleb128 0x1
 3400 05dc 9C       		.byte	0x9c
 3401 05dd 00060000 		.4byte	0x600
 3402 05e1 0F       		.uleb128 0xf
 3403 05e2 5B000000 		.4byte	.LASF41
 3404 05e6 01       		.byte	0x1
 3405 05e7 5806     		.2byte	0x658
 3406 05e9 83000000 		.4byte	0x83
 3407 05ed 02       		.uleb128 0x2
 3408 05ee 91       		.byte	0x91
 3409 05ef 6C       		.sleb128 -20
 3410 05f0 10       		.uleb128 0x10
 3411 05f1 78020000 		.4byte	.LASF73
 3412 05f5 01       		.byte	0x1
 3413 05f6 5A06     		.2byte	0x65a
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 118


 3414 05f8 EC000000 		.4byte	0xec
 3415 05fc 02       		.uleb128 0x2
 3416 05fd 91       		.byte	0x91
 3417 05fe 74       		.sleb128 -12
 3418 05ff 00       		.byte	0
 3419 0600 12       		.uleb128 0x12
 3420 0601 CA020000 		.4byte	.LASF74
 3421 0605 01       		.byte	0x1
 3422 0606 7506     		.2byte	0x675
 3423 0608 00000000 		.4byte	.LFB28
 3424 060c 50000000 		.4byte	.LFE28-.LFB28
 3425 0610 01       		.uleb128 0x1
 3426 0611 9C       		.byte	0x9c
 3427 0612 26060000 		.4byte	0x626
 3428 0616 0F       		.uleb128 0xf
 3429 0617 5B000000 		.4byte	.LASF41
 3430 061b 01       		.byte	0x1
 3431 061c 7506     		.2byte	0x675
 3432 061e 83000000 		.4byte	0x83
 3433 0622 02       		.uleb128 0x2
 3434 0623 91       		.byte	0x91
 3435 0624 74       		.sleb128 -12
 3436 0625 00       		.byte	0
 3437 0626 12       		.uleb128 0x12
 3438 0627 CA050000 		.4byte	.LASF75
 3439 062b 01       		.byte	0x1
 3440 062c 8C06     		.2byte	0x68c
 3441 062e 00000000 		.4byte	.LFB29
 3442 0632 3C000000 		.4byte	.LFE29-.LFB29
 3443 0636 01       		.uleb128 0x1
 3444 0637 9C       		.byte	0x9c
 3445 0638 4C060000 		.4byte	0x64c
 3446 063c 0F       		.uleb128 0xf
 3447 063d 5B000000 		.4byte	.LASF41
 3448 0641 01       		.byte	0x1
 3449 0642 8C06     		.2byte	0x68c
 3450 0644 83000000 		.4byte	0x83
 3451 0648 02       		.uleb128 0x2
 3452 0649 91       		.byte	0x91
 3453 064a 74       		.sleb128 -12
 3454 064b 00       		.byte	0
 3455 064c 16       		.uleb128 0x16
 3456 064d 6D030000 		.4byte	.LASF76
 3457 0651 01       		.byte	0x1
 3458 0652 AD06     		.2byte	0x6ad
 3459 0654 00000000 		.4byte	.LFB30
 3460 0658 EC000000 		.4byte	.LFE30-.LFB30
 3461 065c 01       		.uleb128 0x1
 3462 065d 9C       		.byte	0x9c
 3463 065e 12       		.uleb128 0x12
 3464 065f 49000000 		.4byte	.LASF77
 3465 0663 01       		.byte	0x1
 3466 0664 EE06     		.2byte	0x6ee
 3467 0666 00000000 		.4byte	.LFB31
 3468 066a 8A000000 		.4byte	.LFE31-.LFB31
 3469 066e 01       		.uleb128 0x1
 3470 066f 9C       		.byte	0x9c
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 119


 3471 0670 84060000 		.4byte	0x684
 3472 0674 0F       		.uleb128 0xf
 3473 0675 5B000000 		.4byte	.LASF41
 3474 0679 01       		.byte	0x1
 3475 067a EE06     		.2byte	0x6ee
 3476 067c 83000000 		.4byte	0x83
 3477 0680 02       		.uleb128 0x2
 3478 0681 91       		.byte	0x91
 3479 0682 74       		.sleb128 -12
 3480 0683 00       		.byte	0
 3481 0684 17       		.uleb128 0x17
 3482 0685 66000000 		.4byte	.LASF95
 3483 0689 01       		.byte	0x1
 3484 068a 3007     		.2byte	0x730
 3485 068c 00000000 		.4byte	.LFB32
 3486 0690 98000000 		.4byte	.LFE32-.LFB32
 3487 0694 01       		.uleb128 0x1
 3488 0695 9C       		.byte	0x9c
 3489 0696 BC060000 		.4byte	0x6bc
 3490 069a 10       		.uleb128 0x10
 3491 069b 6D020000 		.4byte	.LASF78
 3492 069f 01       		.byte	0x1
 3493 06a0 3207     		.2byte	0x732
 3494 06a2 83000000 		.4byte	0x83
 3495 06a6 02       		.uleb128 0x2
 3496 06a7 91       		.byte	0x91
 3497 06a8 74       		.sleb128 -12
 3498 06a9 10       		.uleb128 0x10
 3499 06aa 33050000 		.4byte	.LASF79
 3500 06ae 01       		.byte	0x1
 3501 06af 3307     		.2byte	0x733
 3502 06b1 83000000 		.4byte	0x83
 3503 06b5 05       		.uleb128 0x5
 3504 06b6 03       		.byte	0x3
 3505 06b7 1C000000 		.4byte	lfclkPosedgeEnabledWdtCounter.4967
 3506 06bb 00       		.byte	0
 3507 06bc 18       		.uleb128 0x18
 3508 06bd AE020000 		.4byte	.LASF96
 3509 06c1 01       		.byte	0x1
 3510 06c2 6607     		.2byte	0x766
 3511 06c4 00000000 		.4byte	.LFB33
 3512 06c8 3C000000 		.4byte	.LFE33-.LFB33
 3513 06cc 01       		.uleb128 0x1
 3514 06cd 9C       		.byte	0x9c
 3515 06ce 12       		.uleb128 0x12
 3516 06cf EE040000 		.4byte	.LASF80
 3517 06d3 01       		.byte	0x1
 3518 06d4 D70B     		.2byte	0xbd7
 3519 06d6 00000000 		.4byte	.LFB34
 3520 06da 68000000 		.4byte	.LFE34-.LFB34
 3521 06de 01       		.uleb128 0x1
 3522 06df 9C       		.byte	0x9c
 3523 06e0 30070000 		.4byte	0x730
 3524 06e4 0F       		.uleb128 0xf
 3525 06e5 5B000000 		.4byte	.LASF41
 3526 06e9 01       		.byte	0x1
 3527 06ea D70B     		.2byte	0xbd7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 120


 3528 06ec 83000000 		.4byte	0x83
 3529 06f0 02       		.uleb128 0x2
 3530 06f1 91       		.byte	0x91
 3531 06f2 6C       		.sleb128 -20
 3532 06f3 0F       		.uleb128 0xf
 3533 06f4 61050000 		.4byte	.LASF81
 3534 06f8 01       		.byte	0x1
 3535 06f9 D70B     		.2byte	0xbd7
 3536 06fb E1000000 		.4byte	0xe1
 3537 06ff 02       		.uleb128 0x2
 3538 0700 91       		.byte	0x91
 3539 0701 6B       		.sleb128 -21
 3540 0702 0F       		.uleb128 0xf
 3541 0703 51050000 		.4byte	.LASF82
 3542 0707 01       		.byte	0x1
 3543 0708 D70B     		.2byte	0xbd7
 3544 070a 83000000 		.4byte	0x83
 3545 070e 02       		.uleb128 0x2
 3546 070f 91       		.byte	0x91
 3547 0710 64       		.sleb128 -28
 3548 0711 10       		.uleb128 0x10
 3549 0712 4F010000 		.4byte	.LASF57
 3550 0716 01       		.byte	0x1
 3551 0717 D90B     		.2byte	0xbd9
 3552 0719 83000000 		.4byte	0x83
 3553 071d 02       		.uleb128 0x2
 3554 071e 91       		.byte	0x91
 3555 071f 74       		.sleb128 -12
 3556 0720 10       		.uleb128 0x10
 3557 0721 A3020000 		.4byte	.LASF83
 3558 0725 01       		.byte	0x1
 3559 0726 DA0B     		.2byte	0xbda
 3560 0728 83000000 		.4byte	0x83
 3561 072c 02       		.uleb128 0x2
 3562 072d 91       		.byte	0x91
 3563 072e 70       		.sleb128 -16
 3564 072f 00       		.byte	0
 3565 0730 12       		.uleb128 0x12
 3566 0731 D4040000 		.4byte	.LASF84
 3567 0735 01       		.byte	0x1
 3568 0736 580C     		.2byte	0xc58
 3569 0738 00000000 		.4byte	.LFB35
 3570 073c B0000000 		.4byte	.LFE35-.LFB35
 3571 0740 01       		.uleb128 0x1
 3572 0741 9C       		.byte	0x9c
 3573 0742 83070000 		.4byte	0x783
 3574 0746 0F       		.uleb128 0xf
 3575 0747 5B000000 		.4byte	.LASF41
 3576 074b 01       		.byte	0x1
 3577 074c 580C     		.2byte	0xc58
 3578 074e 83000000 		.4byte	0x83
 3579 0752 02       		.uleb128 0x2
 3580 0753 91       		.byte	0x91
 3581 0754 6C       		.sleb128 -20
 3582 0755 0F       		.uleb128 0xf
 3583 0756 61050000 		.4byte	.LASF81
 3584 075a 01       		.byte	0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 121


 3585 075b 580C     		.2byte	0xc58
 3586 075d E1000000 		.4byte	0xe1
 3587 0761 02       		.uleb128 0x2
 3588 0762 91       		.byte	0x91
 3589 0763 6B       		.sleb128 -21
 3590 0764 0F       		.uleb128 0xf
 3591 0765 6F040000 		.4byte	.LASF56
 3592 0769 01       		.byte	0x1
 3593 076a 580C     		.2byte	0xc58
 3594 076c 83000000 		.4byte	0x83
 3595 0770 02       		.uleb128 0x2
 3596 0771 91       		.byte	0x91
 3597 0772 64       		.sleb128 -28
 3598 0773 10       		.uleb128 0x10
 3599 0774 33040000 		.4byte	.LASF85
 3600 0778 01       		.byte	0x1
 3601 0779 5A0C     		.2byte	0xc5a
 3602 077b 83000000 		.4byte	0x83
 3603 077f 02       		.uleb128 0x2
 3604 0780 91       		.byte	0x91
 3605 0781 74       		.sleb128 -12
 3606 0782 00       		.byte	0
 3607 0783 0D       		.uleb128 0xd
 3608 0784 AF000000 		.4byte	.LASF86
 3609 0788 01       		.byte	0x1
 3610 0789 22       		.byte	0x22
 3611 078a 83000000 		.4byte	0x83
 3612 078e 05       		.uleb128 0x5
 3613 078f 03       		.byte	0x3
 3614 0790 00000000 		.4byte	lfclkPosedgeWdtCounter0Enabled
 3615 0794 0D       		.uleb128 0xd
 3616 0795 8B060000 		.4byte	.LASF87
 3617 0799 01       		.byte	0x1
 3618 079a 23       		.byte	0x23
 3619 079b 83000000 		.4byte	0x83
 3620 079f 05       		.uleb128 0x5
 3621 07a0 03       		.byte	0x3
 3622 07a1 04000000 		.4byte	lfclkPosedgeWdtCounter0Mode
 3623 07a5 0D       		.uleb128 0xd
 3624 07a6 0C060000 		.4byte	.LASF88
 3625 07aa 01       		.byte	0x1
 3626 07ab 25       		.byte	0x25
 3627 07ac BC000000 		.4byte	0xbc
 3628 07b0 05       		.uleb128 0x5
 3629 07b1 03       		.byte	0x3
 3630 07b2 08000000 		.4byte	disableServicedIsr
 3631 07b6 0D       		.uleb128 0xd
 3632 07b7 05020000 		.4byte	.LASF89
 3633 07bb 01       		.byte	0x1
 3634 07bc 26       		.byte	0x26
 3635 07bd BC000000 		.4byte	0xbc
 3636 07c1 05       		.uleb128 0x5
 3637 07c2 03       		.byte	0x3
 3638 07c3 00000000 		.4byte	wdtIsrMask
 3639 07c7 19       		.uleb128 0x19
 3640 07c8 D7070000 		.4byte	0x7d7
 3641 07cc D7070000 		.4byte	0x7d7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 122


 3642 07d0 1A       		.uleb128 0x1a
 3643 07d1 FE000000 		.4byte	0xfe
 3644 07d5 02       		.byte	0x2
 3645 07d6 00       		.byte	0
 3646 07d7 1B       		.uleb128 0x1b
 3647 07d8 83000000 		.4byte	0x83
 3648 07dc 0D       		.uleb128 0xd
 3649 07dd 07000000 		.4byte	.LASF90
 3650 07e1 01       		.byte	0x1
 3651 07e2 2A       		.byte	0x2a
 3652 07e3 ED070000 		.4byte	0x7ed
 3653 07e7 05       		.uleb128 0x5
 3654 07e8 03       		.byte	0x3
 3655 07e9 00000000 		.4byte	counterIntMaskTbl
 3656 07ed 1B       		.uleb128 0x1b
 3657 07ee C7070000 		.4byte	0x7c7
 3658 07f2 19       		.uleb128 0x19
 3659 07f3 EC000000 		.4byte	0xec
 3660 07f7 02080000 		.4byte	0x802
 3661 07fb 1A       		.uleb128 0x1a
 3662 07fc FE000000 		.4byte	0xfe
 3663 0800 02       		.byte	0x2
 3664 0801 00       		.byte	0
 3665 0802 0D       		.uleb128 0xd
 3666 0803 19000000 		.4byte	.LASF91
 3667 0807 01       		.byte	0x1
 3668 0808 44       		.byte	0x44
 3669 0809 F2070000 		.4byte	0x7f2
 3670 080d 05       		.uleb128 0x5
 3671 080e 03       		.byte	0x3
 3672 080f 0C000000 		.4byte	cySysWdtCallback
 3673 0813 1C       		.uleb128 0x1c
 3674 0814 93040000 		.4byte	.LASF97
 3675 0818 04       		.byte	0x4
 3676 0819 D4       		.byte	0xd4
 3677 081a 83000000 		.4byte	0x83
 3678 081e 00       		.byte	0
 3679              		.section	.debug_abbrev,"",%progbits
 3680              	.Ldebug_abbrev0:
 3681 0000 01       		.uleb128 0x1
 3682 0001 11       		.uleb128 0x11
 3683 0002 01       		.byte	0x1
 3684 0003 25       		.uleb128 0x25
 3685 0004 0E       		.uleb128 0xe
 3686 0005 13       		.uleb128 0x13
 3687 0006 0B       		.uleb128 0xb
 3688 0007 03       		.uleb128 0x3
 3689 0008 0E       		.uleb128 0xe
 3690 0009 1B       		.uleb128 0x1b
 3691 000a 0E       		.uleb128 0xe
 3692 000b 55       		.uleb128 0x55
 3693 000c 17       		.uleb128 0x17
 3694 000d 11       		.uleb128 0x11
 3695 000e 01       		.uleb128 0x1
 3696 000f 10       		.uleb128 0x10
 3697 0010 17       		.uleb128 0x17
 3698 0011 00       		.byte	0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 123


 3699 0012 00       		.byte	0
 3700 0013 02       		.uleb128 0x2
 3701 0014 24       		.uleb128 0x24
 3702 0015 00       		.byte	0
 3703 0016 0B       		.uleb128 0xb
 3704 0017 0B       		.uleb128 0xb
 3705 0018 3E       		.uleb128 0x3e
 3706 0019 0B       		.uleb128 0xb
 3707 001a 03       		.uleb128 0x3
 3708 001b 0E       		.uleb128 0xe
 3709 001c 00       		.byte	0
 3710 001d 00       		.byte	0
 3711 001e 03       		.uleb128 0x3
 3712 001f 24       		.uleb128 0x24
 3713 0020 00       		.byte	0
 3714 0021 0B       		.uleb128 0xb
 3715 0022 0B       		.uleb128 0xb
 3716 0023 3E       		.uleb128 0x3e
 3717 0024 0B       		.uleb128 0xb
 3718 0025 03       		.uleb128 0x3
 3719 0026 08       		.uleb128 0x8
 3720 0027 00       		.byte	0
 3721 0028 00       		.byte	0
 3722 0029 04       		.uleb128 0x4
 3723 002a 16       		.uleb128 0x16
 3724 002b 00       		.byte	0
 3725 002c 03       		.uleb128 0x3
 3726 002d 0E       		.uleb128 0xe
 3727 002e 3A       		.uleb128 0x3a
 3728 002f 0B       		.uleb128 0xb
 3729 0030 3B       		.uleb128 0x3b
 3730 0031 05       		.uleb128 0x5
 3731 0032 49       		.uleb128 0x49
 3732 0033 13       		.uleb128 0x13
 3733 0034 00       		.byte	0
 3734 0035 00       		.byte	0
 3735 0036 05       		.uleb128 0x5
 3736 0037 35       		.uleb128 0x35
 3737 0038 00       		.byte	0
 3738 0039 49       		.uleb128 0x49
 3739 003a 13       		.uleb128 0x13
 3740 003b 00       		.byte	0
 3741 003c 00       		.byte	0
 3742 003d 06       		.uleb128 0x6
 3743 003e 0F       		.uleb128 0xf
 3744 003f 00       		.byte	0
 3745 0040 0B       		.uleb128 0xb
 3746 0041 0B       		.uleb128 0xb
 3747 0042 49       		.uleb128 0x49
 3748 0043 13       		.uleb128 0x13
 3749 0044 00       		.byte	0
 3750 0045 00       		.byte	0
 3751 0046 07       		.uleb128 0x7
 3752 0047 15       		.uleb128 0x15
 3753 0048 00       		.byte	0
 3754 0049 27       		.uleb128 0x27
 3755 004a 19       		.uleb128 0x19
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 124


 3756 004b 00       		.byte	0
 3757 004c 00       		.byte	0
 3758 004d 08       		.uleb128 0x8
 3759 004e 04       		.uleb128 0x4
 3760 004f 01       		.byte	0x1
 3761 0050 0B       		.uleb128 0xb
 3762 0051 0B       		.uleb128 0xb
 3763 0052 49       		.uleb128 0x49
 3764 0053 13       		.uleb128 0x13
 3765 0054 3A       		.uleb128 0x3a
 3766 0055 0B       		.uleb128 0xb
 3767 0056 3B       		.uleb128 0x3b
 3768 0057 0B       		.uleb128 0xb
 3769 0058 01       		.uleb128 0x1
 3770 0059 13       		.uleb128 0x13
 3771 005a 00       		.byte	0
 3772 005b 00       		.byte	0
 3773 005c 09       		.uleb128 0x9
 3774 005d 28       		.uleb128 0x28
 3775 005e 00       		.byte	0
 3776 005f 03       		.uleb128 0x3
 3777 0060 0E       		.uleb128 0xe
 3778 0061 1C       		.uleb128 0x1c
 3779 0062 0B       		.uleb128 0xb
 3780 0063 00       		.byte	0
 3781 0064 00       		.byte	0
 3782 0065 0A       		.uleb128 0xa
 3783 0066 16       		.uleb128 0x16
 3784 0067 00       		.byte	0
 3785 0068 03       		.uleb128 0x3
 3786 0069 0E       		.uleb128 0xe
 3787 006a 3A       		.uleb128 0x3a
 3788 006b 0B       		.uleb128 0xb
 3789 006c 3B       		.uleb128 0x3b
 3790 006d 0B       		.uleb128 0xb
 3791 006e 49       		.uleb128 0x49
 3792 006f 13       		.uleb128 0x13
 3793 0070 00       		.byte	0
 3794 0071 00       		.byte	0
 3795 0072 0B       		.uleb128 0xb
 3796 0073 2E       		.uleb128 0x2e
 3797 0074 00       		.byte	0
 3798 0075 3F       		.uleb128 0x3f
 3799 0076 19       		.uleb128 0x19
 3800 0077 03       		.uleb128 0x3
 3801 0078 0E       		.uleb128 0xe
 3802 0079 3A       		.uleb128 0x3a
 3803 007a 0B       		.uleb128 0xb
 3804 007b 3B       		.uleb128 0x3b
 3805 007c 0B       		.uleb128 0xb
 3806 007d 27       		.uleb128 0x27
 3807 007e 19       		.uleb128 0x19
 3808 007f 11       		.uleb128 0x11
 3809 0080 01       		.uleb128 0x1
 3810 0081 12       		.uleb128 0x12
 3811 0082 06       		.uleb128 0x6
 3812 0083 40       		.uleb128 0x40
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 125


 3813 0084 18       		.uleb128 0x18
 3814 0085 9742     		.uleb128 0x2117
 3815 0087 19       		.uleb128 0x19
 3816 0088 00       		.byte	0
 3817 0089 00       		.byte	0
 3818 008a 0C       		.uleb128 0xc
 3819 008b 2E       		.uleb128 0x2e
 3820 008c 01       		.byte	0x1
 3821 008d 3F       		.uleb128 0x3f
 3822 008e 19       		.uleb128 0x19
 3823 008f 03       		.uleb128 0x3
 3824 0090 0E       		.uleb128 0xe
 3825 0091 3A       		.uleb128 0x3a
 3826 0092 0B       		.uleb128 0xb
 3827 0093 3B       		.uleb128 0x3b
 3828 0094 0B       		.uleb128 0xb
 3829 0095 27       		.uleb128 0x27
 3830 0096 19       		.uleb128 0x19
 3831 0097 11       		.uleb128 0x11
 3832 0098 01       		.uleb128 0x1
 3833 0099 12       		.uleb128 0x12
 3834 009a 06       		.uleb128 0x6
 3835 009b 40       		.uleb128 0x40
 3836 009c 18       		.uleb128 0x18
 3837 009d 9642     		.uleb128 0x2116
 3838 009f 19       		.uleb128 0x19
 3839 00a0 01       		.uleb128 0x1
 3840 00a1 13       		.uleb128 0x13
 3841 00a2 00       		.byte	0
 3842 00a3 00       		.byte	0
 3843 00a4 0D       		.uleb128 0xd
 3844 00a5 34       		.uleb128 0x34
 3845 00a6 00       		.byte	0
 3846 00a7 03       		.uleb128 0x3
 3847 00a8 0E       		.uleb128 0xe
 3848 00a9 3A       		.uleb128 0x3a
 3849 00aa 0B       		.uleb128 0xb
 3850 00ab 3B       		.uleb128 0x3b
 3851 00ac 0B       		.uleb128 0xb
 3852 00ad 49       		.uleb128 0x49
 3853 00ae 13       		.uleb128 0x13
 3854 00af 02       		.uleb128 0x2
 3855 00b0 18       		.uleb128 0x18
 3856 00b1 00       		.byte	0
 3857 00b2 00       		.byte	0
 3858 00b3 0E       		.uleb128 0xe
 3859 00b4 2E       		.uleb128 0x2e
 3860 00b5 01       		.byte	0x1
 3861 00b6 3F       		.uleb128 0x3f
 3862 00b7 19       		.uleb128 0x19
 3863 00b8 03       		.uleb128 0x3
 3864 00b9 0E       		.uleb128 0xe
 3865 00ba 3A       		.uleb128 0x3a
 3866 00bb 0B       		.uleb128 0xb
 3867 00bc 3B       		.uleb128 0x3b
 3868 00bd 05       		.uleb128 0x5
 3869 00be 27       		.uleb128 0x27
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 126


 3870 00bf 19       		.uleb128 0x19
 3871 00c0 49       		.uleb128 0x49
 3872 00c1 13       		.uleb128 0x13
 3873 00c2 11       		.uleb128 0x11
 3874 00c3 01       		.uleb128 0x1
 3875 00c4 12       		.uleb128 0x12
 3876 00c5 06       		.uleb128 0x6
 3877 00c6 40       		.uleb128 0x40
 3878 00c7 18       		.uleb128 0x18
 3879 00c8 9642     		.uleb128 0x2116
 3880 00ca 19       		.uleb128 0x19
 3881 00cb 01       		.uleb128 0x1
 3882 00cc 13       		.uleb128 0x13
 3883 00cd 00       		.byte	0
 3884 00ce 00       		.byte	0
 3885 00cf 0F       		.uleb128 0xf
 3886 00d0 05       		.uleb128 0x5
 3887 00d1 00       		.byte	0
 3888 00d2 03       		.uleb128 0x3
 3889 00d3 0E       		.uleb128 0xe
 3890 00d4 3A       		.uleb128 0x3a
 3891 00d5 0B       		.uleb128 0xb
 3892 00d6 3B       		.uleb128 0x3b
 3893 00d7 05       		.uleb128 0x5
 3894 00d8 49       		.uleb128 0x49
 3895 00d9 13       		.uleb128 0x13
 3896 00da 02       		.uleb128 0x2
 3897 00db 18       		.uleb128 0x18
 3898 00dc 00       		.byte	0
 3899 00dd 00       		.byte	0
 3900 00de 10       		.uleb128 0x10
 3901 00df 34       		.uleb128 0x34
 3902 00e0 00       		.byte	0
 3903 00e1 03       		.uleb128 0x3
 3904 00e2 0E       		.uleb128 0xe
 3905 00e3 3A       		.uleb128 0x3a
 3906 00e4 0B       		.uleb128 0xb
 3907 00e5 3B       		.uleb128 0x3b
 3908 00e6 05       		.uleb128 0x5
 3909 00e7 49       		.uleb128 0x49
 3910 00e8 13       		.uleb128 0x13
 3911 00e9 02       		.uleb128 0x2
 3912 00ea 18       		.uleb128 0x18
 3913 00eb 00       		.byte	0
 3914 00ec 00       		.byte	0
 3915 00ed 11       		.uleb128 0x11
 3916 00ee 2E       		.uleb128 0x2e
 3917 00ef 00       		.byte	0
 3918 00f0 03       		.uleb128 0x3
 3919 00f1 0E       		.uleb128 0xe
 3920 00f2 3A       		.uleb128 0x3a
 3921 00f3 0B       		.uleb128 0xb
 3922 00f4 3B       		.uleb128 0x3b
 3923 00f5 05       		.uleb128 0x5
 3924 00f6 27       		.uleb128 0x27
 3925 00f7 19       		.uleb128 0x19
 3926 00f8 49       		.uleb128 0x49
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 127


 3927 00f9 13       		.uleb128 0x13
 3928 00fa 11       		.uleb128 0x11
 3929 00fb 01       		.uleb128 0x1
 3930 00fc 12       		.uleb128 0x12
 3931 00fd 06       		.uleb128 0x6
 3932 00fe 40       		.uleb128 0x40
 3933 00ff 18       		.uleb128 0x18
 3934 0100 9742     		.uleb128 0x2117
 3935 0102 19       		.uleb128 0x19
 3936 0103 00       		.byte	0
 3937 0104 00       		.byte	0
 3938 0105 12       		.uleb128 0x12
 3939 0106 2E       		.uleb128 0x2e
 3940 0107 01       		.byte	0x1
 3941 0108 3F       		.uleb128 0x3f
 3942 0109 19       		.uleb128 0x19
 3943 010a 03       		.uleb128 0x3
 3944 010b 0E       		.uleb128 0xe
 3945 010c 3A       		.uleb128 0x3a
 3946 010d 0B       		.uleb128 0xb
 3947 010e 3B       		.uleb128 0x3b
 3948 010f 05       		.uleb128 0x5
 3949 0110 27       		.uleb128 0x27
 3950 0111 19       		.uleb128 0x19
 3951 0112 11       		.uleb128 0x11
 3952 0113 01       		.uleb128 0x1
 3953 0114 12       		.uleb128 0x12
 3954 0115 06       		.uleb128 0x6
 3955 0116 40       		.uleb128 0x40
 3956 0117 18       		.uleb128 0x18
 3957 0118 9642     		.uleb128 0x2116
 3958 011a 19       		.uleb128 0x19
 3959 011b 01       		.uleb128 0x1
 3960 011c 13       		.uleb128 0x13
 3961 011d 00       		.byte	0
 3962 011e 00       		.byte	0
 3963 011f 13       		.uleb128 0x13
 3964 0120 2E       		.uleb128 0x2e
 3965 0121 01       		.byte	0x1
 3966 0122 3F       		.uleb128 0x3f
 3967 0123 19       		.uleb128 0x19
 3968 0124 03       		.uleb128 0x3
 3969 0125 0E       		.uleb128 0xe
 3970 0126 3A       		.uleb128 0x3a
 3971 0127 0B       		.uleb128 0xb
 3972 0128 3B       		.uleb128 0x3b
 3973 0129 05       		.uleb128 0x5
 3974 012a 27       		.uleb128 0x27
 3975 012b 19       		.uleb128 0x19
 3976 012c 49       		.uleb128 0x49
 3977 012d 13       		.uleb128 0x13
 3978 012e 11       		.uleb128 0x11
 3979 012f 01       		.uleb128 0x1
 3980 0130 12       		.uleb128 0x12
 3981 0131 06       		.uleb128 0x6
 3982 0132 40       		.uleb128 0x40
 3983 0133 18       		.uleb128 0x18
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 128


 3984 0134 9742     		.uleb128 0x2117
 3985 0136 19       		.uleb128 0x19
 3986 0137 01       		.uleb128 0x1
 3987 0138 13       		.uleb128 0x13
 3988 0139 00       		.byte	0
 3989 013a 00       		.byte	0
 3990 013b 14       		.uleb128 0x14
 3991 013c 2E       		.uleb128 0x2e
 3992 013d 00       		.byte	0
 3993 013e 3F       		.uleb128 0x3f
 3994 013f 19       		.uleb128 0x19
 3995 0140 03       		.uleb128 0x3
 3996 0141 0E       		.uleb128 0xe
 3997 0142 3A       		.uleb128 0x3a
 3998 0143 0B       		.uleb128 0xb
 3999 0144 3B       		.uleb128 0x3b
 4000 0145 05       		.uleb128 0x5
 4001 0146 27       		.uleb128 0x27
 4002 0147 19       		.uleb128 0x19
 4003 0148 49       		.uleb128 0x49
 4004 0149 13       		.uleb128 0x13
 4005 014a 11       		.uleb128 0x11
 4006 014b 01       		.uleb128 0x1
 4007 014c 12       		.uleb128 0x12
 4008 014d 06       		.uleb128 0x6
 4009 014e 40       		.uleb128 0x40
 4010 014f 18       		.uleb128 0x18
 4011 0150 9742     		.uleb128 0x2117
 4012 0152 19       		.uleb128 0x19
 4013 0153 00       		.byte	0
 4014 0154 00       		.byte	0
 4015 0155 15       		.uleb128 0x15
 4016 0156 2E       		.uleb128 0x2e
 4017 0157 01       		.byte	0x1
 4018 0158 3F       		.uleb128 0x3f
 4019 0159 19       		.uleb128 0x19
 4020 015a 03       		.uleb128 0x3
 4021 015b 0E       		.uleb128 0xe
 4022 015c 3A       		.uleb128 0x3a
 4023 015d 0B       		.uleb128 0xb
 4024 015e 3B       		.uleb128 0x3b
 4025 015f 05       		.uleb128 0x5
 4026 0160 27       		.uleb128 0x27
 4027 0161 19       		.uleb128 0x19
 4028 0162 11       		.uleb128 0x11
 4029 0163 01       		.uleb128 0x1
 4030 0164 12       		.uleb128 0x12
 4031 0165 06       		.uleb128 0x6
 4032 0166 40       		.uleb128 0x40
 4033 0167 18       		.uleb128 0x18
 4034 0168 9742     		.uleb128 0x2117
 4035 016a 19       		.uleb128 0x19
 4036 016b 01       		.uleb128 0x1
 4037 016c 13       		.uleb128 0x13
 4038 016d 00       		.byte	0
 4039 016e 00       		.byte	0
 4040 016f 16       		.uleb128 0x16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 129


 4041 0170 2E       		.uleb128 0x2e
 4042 0171 00       		.byte	0
 4043 0172 3F       		.uleb128 0x3f
 4044 0173 19       		.uleb128 0x19
 4045 0174 03       		.uleb128 0x3
 4046 0175 0E       		.uleb128 0xe
 4047 0176 3A       		.uleb128 0x3a
 4048 0177 0B       		.uleb128 0xb
 4049 0178 3B       		.uleb128 0x3b
 4050 0179 05       		.uleb128 0x5
 4051 017a 27       		.uleb128 0x27
 4052 017b 19       		.uleb128 0x19
 4053 017c 11       		.uleb128 0x11
 4054 017d 01       		.uleb128 0x1
 4055 017e 12       		.uleb128 0x12
 4056 017f 06       		.uleb128 0x6
 4057 0180 40       		.uleb128 0x40
 4058 0181 18       		.uleb128 0x18
 4059 0182 9642     		.uleb128 0x2116
 4060 0184 19       		.uleb128 0x19
 4061 0185 00       		.byte	0
 4062 0186 00       		.byte	0
 4063 0187 17       		.uleb128 0x17
 4064 0188 2E       		.uleb128 0x2e
 4065 0189 01       		.byte	0x1
 4066 018a 03       		.uleb128 0x3
 4067 018b 0E       		.uleb128 0xe
 4068 018c 3A       		.uleb128 0x3a
 4069 018d 0B       		.uleb128 0xb
 4070 018e 3B       		.uleb128 0x3b
 4071 018f 05       		.uleb128 0x5
 4072 0190 27       		.uleb128 0x27
 4073 0191 19       		.uleb128 0x19
 4074 0192 11       		.uleb128 0x11
 4075 0193 01       		.uleb128 0x1
 4076 0194 12       		.uleb128 0x12
 4077 0195 06       		.uleb128 0x6
 4078 0196 40       		.uleb128 0x40
 4079 0197 18       		.uleb128 0x18
 4080 0198 9642     		.uleb128 0x2116
 4081 019a 19       		.uleb128 0x19
 4082 019b 01       		.uleb128 0x1
 4083 019c 13       		.uleb128 0x13
 4084 019d 00       		.byte	0
 4085 019e 00       		.byte	0
 4086 019f 18       		.uleb128 0x18
 4087 01a0 2E       		.uleb128 0x2e
 4088 01a1 00       		.byte	0
 4089 01a2 03       		.uleb128 0x3
 4090 01a3 0E       		.uleb128 0xe
 4091 01a4 3A       		.uleb128 0x3a
 4092 01a5 0B       		.uleb128 0xb
 4093 01a6 3B       		.uleb128 0x3b
 4094 01a7 05       		.uleb128 0x5
 4095 01a8 27       		.uleb128 0x27
 4096 01a9 19       		.uleb128 0x19
 4097 01aa 11       		.uleb128 0x11
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 130


 4098 01ab 01       		.uleb128 0x1
 4099 01ac 12       		.uleb128 0x12
 4100 01ad 06       		.uleb128 0x6
 4101 01ae 40       		.uleb128 0x40
 4102 01af 18       		.uleb128 0x18
 4103 01b0 9642     		.uleb128 0x2116
 4104 01b2 19       		.uleb128 0x19
 4105 01b3 00       		.byte	0
 4106 01b4 00       		.byte	0
 4107 01b5 19       		.uleb128 0x19
 4108 01b6 01       		.uleb128 0x1
 4109 01b7 01       		.byte	0x1
 4110 01b8 49       		.uleb128 0x49
 4111 01b9 13       		.uleb128 0x13
 4112 01ba 01       		.uleb128 0x1
 4113 01bb 13       		.uleb128 0x13
 4114 01bc 00       		.byte	0
 4115 01bd 00       		.byte	0
 4116 01be 1A       		.uleb128 0x1a
 4117 01bf 21       		.uleb128 0x21
 4118 01c0 00       		.byte	0
 4119 01c1 49       		.uleb128 0x49
 4120 01c2 13       		.uleb128 0x13
 4121 01c3 2F       		.uleb128 0x2f
 4122 01c4 0B       		.uleb128 0xb
 4123 01c5 00       		.byte	0
 4124 01c6 00       		.byte	0
 4125 01c7 1B       		.uleb128 0x1b
 4126 01c8 26       		.uleb128 0x26
 4127 01c9 00       		.byte	0
 4128 01ca 49       		.uleb128 0x49
 4129 01cb 13       		.uleb128 0x13
 4130 01cc 00       		.byte	0
 4131 01cd 00       		.byte	0
 4132 01ce 1C       		.uleb128 0x1c
 4133 01cf 34       		.uleb128 0x34
 4134 01d0 00       		.byte	0
 4135 01d1 03       		.uleb128 0x3
 4136 01d2 0E       		.uleb128 0xe
 4137 01d3 3A       		.uleb128 0x3a
 4138 01d4 0B       		.uleb128 0xb
 4139 01d5 3B       		.uleb128 0x3b
 4140 01d6 0B       		.uleb128 0xb
 4141 01d7 49       		.uleb128 0x49
 4142 01d8 13       		.uleb128 0x13
 4143 01d9 3F       		.uleb128 0x3f
 4144 01da 19       		.uleb128 0x19
 4145 01db 3C       		.uleb128 0x3c
 4146 01dc 19       		.uleb128 0x19
 4147 01dd 00       		.byte	0
 4148 01de 00       		.byte	0
 4149 01df 00       		.byte	0
 4150              		.section	.debug_aranges,"",%progbits
 4151 0000 34010000 		.4byte	0x134
 4152 0004 0200     		.2byte	0x2
 4153 0006 00000000 		.4byte	.Ldebug_info0
 4154 000a 04       		.byte	0x4
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 131


 4155 000b 00       		.byte	0
 4156 000c 0000     		.2byte	0
 4157 000e 0000     		.2byte	0
 4158 0010 00000000 		.4byte	.LFB0
 4159 0014 1C000000 		.4byte	.LFE0-.LFB0
 4160 0018 00000000 		.4byte	.LFB1
 4161 001c 4C000000 		.4byte	.LFE1-.LFB1
 4162 0020 00000000 		.4byte	.LFB2
 4163 0024 40000000 		.4byte	.LFE2-.LFB2
 4164 0028 00000000 		.4byte	.LFB3
 4165 002c 20000000 		.4byte	.LFE3-.LFB3
 4166 0030 00000000 		.4byte	.LFB4
 4167 0034 58010000 		.4byte	.LFE4-.LFB4
 4168 0038 00000000 		.4byte	.LFB5
 4169 003c 1C000000 		.4byte	.LFE5-.LFB5
 4170 0040 00000000 		.4byte	.LFB6
 4171 0044 34000000 		.4byte	.LFE6-.LFB6
 4172 0048 00000000 		.4byte	.LFB7
 4173 004c 20000000 		.4byte	.LFE7-.LFB7
 4174 0050 00000000 		.4byte	.LFB8
 4175 0054 50000000 		.4byte	.LFE8-.LFB8
 4176 0058 00000000 		.4byte	.LFB9
 4177 005c 34000000 		.4byte	.LFE9-.LFB9
 4178 0060 00000000 		.4byte	.LFB10
 4179 0064 5C000000 		.4byte	.LFE10-.LFB10
 4180 0068 00000000 		.4byte	.LFB11
 4181 006c 24000000 		.4byte	.LFE11-.LFB11
 4182 0070 00000000 		.4byte	.LFB12
 4183 0074 6C000000 		.4byte	.LFE12-.LFB12
 4184 0078 00000000 		.4byte	.LFB13
 4185 007c 44000000 		.4byte	.LFE13-.LFB13
 4186 0080 00000000 		.4byte	.LFB14
 4187 0084 64000000 		.4byte	.LFE14-.LFB14
 4188 0088 00000000 		.4byte	.LFB15
 4189 008c 6C000000 		.4byte	.LFE15-.LFB15
 4190 0090 00000000 		.4byte	.LFB16
 4191 0094 58000000 		.4byte	.LFE16-.LFB16
 4192 0098 00000000 		.4byte	.LFB17
 4193 009c 1C000000 		.4byte	.LFE17-.LFB17
 4194 00a0 00000000 		.4byte	.LFB18
 4195 00a4 6C000000 		.4byte	.LFE18-.LFB18
 4196 00a8 00000000 		.4byte	.LFB19
 4197 00ac 48000000 		.4byte	.LFE19-.LFB19
 4198 00b0 00000000 		.4byte	.LFB20
 4199 00b4 18000000 		.4byte	.LFE20-.LFB20
 4200 00b8 00000000 		.4byte	.LFB21
 4201 00bc 40000000 		.4byte	.LFE21-.LFB21
 4202 00c0 00000000 		.4byte	.LFB22
 4203 00c4 54000000 		.4byte	.LFE22-.LFB22
 4204 00c8 00000000 		.4byte	.LFB23
 4205 00cc 1C000000 		.4byte	.LFE23-.LFB23
 4206 00d0 00000000 		.4byte	.LFB24
 4207 00d4 70000000 		.4byte	.LFE24-.LFB24
 4208 00d8 00000000 		.4byte	.LFB25
 4209 00dc 34000000 		.4byte	.LFE25-.LFB25
 4210 00e0 00000000 		.4byte	.LFB26
 4211 00e4 40000000 		.4byte	.LFE26-.LFB26
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 132


 4212 00e8 00000000 		.4byte	.LFB27
 4213 00ec 34000000 		.4byte	.LFE27-.LFB27
 4214 00f0 00000000 		.4byte	.LFB28
 4215 00f4 50000000 		.4byte	.LFE28-.LFB28
 4216 00f8 00000000 		.4byte	.LFB29
 4217 00fc 3C000000 		.4byte	.LFE29-.LFB29
 4218 0100 00000000 		.4byte	.LFB30
 4219 0104 EC000000 		.4byte	.LFE30-.LFB30
 4220 0108 00000000 		.4byte	.LFB31
 4221 010c 8A000000 		.4byte	.LFE31-.LFB31
 4222 0110 00000000 		.4byte	.LFB32
 4223 0114 98000000 		.4byte	.LFE32-.LFB32
 4224 0118 00000000 		.4byte	.LFB33
 4225 011c 3C000000 		.4byte	.LFE33-.LFB33
 4226 0120 00000000 		.4byte	.LFB34
 4227 0124 68000000 		.4byte	.LFE34-.LFB34
 4228 0128 00000000 		.4byte	.LFB35
 4229 012c B0000000 		.4byte	.LFE35-.LFB35
 4230 0130 00000000 		.4byte	0
 4231 0134 00000000 		.4byte	0
 4232              		.section	.debug_ranges,"",%progbits
 4233              	.Ldebug_ranges0:
 4234 0000 00000000 		.4byte	.LFB0
 4235 0004 1C000000 		.4byte	.LFE0
 4236 0008 00000000 		.4byte	.LFB1
 4237 000c 4C000000 		.4byte	.LFE1
 4238 0010 00000000 		.4byte	.LFB2
 4239 0014 40000000 		.4byte	.LFE2
 4240 0018 00000000 		.4byte	.LFB3
 4241 001c 20000000 		.4byte	.LFE3
 4242 0020 00000000 		.4byte	.LFB4
 4243 0024 58010000 		.4byte	.LFE4
 4244 0028 00000000 		.4byte	.LFB5
 4245 002c 1C000000 		.4byte	.LFE5
 4246 0030 00000000 		.4byte	.LFB6
 4247 0034 34000000 		.4byte	.LFE6
 4248 0038 00000000 		.4byte	.LFB7
 4249 003c 20000000 		.4byte	.LFE7
 4250 0040 00000000 		.4byte	.LFB8
 4251 0044 50000000 		.4byte	.LFE8
 4252 0048 00000000 		.4byte	.LFB9
 4253 004c 34000000 		.4byte	.LFE9
 4254 0050 00000000 		.4byte	.LFB10
 4255 0054 5C000000 		.4byte	.LFE10
 4256 0058 00000000 		.4byte	.LFB11
 4257 005c 24000000 		.4byte	.LFE11
 4258 0060 00000000 		.4byte	.LFB12
 4259 0064 6C000000 		.4byte	.LFE12
 4260 0068 00000000 		.4byte	.LFB13
 4261 006c 44000000 		.4byte	.LFE13
 4262 0070 00000000 		.4byte	.LFB14
 4263 0074 64000000 		.4byte	.LFE14
 4264 0078 00000000 		.4byte	.LFB15
 4265 007c 6C000000 		.4byte	.LFE15
 4266 0080 00000000 		.4byte	.LFB16
 4267 0084 58000000 		.4byte	.LFE16
 4268 0088 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 133


 4269 008c 1C000000 		.4byte	.LFE17
 4270 0090 00000000 		.4byte	.LFB18
 4271 0094 6C000000 		.4byte	.LFE18
 4272 0098 00000000 		.4byte	.LFB19
 4273 009c 48000000 		.4byte	.LFE19
 4274 00a0 00000000 		.4byte	.LFB20
 4275 00a4 18000000 		.4byte	.LFE20
 4276 00a8 00000000 		.4byte	.LFB21
 4277 00ac 40000000 		.4byte	.LFE21
 4278 00b0 00000000 		.4byte	.LFB22
 4279 00b4 54000000 		.4byte	.LFE22
 4280 00b8 00000000 		.4byte	.LFB23
 4281 00bc 1C000000 		.4byte	.LFE23
 4282 00c0 00000000 		.4byte	.LFB24
 4283 00c4 70000000 		.4byte	.LFE24
 4284 00c8 00000000 		.4byte	.LFB25
 4285 00cc 34000000 		.4byte	.LFE25
 4286 00d0 00000000 		.4byte	.LFB26
 4287 00d4 40000000 		.4byte	.LFE26
 4288 00d8 00000000 		.4byte	.LFB27
 4289 00dc 34000000 		.4byte	.LFE27
 4290 00e0 00000000 		.4byte	.LFB28
 4291 00e4 50000000 		.4byte	.LFE28
 4292 00e8 00000000 		.4byte	.LFB29
 4293 00ec 3C000000 		.4byte	.LFE29
 4294 00f0 00000000 		.4byte	.LFB30
 4295 00f4 EC000000 		.4byte	.LFE30
 4296 00f8 00000000 		.4byte	.LFB31
 4297 00fc 8A000000 		.4byte	.LFE31
 4298 0100 00000000 		.4byte	.LFB32
 4299 0104 98000000 		.4byte	.LFE32
 4300 0108 00000000 		.4byte	.LFB33
 4301 010c 3C000000 		.4byte	.LFE33
 4302 0110 00000000 		.4byte	.LFB34
 4303 0114 68000000 		.4byte	.LFE34
 4304 0118 00000000 		.4byte	.LFB35
 4305 011c B0000000 		.4byte	.LFE35
 4306 0120 00000000 		.4byte	0
 4307 0124 00000000 		.4byte	0
 4308              		.section	.debug_line,"",%progbits
 4309              	.Ldebug_line0:
 4310 0000 00050000 		.section	.debug_str,"MS",%progbits,1
 4310      02005C00 
 4310      00000201 
 4310      FB0E0D00 
 4310      01010101 
 4311              	.LASF10:
 4312 0000 75696E74 		.ascii	"uint16\000"
 4312      313600
 4313              	.LASF90:
 4314 0007 636F756E 		.ascii	"counterIntMaskTbl\000"
 4314      74657249 
 4314      6E744D61 
 4314      736B5462 
 4314      6C00
 4315              	.LASF91:
 4316 0019 63795379 		.ascii	"cySysWdtCallback\000"
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 134


 4316      73576474 
 4316      43616C6C 
 4316      6261636B 
 4316      00
 4317              	.LASF42:
 4318 002a 43795379 		.ascii	"CySysWdtSetMode\000"
 4318      73576474 
 4318      5365744D 
 4318      6F646500 
 4319              	.LASF38:
 4320 003a 43795379 		.ascii	"CySysWdtUnlock\000"
 4320      73576474 
 4320      556E6C6F 
 4320      636B00
 4321              	.LASF77:
 4322 0049 43795379 		.ascii	"CySysWatchdogFeed\000"
 4322      73576174 
 4322      6368646F 
 4322      67466565 
 4322      6400
 4323              	.LASF41:
 4324 005b 636F756E 		.ascii	"counterNum\000"
 4324      7465724E 
 4324      756D00
 4325              	.LASF95:
 4326 0066 43795379 		.ascii	"CySysClkLfclkPosedgeCatch\000"
 4326      73436C6B 
 4326      4C66636C 
 4326      6B506F73 
 4326      65646765 
 4327              	.LASF60:
 4328 0080 43795379 		.ascii	"CySysWdtGetCascade\000"
 4328      73576474 
 4328      47657443 
 4328      61736361 
 4328      646500
 4329              	.LASF24:
 4330 0093 43795379 		.ascii	"CySysClkIloStartMeasurement\000"
 4330      73436C6B 
 4330      496C6F53 
 4330      74617274 
 4330      4D656173 
 4331              	.LASF86:
 4332 00af 6C66636C 		.ascii	"lfclkPosedgeWdtCounter0Enabled\000"
 4332      6B506F73 
 4332      65646765 
 4332      57647443 
 4332      6F756E74 
 4333              	.LASF7:
 4334 00ce 6C6F6E67 		.ascii	"long long unsigned int\000"
 4334      206C6F6E 
 4334      6720756E 
 4334      7369676E 
 4334      65642069 
 4335              	.LASF6:
 4336 00e5 6C6F6E67 		.ascii	"long long int\000"
 4336      206C6F6E 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 135


 4336      6720696E 
 4336      7400
 4337              	.LASF0:
 4338 00f3 7369676E 		.ascii	"signed char\000"
 4338      65642063 
 4338      68617200 
 4339              	.LASF70:
 4340 00ff 66756E63 		.ascii	"function\000"
 4340      74696F6E 
 4340      00
 4341              	.LASF28:
 4342 0108 696E7465 		.ascii	"interruptState\000"
 4342      72727570 
 4342      74537461 
 4342      746500
 4343              	.LASF20:
 4344 0117 63795764 		.ascii	"cyWdtCallback\000"
 4344      7443616C 
 4344      6C626163 
 4344      6B00
 4345              	.LASF19:
 4346 0125 63795F73 		.ascii	"cy_sys_timer_delaytype_enum\000"
 4346      79735F74 
 4346      696D6572 
 4346      5F64656C 
 4346      61797479 
 4347              	.LASF59:
 4348 0141 62697473 		.ascii	"bits\000"
 4348      00
 4349              	.LASF4:
 4350 0146 6C6F6E67 		.ascii	"long int\000"
 4350      20696E74 
 4350      00
 4351              	.LASF57:
 4352 014f 72656756 		.ascii	"regValue\000"
 4352      616C7565 
 4352      00
 4353              	.LASF9:
 4354 0158 75696E74 		.ascii	"uint8\000"
 4354      3800
 4355              	.LASF47:
 4356 015e 656E6162 		.ascii	"enable\000"
 4356      6C6500
 4357              	.LASF13:
 4358 0165 646F7562 		.ascii	"double\000"
 4358      6C6500
 4359              	.LASF27:
 4360 016c 636F6D70 		.ascii	"compensatedCycles\000"
 4360      656E7361 
 4360      74656443 
 4360      79636C65 
 4360      7300
 4361              	.LASF34:
 4362 017e 43795379 		.ascii	"CySysClkIloStop\000"
 4362      73436C6B 
 4362      496C6F53 
 4362      746F7000 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 136


 4363              	.LASF29:
 4364 018e 696C6F43 		.ascii	"iloCompensatedCycles\000"
 4364      6F6D7065 
 4364      6E736174 
 4364      65644379 
 4364      636C6573 
 4365              	.LASF68:
 4366 01a3 636F756E 		.ascii	"countersMask\000"
 4366      74657273 
 4366      4D61736B 
 4366      00
 4367              	.LASF11:
 4368 01b0 75696E74 		.ascii	"uint32\000"
 4368      333200
 4369              	.LASF25:
 4370 01b7 43795379 		.ascii	"CySysClkIloStopMeasurement\000"
 4370      73436C6B 
 4370      496C6F53 
 4370      746F704D 
 4370      65617375 
 4371              	.LASF71:
 4372 01d2 70726576 		.ascii	"prevCallback\000"
 4372      43616C6C 
 4372      6261636B 
 4372      00
 4373              	.LASF55:
 4374 01df 43795379 		.ascii	"CySysWdtSetMatch\000"
 4374      73576474 
 4374      5365744D 
 4374      61746368 
 4374      00
 4375              	.LASF54:
 4376 01f0 636F756E 		.ascii	"countersEnableStatus\000"
 4376      74657273 
 4376      456E6162 
 4376      6C655374 
 4376      61747573 
 4377              	.LASF89:
 4378 0205 77647449 		.ascii	"wdtIsrMask\000"
 4378      73724D61 
 4378      736B00
 4379              	.LASF49:
 4380 0210 43795379 		.ascii	"CySysWdtEnable\000"
 4380      73576474 
 4380      456E6162 
 4380      6C6500
 4381              	.LASF69:
 4382 021f 43795379 		.ascii	"CySysWdtSetInterruptCallback\000"
 4382      73576474 
 4382      53657449 
 4382      6E746572 
 4382      72757074 
 4383              	.LASF50:
 4384 023c 636F756E 		.ascii	"counterMask\000"
 4384      7465724D 
 4384      61736B00 
 4385              	.LASF48:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 137


 4386 0248 43795379 		.ascii	"CySysWdtGetClearOnMatch\000"
 4386      73576474 
 4386      47657443 
 4386      6C656172 
 4386      4F6E4D61 
 4387              	.LASF8:
 4388 0260 756E7369 		.ascii	"unsigned int\000"
 4388      676E6564 
 4388      20696E74 
 4388      00
 4389              	.LASF78:
 4390 026d 66697273 		.ascii	"firstCount\000"
 4390      74436F75 
 4390      6E7400
 4391              	.LASF73:
 4392 0278 72657443 		.ascii	"retCallback\000"
 4392      616C6C62 
 4392      61636B00 
 4393              	.LASF26:
 4394 0284 64657369 		.ascii	"desiredDelay\000"
 4394      72656444 
 4394      656C6179 
 4394      00
 4395              	.LASF5:
 4396 0291 6C6F6E67 		.ascii	"long unsigned int\000"
 4396      20756E73 
 4396      69676E65 
 4396      6420696E 
 4396      7400
 4397              	.LASF83:
 4398 02a3 6D617463 		.ascii	"matchValue\000"
 4398      6856616C 
 4398      756500
 4399              	.LASF96:
 4400 02ae 43795379 		.ascii	"CySysClkLfclkPosedgeRestore\000"
 4400      73436C6B 
 4400      4C66636C 
 4400      6B506F73 
 4400      65646765 
 4401              	.LASF74:
 4402 02ca 43795379 		.ascii	"CySysWdtEnableCounterIsr\000"
 4402      73576474 
 4402      456E6162 
 4402      6C65436F 
 4402      756E7465 
 4403              	.LASF3:
 4404 02e3 73686F72 		.ascii	"short unsigned int\000"
 4404      7420756E 
 4404      7369676E 
 4404      65642069 
 4404      6E7400
 4405              	.LASF94:
 4406 02f6 433A5C55 		.ascii	"C:\\Users\\Rafael\\Documents\\PSoC Creator\\SD Card"
 4406      73657273 
 4406      5C526166 
 4406      61656C5C 
 4406      446F6375 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 138


 4407 0324 5C534443 		.ascii	"\\SDCard_Demo.cydsn\000"
 4407      6172645F 
 4407      44656D6F 
 4407      2E637964 
 4407      736E00
 4408              	.LASF40:
 4409 0337 43795379 		.ascii	"CySysWdtGetEnabledStatus\000"
 4409      73576474 
 4409      47657445 
 4409      6E61626C 
 4409      65645374 
 4410              	.LASF72:
 4411 0350 43795379 		.ascii	"CySysWdtGetInterruptCallback\000"
 4411      73576474 
 4411      47657449 
 4411      6E746572 
 4411      72757074 
 4412              	.LASF76:
 4413 036d 43795379 		.ascii	"CySysWdtIsr\000"
 4413      73576474 
 4413      49737200 
 4414              	.LASF23:
 4415 0379 43795379 		.ascii	"CySysClkIloStart\000"
 4415      73436C6B 
 4415      496C6F53 
 4415      74617274 
 4415      00
 4416              	.LASF58:
 4417 038a 43795379 		.ascii	"CySysWdtSetToggleBit\000"
 4417      73576474 
 4417      53657454 
 4417      6F67676C 
 4417      65426974 
 4418              	.LASF92:
 4419 039f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4419      43313120 
 4419      352E342E 
 4419      31203230 
 4419      31363036 
 4420 03d2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4420      20726576 
 4420      6973696F 
 4420      6E203233 
 4420      37373135 
 4421 0405 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4421      66756E63 
 4421      74696F6E 
 4421      2D736563 
 4421      74696F6E 
 4422              	.LASF16:
 4423 042d 72656733 		.ascii	"reg32\000"
 4423      3200
 4424              	.LASF85:
 4425 0433 746D7056 		.ascii	"tmpValue\000"
 4425      616C7565 
 4425      00
 4426              	.LASF33:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 139


 4427 043c 72657475 		.ascii	"returnStatus\000"
 4427      726E5374 
 4427      61747573 
 4427      00
 4428              	.LASF22:
 4429 0449 73697A65 		.ascii	"sizetype\000"
 4429      74797065 
 4429      00
 4430              	.LASF21:
 4431 0452 6C6F6E67 		.ascii	"long double\000"
 4431      20646F75 
 4431      626C6500 
 4432              	.LASF62:
 4433 045e 43795379 		.ascii	"CySysWdtGetMatch\000"
 4433      73576474 
 4433      4765744D 
 4433      61746368 
 4433      00
 4434              	.LASF56:
 4435 046f 6D617463 		.ascii	"match\000"
 4435      6800
 4436              	.LASF17:
 4437 0475 43595F53 		.ascii	"CY_SYS_TIMER_WAIT\000"
 4437      59535F54 
 4437      494D4552 
 4437      5F574149 
 4437      5400
 4438              	.LASF32:
 4439 0487 63686563 		.ascii	"checkStatus\000"
 4439      6B537461 
 4439      74757300 
 4440              	.LASF97:
 4441 0493 63796465 		.ascii	"cydelayFreqHz\000"
 4441      6C617946 
 4441      72657148 
 4441      7A00
 4442              	.LASF67:
 4443 04a1 43795379 		.ascii	"CySysWdtResetCounters\000"
 4443      73576474 
 4443      52657365 
 4443      74436F75 
 4443      6E746572 
 4444              	.LASF65:
 4445 04b7 43795379 		.ascii	"CySysWdtClearInterrupt\000"
 4445      73576474 
 4445      436C6561 
 4445      72496E74 
 4445      65727275 
 4446              	.LASF12:
 4447 04ce 666C6F61 		.ascii	"float\000"
 4447      7400
 4448              	.LASF84:
 4449 04d4 43795379 		.ascii	"CySysTimerDelayUntilMatch\000"
 4449      7354696D 
 4449      65724465 
 4449      6C617955 
 4449      6E74696C 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 140


 4450              	.LASF80:
 4451 04ee 43795379 		.ascii	"CySysTimerDelay\000"
 4451      7354696D 
 4451      65724465 
 4451      6C617900 
 4452              	.LASF37:
 4453 04fe 43795379 		.ascii	"CySysWdtLocked\000"
 4453      73576474 
 4453      4C6F636B 
 4453      656400
 4454              	.LASF1:
 4455 050d 756E7369 		.ascii	"unsigned char\000"
 4455      676E6564 
 4455      20636861 
 4455      7200
 4456              	.LASF31:
 4457 051b 636F6D70 		.ascii	"compensateRunningStatus\000"
 4457      656E7361 
 4457      74655275 
 4457      6E6E696E 
 4457      67537461 
 4458              	.LASF79:
 4459 0533 6C66636C 		.ascii	"lfclkPosedgeEnabledWdtCounter\000"
 4459      6B506F73 
 4459      65646765 
 4459      456E6162 
 4459      6C656457 
 4460              	.LASF82:
 4461 0551 64656C61 		.ascii	"delay\000"
 4461      7900
 4462              	.LASF2:
 4463 0557 73686F72 		.ascii	"short int\000"
 4463      7420696E 
 4463      7400
 4464              	.LASF81:
 4465 0561 64656C61 		.ascii	"delayType\000"
 4465      79547970 
 4465      6500
 4466              	.LASF51:
 4467 056b 43795379 		.ascii	"CySysWdtDisable\000"
 4467      73576474 
 4467      44697361 
 4467      626C6500 
 4468              	.LASF36:
 4469 057b 43795379 		.ascii	"CySysClkIloEnabled\000"
 4469      73436C6B 
 4469      496C6F45 
 4469      6E61626C 
 4469      656400
 4470              	.LASF64:
 4471 058e 43795379 		.ascii	"CySysWdtGetInterruptSource\000"
 4471      73576474 
 4471      47657449 
 4471      6E746572 
 4471      72757074 
 4472              	.LASF93:
 4473 05a9 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLFClk.c\000"
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 141


 4473      72617465 
 4473      645F536F 
 4473      75726365 
 4473      5C50536F 
 4474              	.LASF75:
 4475 05ca 43795379 		.ascii	"CySysWdtDisableCounterIsr\000"
 4475      73576474 
 4475      44697361 
 4475      626C6543 
 4475      6F756E74 
 4476              	.LASF14:
 4477 05e4 63686172 		.ascii	"char\000"
 4477      00
 4478              	.LASF43:
 4479 05e9 6D6F6465 		.ascii	"mode\000"
 4479      00
 4480              	.LASF63:
 4481 05ee 43795379 		.ascii	"CySysWdtGetCount\000"
 4481      73576474 
 4481      47657443 
 4481      6F756E74 
 4481      00
 4482              	.LASF35:
 4483 05ff 43795379 		.ascii	"CySysWdtLock\000"
 4483      73576474 
 4483      4C6F636B 
 4483      00
 4484              	.LASF88:
 4485 060c 64697361 		.ascii	"disableServicedIsr\000"
 4485      626C6553 
 4485      65727669 
 4485      63656449 
 4485      737200
 4486              	.LASF46:
 4487 061f 43795379 		.ascii	"CySysWdtSetClearOnMatch\000"
 4487      73576474 
 4487      53657443 
 4487      6C656172 
 4487      4F6E4D61 
 4488              	.LASF52:
 4489 0637 43795379 		.ascii	"CySysWdtSetCascade\000"
 4489      73576474 
 4489      53657443 
 4489      61736361 
 4489      646500
 4490              	.LASF45:
 4491 064a 43795379 		.ascii	"CySysWdtGetMode\000"
 4491      73576474 
 4491      4765744D 
 4491      6F646500 
 4492              	.LASF30:
 4493 065a 64657369 		.ascii	"desiredDelayInCounts\000"
 4493      72656444 
 4493      656C6179 
 4493      496E436F 
 4493      756E7473 
 4494              	.LASF44:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccjF10De.s 			page 142


 4495 066f 636F6E66 		.ascii	"configRegValue\000"
 4495      69675265 
 4495      6756616C 
 4495      756500
 4496              	.LASF66:
 4497 067e 7764744C 		.ascii	"wdtLockState\000"
 4497      6F636B53 
 4497      74617465 
 4497      00
 4498              	.LASF87:
 4499 068b 6C66636C 		.ascii	"lfclkPosedgeWdtCounter0Mode\000"
 4499      6B506F73 
 4499      65646765 
 4499      57647443 
 4499      6F756E74 
 4500              	.LASF53:
 4501 06a7 63617363 		.ascii	"cascadeMask\000"
 4501      6164654D 
 4501      61736B00 
 4502              	.LASF15:
 4503 06b3 63797374 		.ascii	"cystatus\000"
 4503      61747573 
 4503      00
 4504              	.LASF61:
 4505 06bc 43795379 		.ascii	"CySysWdtGetToggleBit\000"
 4505      73576474 
 4505      47657454 
 4505      6F67676C 
 4505      65426974 
 4506              	.LASF39:
 4507 06d1 43795379 		.ascii	"CySysClkIloCompensate\000"
 4507      73436C6B 
 4507      496C6F43 
 4507      6F6D7065 
 4507      6E736174 
 4508              	.LASF18:
 4509 06e7 43595F53 		.ascii	"CY_SYS_TIMER_INTERRUPT\000"
 4509      59535F54 
 4509      494D4552 
 4509      5F494E54 
 4509      45525255 
 4510              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
