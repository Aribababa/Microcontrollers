ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	cydelayFreqHz
  20              		.data
  21              		.align	2
  22              		.type	cydelayFreqHz, %object
  23              		.size	cydelayFreqHz, 4
  24              	cydelayFreqHz:
  25 0000 006CDC02 		.word	48000000
  26              		.global	cydelayFreqKhz
  27              		.align	2
  28              		.type	cydelayFreqKhz, %object
  29              		.size	cydelayFreqKhz, 4
  30              	cydelayFreqKhz:
  31 0004 80BB0000 		.word	48000
  32              		.global	cydelayFreqMhz
  33              		.type	cydelayFreqMhz, %object
  34              		.size	cydelayFreqMhz, 1
  35              	cydelayFreqMhz:
  36 0008 30       		.byte	48
  37              		.global	cydelay32kMs
  38 0009 000000   		.align	2
  39              		.type	cydelay32kMs, %object
  40              		.size	cydelay32kMs, 4
  41              	cydelay32kMs:
  42 000c 0000C05D 		.word	1572864000
  43              		.bss
  44              		.align	2
  45              	CySysTickCallbacks:
  46 0000 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	CySysTickInitVar
  48              		.align	2
  49              		.type	CySysTickInitVar, %object
  50              		.size	CySysTickInitVar, 4
  51              	CySysTickInitVar:
  52 0014 00000000 		.space	4
  53              		.global	cyImoFreqMhz2Reg
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 2


  54              		.section	.rodata
  55              		.align	2
  56              		.type	cyImoFreqMhz2Reg, %object
  57              		.size	cyImoFreqMhz2Reg, 46
  58              	cyImoFreqMhz2Reg:
  59 0000 03       		.byte	3
  60 0001 04       		.byte	4
  61 0002 05       		.byte	5
  62 0003 06       		.byte	6
  63 0004 07       		.byte	7
  64 0005 08       		.byte	8
  65 0006 09       		.byte	9
  66 0007 0A       		.byte	10
  67 0008 0B       		.byte	11
  68 0009 0C       		.byte	12
  69 000a 0E       		.byte	14
  70 000b 0F       		.byte	15
  71 000c 10       		.byte	16
  72 000d 11       		.byte	17
  73 000e 12       		.byte	18
  74 000f 13       		.byte	19
  75 0010 14       		.byte	20
  76 0011 15       		.byte	21
  77 0012 16       		.byte	22
  78 0013 17       		.byte	23
  79 0014 18       		.byte	24
  80 0015 19       		.byte	25
  81 0016 1B       		.byte	27
  82 0017 1C       		.byte	28
  83 0018 1D       		.byte	29
  84 0019 1E       		.byte	30
  85 001a 1F       		.byte	31
  86 001b 20       		.byte	32
  87 001c 21       		.byte	33
  88 001d 22       		.byte	34
  89 001e 23       		.byte	35
  90 001f 25       		.byte	37
  91 0020 26       		.byte	38
  92 0021 27       		.byte	39
  93 0022 28       		.byte	40
  94 0023 29       		.byte	41
  95 0024 2A       		.byte	42
  96 0025 2B       		.byte	43
  97 0026 2E       		.byte	46
  98 0027 2F       		.byte	47
  99 0028 30       		.byte	48
 100 0029 31       		.byte	49
 101 002a 32       		.byte	50
 102 002b 33       		.byte	51
 103 002c 34       		.byte	52
 104 002d 35       		.byte	53
 105              		.global	CySysClkPumpConfig
 106              		.data
 107              		.align	2
 108              		.type	CySysClkPumpConfig, %object
 109              		.size	CySysClkPumpConfig, 4
 110              	CySysClkPumpConfig:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 3


 111 0010 01000000 		.word	1
 112              		.section	.text.CySysClkImoStart,"ax",%progbits
 113              		.align	2
 114              		.global	CySysClkImoStart
 115              		.code	16
 116              		.thumb_func
 117              		.type	CySysClkImoStart, %function
 118              	CySysClkImoStart:
 119              	.LFB0:
 120              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.50
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 4


  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  75:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  76:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  77:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  82:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  83:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  84:Generated_Source\PSoC4/CyLib.c **** 
  85:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  86:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  87:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  88:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  91:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  92:Generated_Source\PSoC4/CyLib.c **** 
  93:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  94:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  95:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  98:Generated_Source\PSoC4/CyLib.c **** *
  99:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 100:Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
 101:Generated_Source\PSoC4/CyLib.c **** * Resources tab.
 102:Generated_Source\PSoC4/CyLib.c **** *
 103:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 104:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 5


 105:Generated_Source\PSoC4/CyLib.c **** *
 106:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 107:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 108:Generated_Source\PSoC4/CyLib.c **** {
 121              		.loc 1 108 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 109:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 131              		.loc 1 109 0
 132 0004 044B     		ldr	r3, .L2
 133 0006 044A     		ldr	r2, .L2
 134 0008 1268     		ldr	r2, [r2]
 135 000a 8021     		movs	r1, #128
 136 000c 0906     		lsls	r1, r1, #24
 137 000e 0A43     		orrs	r2, r1
 138 0010 1A60     		str	r2, [r3]
 110:Generated_Source\PSoC4/CyLib.c **** 
 111:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 112:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 113:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 114:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 115:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 116:Generated_Source\PSoC4/CyLib.c **** 
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 119:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 120:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 121:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 122:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 123:Generated_Source\PSoC4/CyLib.c **** 
 124:Generated_Source\PSoC4/CyLib.c **** }
 139              		.loc 1 124 0
 140 0012 C046     		nop
 141 0014 BD46     		mov	sp, r7
 142              		@ sp needed
 143 0016 80BD     		pop	{r7, pc}
 144              	.L3:
 145              		.align	2
 146              	.L2:
 147 0018 08010B40 		.word	1074462984
 148              		.cfi_endproc
 149              	.LFE0:
 150              		.size	CySysClkImoStart, .-CySysClkImoStart
 151              		.section	.text.CySysClkImoStop,"ax",%progbits
 152              		.align	2
 153              		.global	CySysClkImoStop
 154              		.code	16
 155              		.thumb_func
 156              		.type	CySysClkImoStop, %function
 157              	CySysClkImoStop:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 6


 158              	.LFB1:
 125:Generated_Source\PSoC4/CyLib.c **** 
 126:Generated_Source\PSoC4/CyLib.c **** 
 127:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 128:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 129:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 130:Generated_Source\PSoC4/CyLib.c **** *
 131:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 132:Generated_Source\PSoC4/CyLib.c **** *
 133:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 134:Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 135:Generated_Source\PSoC4/CyLib.c **** *
 136:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 137:Generated_Source\PSoC4/CyLib.c **** *
 138:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 139:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 140:Generated_Source\PSoC4/CyLib.c **** {
 159              		.loc 1 140 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 00AF     		add	r7, sp, #0
 168              		.cfi_def_cfa_register 7
 141:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 142:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 143:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 144:Generated_Source\PSoC4/CyLib.c **** 
 145:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 146:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 147:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 148:Generated_Source\PSoC4/CyLib.c **** 
 149:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 169              		.loc 1 149 0
 170 0004 044B     		ldr	r3, .L5
 171 0006 044A     		ldr	r2, .L5
 172 0008 1268     		ldr	r2, [r2]
 173 000a 5200     		lsls	r2, r2, #1
 174 000c 5208     		lsrs	r2, r2, #1
 175 000e 1A60     		str	r2, [r3]
 150:Generated_Source\PSoC4/CyLib.c **** }
 176              		.loc 1 150 0
 177 0010 C046     		nop
 178 0012 BD46     		mov	sp, r7
 179              		@ sp needed
 180 0014 80BD     		pop	{r7, pc}
 181              	.L6:
 182 0016 C046     		.align	2
 183              	.L5:
 184 0018 08010B40 		.word	1074462984
 185              		.cfi_endproc
 186              	.LFE1:
 187              		.size	CySysClkImoStop, .-CySysClkImoStop
 188              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 7


 189              		.align	2
 190              		.global	CySysClkWriteHfclkDirect
 191              		.code	16
 192              		.thumb_func
 193              		.type	CySysClkWriteHfclkDirect, %function
 194              	CySysClkWriteHfclkDirect:
 195              	.LFB2:
 151:Generated_Source\PSoC4/CyLib.c **** 
 152:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 153:Generated_Source\PSoC4/CyLib.c **** 
 154:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 155:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 156:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 157:Generated_Source\PSoC4/CyLib.c ****     *
 158:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 159:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 160:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 161:Generated_Source\PSoC4/CyLib.c ****     *
 162:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 163:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 164:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 165:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 166:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 167:Generated_Source\PSoC4/CyLib.c ****     *
 168:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 169:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 170:Generated_Source\PSoC4/CyLib.c ****     *
 171:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 172:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 173:Generated_Source\PSoC4/CyLib.c ****     *
 174:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 175:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 176:Generated_Source\PSoC4/CyLib.c ****     {
 177:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 178:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 179:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 180:Generated_Source\PSoC4/CyLib.c **** 
 181:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 182:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 183:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 184:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 185:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 186:Generated_Source\PSoC4/CyLib.c **** 
 187:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 188:Generated_Source\PSoC4/CyLib.c ****         {
 189:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 190:Generated_Source\PSoC4/CyLib.c **** 
 191:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 192:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 193:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 194:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 195:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 196:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 197:Generated_Source\PSoC4/CyLib.c **** 
 198:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 199:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 200:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 8


 201:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 202:Generated_Source\PSoC4/CyLib.c ****                 {
 203:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 204:Generated_Source\PSoC4/CyLib.c ****                     {
 205:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 206:Generated_Source\PSoC4/CyLib.c ****                         break;
 207:Generated_Source\PSoC4/CyLib.c ****                     }
 208:Generated_Source\PSoC4/CyLib.c ****                 }
 209:Generated_Source\PSoC4/CyLib.c ****             #else
 210:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 211:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 212:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 213:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 214:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 215:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 216:Generated_Source\PSoC4/CyLib.c ****                 #else
 217:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 218:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 219:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 220:Generated_Source\PSoC4/CyLib.c **** 
 221:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 222:Generated_Source\PSoC4/CyLib.c **** 
 223:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 224:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 225:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 226:Generated_Source\PSoC4/CyLib.c ****                 {
 227:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 228:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 229:Generated_Source\PSoC4/CyLib.c ****                 }
 230:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 231:Generated_Source\PSoC4/CyLib.c **** 
 232:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 233:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 236:Generated_Source\PSoC4/CyLib.c **** 
 237:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 238:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 239:Generated_Source\PSoC4/CyLib.c **** 
 240:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 241:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 242:Generated_Source\PSoC4/CyLib.c **** 
 243:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 244:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 245:Generated_Source\PSoC4/CyLib.c ****             {
 246:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 247:Generated_Source\PSoC4/CyLib.c ****             }
 248:Generated_Source\PSoC4/CyLib.c ****             else
 249:Generated_Source\PSoC4/CyLib.c ****             {
 250:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 251:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 252:Generated_Source\PSoC4/CyLib.c **** 
 253:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 254:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 255:Generated_Source\PSoC4/CyLib.c **** 
 256:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 257:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 9


 258:Generated_Source\PSoC4/CyLib.c **** 
 259:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 260:Generated_Source\PSoC4/CyLib.c **** 
 261:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 262:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 263:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 264:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 265:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 266:Generated_Source\PSoC4/CyLib.c **** 
 267:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 268:Generated_Source\PSoC4/CyLib.c ****         }
 269:Generated_Source\PSoC4/CyLib.c ****     }
 270:Generated_Source\PSoC4/CyLib.c **** 
 271:Generated_Source\PSoC4/CyLib.c **** 
 272:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 273:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 274:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 275:Generated_Source\PSoC4/CyLib.c ****     *
 276:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 277:Generated_Source\PSoC4/CyLib.c ****     *
 278:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 279:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 280:Generated_Source\PSoC4/CyLib.c ****     *
 281:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 282:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 283:Generated_Source\PSoC4/CyLib.c ****     *
 284:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 285:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 286:Generated_Source\PSoC4/CyLib.c ****     {
 287:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 288:Generated_Source\PSoC4/CyLib.c ****     }
 289:Generated_Source\PSoC4/CyLib.c **** 
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 292:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 293:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 294:Generated_Source\PSoC4/CyLib.c ****     *
 295:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 296:Generated_Source\PSoC4/CyLib.c ****     *
 297:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 298:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 299:Generated_Source\PSoC4/CyLib.c ****     *
 300:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 301:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 302:Generated_Source\PSoC4/CyLib.c ****     *
 303:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 304:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 305:Generated_Source\PSoC4/CyLib.c ****     {
 306:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 307:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 308:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 309:Generated_Source\PSoC4/CyLib.c ****     }
 310:Generated_Source\PSoC4/CyLib.c **** 
 311:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 312:Generated_Source\PSoC4/CyLib.c **** 
 313:Generated_Source\PSoC4/CyLib.c **** 
 314:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 10


 315:Generated_Source\PSoC4/CyLib.c **** 
 316:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 317:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 318:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 319:Generated_Source\PSoC4/CyLib.c ****     *
 320:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 321:Generated_Source\PSoC4/CyLib.c ****     *
 322:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 325:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 328:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 331:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 332:Generated_Source\PSoC4/CyLib.c ****     {
 333:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 334:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 335:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 336:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 337:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 338:Generated_Source\PSoC4/CyLib.c **** 
 339:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 340:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 341:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 342:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 343:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 344:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 347:Generated_Source\PSoC4/CyLib.c ****     }
 348:Generated_Source\PSoC4/CyLib.c **** 
 349:Generated_Source\PSoC4/CyLib.c **** 
 350:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 351:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 352:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 353:Generated_Source\PSoC4/CyLib.c ****     *
 354:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 355:Generated_Source\PSoC4/CyLib.c ****     *
 356:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 357:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 360:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 361:Generated_Source\PSoC4/CyLib.c ****     *
 362:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 363:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 364:Generated_Source\PSoC4/CyLib.c ****     {
 365:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 366:Generated_Source\PSoC4/CyLib.c **** 
 367:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 368:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 369:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 370:Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 371:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 11


 372:Generated_Source\PSoC4/CyLib.c ****     }
 373:Generated_Source\PSoC4/CyLib.c **** 
 374:Generated_Source\PSoC4/CyLib.c **** 
 375:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 376:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 377:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 378:Generated_Source\PSoC4/CyLib.c ****     *
 379:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 380:Generated_Source\PSoC4/CyLib.c ****     *
 381:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 382:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 383:Generated_Source\PSoC4/CyLib.c ****     *
 384:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 385:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 386:Generated_Source\PSoC4/CyLib.c ****     *
 387:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 388:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 389:Generated_Source\PSoC4/CyLib.c ****     {
 390:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 391:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 392:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 393:Generated_Source\PSoC4/CyLib.c ****     }
 394:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 395:Generated_Source\PSoC4/CyLib.c **** 
 396:Generated_Source\PSoC4/CyLib.c **** 
 397:Generated_Source\PSoC4/CyLib.c **** 
 398:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 399:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 400:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 401:Generated_Source\PSoC4/CyLib.c **** *
 402:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 403:Generated_Source\PSoC4/CyLib.c **** *
 404:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 405:Generated_Source\PSoC4/CyLib.c **** *
 406:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 407:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 408:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 409:Generated_Source\PSoC4/CyLib.c **** *
 410:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 411:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 412:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 413:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 414:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 415:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 416:Generated_Source\PSoC4/CyLib.c **** *
 417:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 418:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 419:Generated_Source\PSoC4/CyLib.c **** *
 420:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 421:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 422:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 423:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 424:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 425:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 426:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 427:Generated_Source\PSoC4/CyLib.c **** *
 428:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 12


 429:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 430:Generated_Source\PSoC4/CyLib.c **** {
 196              		.loc 1 430 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 16
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 90B5     		push	{r4, r7, lr}
 201              		.cfi_def_cfa_offset 12
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 85B0     		sub	sp, sp, #20
 206              		.cfi_def_cfa_offset 32
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
 431:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 432:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 210              		.loc 1 434 0
 211 0008 0F23     		movs	r3, #15
 212 000a FC18     		adds	r4, r7, r3
 213 000c FFF7FEFF 		bl	CyEnterCriticalSection
 214 0010 0300     		movs	r3, r0
 215 0012 2370     		strb	r3, [r4]
 435:Generated_Source\PSoC4/CyLib.c **** 
 436:Generated_Source\PSoC4/CyLib.c **** 
 437:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 216              		.loc 1 437 0
 217 0014 0B4B     		ldr	r3, .L8
 218 0016 1B68     		ldr	r3, [r3]
 219 0018 0722     		movs	r2, #7
 220 001a 9343     		bics	r3, r2
 221 001c BB60     		str	r3, [r7, #8]
 438:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 439:Generated_Source\PSoC4/CyLib.c **** 
 440:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 441:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 442:Generated_Source\PSoC4/CyLib.c ****     {
 443:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 444:Generated_Source\PSoC4/CyLib.c ****     }
 445:Generated_Source\PSoC4/CyLib.c ****     else
 446:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 447:Generated_Source\PSoC4/CyLib.c ****     {
 448:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 222              		.loc 1 448 0
 223 001e 7B68     		ldr	r3, [r7, #4]
 224 0020 0722     		movs	r2, #7
 225 0022 1340     		ands	r3, r2
 226 0024 BA68     		ldr	r2, [r7, #8]
 227 0026 1343     		orrs	r3, r2
 228 0028 BB60     		str	r3, [r7, #8]
 449:Generated_Source\PSoC4/CyLib.c ****     }
 450:Generated_Source\PSoC4/CyLib.c **** 
 451:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 229              		.loc 1 451 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 13


 230 002a 064B     		ldr	r3, .L8
 231 002c BA68     		ldr	r2, [r7, #8]
 232 002e 1A60     		str	r2, [r3]
 452:Generated_Source\PSoC4/CyLib.c **** 
 453:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 233              		.loc 1 453 0
 234 0030 0F23     		movs	r3, #15
 235 0032 FB18     		adds	r3, r7, r3
 236 0034 1B78     		ldrb	r3, [r3]
 237 0036 1800     		movs	r0, r3
 238 0038 FFF7FEFF 		bl	CyExitCriticalSection
 454:Generated_Source\PSoC4/CyLib.c **** }
 239              		.loc 1 454 0
 240 003c C046     		nop
 241 003e BD46     		mov	sp, r7
 242 0040 05B0     		add	sp, sp, #20
 243              		@ sp needed
 244 0042 90BD     		pop	{r4, r7, pc}
 245              	.L9:
 246              		.align	2
 247              	.L8:
 248 0044 00010B40 		.word	1074462976
 249              		.cfi_endproc
 250              	.LFE2:
 251              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 252              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 253              		.align	2
 254              		.global	CySysEnablePumpClock
 255              		.code	16
 256              		.thumb_func
 257              		.type	CySysEnablePumpClock, %function
 258              	CySysEnablePumpClock:
 259              	.LFB3:
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c **** 
 457:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 458:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 459:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 460:Generated_Source\PSoC4/CyLib.c **** *
 461:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 462:Generated_Source\PSoC4/CyLib.c **** *
 463:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 464:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 465:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 466:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 467:Generated_Source\PSoC4/CyLib.c **** *
 468:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 469:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 470:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 471:Generated_Source\PSoC4/CyLib.c **** *
 472:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 473:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 474:Generated_Source\PSoC4/CyLib.c **** {
 260              		.loc 1 474 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 14


 264 0000 80B5     		push	{r7, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 82B0     		sub	sp, sp, #8
 269              		.cfi_def_cfa_offset 16
 270 0004 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 475:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 476:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 273              		.loc 1 476 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a 0122     		movs	r2, #1
 276 000c 1340     		ands	r3, r2
 277 000e 08D0     		beq	.L11
 477:Generated_Source\PSoC4/CyLib.c ****         {
 478:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 278              		.loc 1 478 0
 279 0010 0C4A     		ldr	r2, .L14
 280 0012 0C4B     		ldr	r3, .L14
 281 0014 1968     		ldr	r1, [r3]
 282 0016 0C4B     		ldr	r3, .L14+4
 283 0018 1B68     		ldr	r3, [r3]
 284 001a 5B06     		lsls	r3, r3, #25
 285 001c 0B43     		orrs	r3, r1
 286 001e 1360     		str	r3, [r2]
 479:Generated_Source\PSoC4/CyLib.c ****         }
 480:Generated_Source\PSoC4/CyLib.c ****         else
 481:Generated_Source\PSoC4/CyLib.c ****         {
 482:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 483:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 484:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 485:Generated_Source\PSoC4/CyLib.c ****         }
 486:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 487:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 488:Generated_Source\PSoC4/CyLib.c ****         {
 489:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 490:Generated_Source\PSoC4/CyLib.c ****         }
 491:Generated_Source\PSoC4/CyLib.c ****         else
 492:Generated_Source\PSoC4/CyLib.c ****         {
 493:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 494:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 495:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 496:Generated_Source\PSoC4/CyLib.c ****         }
 497:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 498:Generated_Source\PSoC4/CyLib.c **** }
 287              		.loc 1 498 0
 288 0020 0CE0     		b	.L13
 289              	.L11:
 482:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 290              		.loc 1 482 0
 291 0022 084B     		ldr	r3, .L14
 292 0024 1B68     		ldr	r3, [r3]
 293 0026 5B0E     		lsrs	r3, r3, #25
 294 0028 0722     		movs	r2, #7
 295 002a 1A40     		ands	r2, r3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 15


 296 002c 064B     		ldr	r3, .L14+4
 297 002e 1A60     		str	r2, [r3]
 484:Generated_Source\PSoC4/CyLib.c ****         }
 298              		.loc 1 484 0
 299 0030 044B     		ldr	r3, .L14
 300 0032 044A     		ldr	r2, .L14
 301 0034 1268     		ldr	r2, [r2]
 302 0036 0549     		ldr	r1, .L14+8
 303 0038 0A40     		ands	r2, r1
 304 003a 1A60     		str	r2, [r3]
 305              	.L13:
 306              		.loc 1 498 0
 307 003c C046     		nop
 308 003e BD46     		mov	sp, r7
 309 0040 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0042 80BD     		pop	{r7, pc}
 312              	.L15:
 313              		.align	2
 314              	.L14:
 315 0044 08010B40 		.word	1074462984
 316 0048 00000000 		.word	CySysClkPumpConfig
 317 004c FFFFFFF1 		.word	-234881025
 318              		.cfi_endproc
 319              	.LFE3:
 320              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 321              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 322              		.align	2
 323              		.global	CySysClkGetSysclkSource
 324              		.code	16
 325              		.thumb_func
 326              		.type	CySysClkGetSysclkSource, %function
 327              	CySysClkGetSysclkSource:
 328              	.LFB4:
 499:Generated_Source\PSoC4/CyLib.c **** 
 500:Generated_Source\PSoC4/CyLib.c **** 
 501:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 502:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 503:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 504:Generated_Source\PSoC4/CyLib.c **** *
 505:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 506:Generated_Source\PSoC4/CyLib.c **** *
 507:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 508:Generated_Source\PSoC4/CyLib.c **** *
 509:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 510:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 511:Generated_Source\PSoC4/CyLib.c **** {
 329              		.loc 1 511 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 90B5     		push	{r4, r7, lr}
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 4, -12
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 16


 339              		.cfi_def_cfa_offset 24
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 512:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 513:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 514:Generated_Source\PSoC4/CyLib.c **** 
 515:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 342              		.loc 1 515 0
 343 0006 FC1D     		adds	r4, r7, #7
 344 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 345 000c 0300     		movs	r3, r0
 346 000e 2370     		strb	r3, [r4]
 516:Generated_Source\PSoC4/CyLib.c **** 
 517:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 518:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 519:Generated_Source\PSoC4/CyLib.c ****     {
 520:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 521:Generated_Source\PSoC4/CyLib.c ****     }
 522:Generated_Source\PSoC4/CyLib.c ****     else
 523:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 524:Generated_Source\PSoC4/CyLib.c ****     {
 525:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 347              		.loc 1 525 0
 348 0010 074B     		ldr	r3, .L18
 349 0012 1B68     		ldr	r3, [r3]
 350 0014 0722     		movs	r2, #7
 351 0016 1340     		ands	r3, r2
 352 0018 3B60     		str	r3, [r7]
 526:Generated_Source\PSoC4/CyLib.c ****     }
 527:Generated_Source\PSoC4/CyLib.c **** 
 528:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 353              		.loc 1 528 0
 354 001a FB1D     		adds	r3, r7, #7
 355 001c 1B78     		ldrb	r3, [r3]
 356 001e 1800     		movs	r0, r3
 357 0020 FFF7FEFF 		bl	CyExitCriticalSection
 529:Generated_Source\PSoC4/CyLib.c **** 
 530:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 358              		.loc 1 530 0
 359 0024 3B68     		ldr	r3, [r7]
 531:Generated_Source\PSoC4/CyLib.c **** }
 360              		.loc 1 531 0
 361 0026 1800     		movs	r0, r3
 362 0028 BD46     		mov	sp, r7
 363 002a 03B0     		add	sp, sp, #12
 364              		@ sp needed
 365 002c 90BD     		pop	{r4, r7, pc}
 366              	.L19:
 367 002e C046     		.align	2
 368              	.L18:
 369 0030 00010B40 		.word	1074462976
 370              		.cfi_endproc
 371              	.LFE4:
 372              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 373              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 374              		.align	2
 375              		.global	CySysClkWriteSysclkDiv
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 17


 376              		.code	16
 377              		.thumb_func
 378              		.type	CySysClkWriteSysclkDiv, %function
 379              	CySysClkWriteSysclkDiv:
 380              	.LFB5:
 532:Generated_Source\PSoC4/CyLib.c **** 
 533:Generated_Source\PSoC4/CyLib.c **** 
 534:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 535:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 536:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 537:Generated_Source\PSoC4/CyLib.c **** *
 538:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 539:Generated_Source\PSoC4/CyLib.c **** *
 540:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 541:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 542:Generated_Source\PSoC4/CyLib.c **** *
 543:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 544:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 545:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 546:Generated_Source\PSoC4/CyLib.c **** *
 547:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 548:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 549:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 550:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 551:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 552:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 553:Generated_Source\PSoC4/CyLib.c **** *
 554:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 555:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 556:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 557:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 558:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 559:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 560:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 561:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 562:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 563:Generated_Source\PSoC4/CyLib.c **** *
 564:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 565:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 566:Generated_Source\PSoC4/CyLib.c **** {
 381              		.loc 1 566 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 16
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385 0000 90B5     		push	{r4, r7, lr}
 386              		.cfi_def_cfa_offset 12
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 85B0     		sub	sp, sp, #20
 391              		.cfi_def_cfa_offset 32
 392 0004 00AF     		add	r7, sp, #0
 393              		.cfi_def_cfa_register 7
 394 0006 7860     		str	r0, [r7, #4]
 567:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 568:Generated_Source\PSoC4/CyLib.c **** 
 569:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 18


 395              		.loc 1 569 0
 396 0008 0F23     		movs	r3, #15
 397 000a FC18     		adds	r4, r7, r3
 398 000c FFF7FEFF 		bl	CyEnterCriticalSection
 399 0010 0300     		movs	r3, r0
 400 0012 2370     		strb	r3, [r4]
 570:Generated_Source\PSoC4/CyLib.c **** 
 571:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 401              		.loc 1 571 0
 402 0014 0A4B     		ldr	r3, .L21
 403 0016 7A68     		ldr	r2, [r7, #4]
 404 0018 D104     		lsls	r1, r2, #19
 405 001a E022     		movs	r2, #224
 406 001c 9203     		lsls	r2, r2, #14
 407 001e 1140     		ands	r1, r2
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 573:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 408              		.loc 1 573 0
 409 0020 074A     		ldr	r2, .L21
 410 0022 1268     		ldr	r2, [r2]
 411 0024 0748     		ldr	r0, .L21+4
 412 0026 0240     		ands	r2, r0
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 413              		.loc 1 572 0
 414 0028 0A43     		orrs	r2, r1
 571:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 415              		.loc 1 571 0
 416 002a 1A60     		str	r2, [r3]
 574:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 575:Generated_Source\PSoC4/CyLib.c **** 
 576:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 417              		.loc 1 576 0
 418 002c 0F23     		movs	r3, #15
 419 002e FB18     		adds	r3, r7, r3
 420 0030 1B78     		ldrb	r3, [r3]
 421 0032 1800     		movs	r0, r3
 422 0034 FFF7FEFF 		bl	CyExitCriticalSection
 577:Generated_Source\PSoC4/CyLib.c **** }
 423              		.loc 1 577 0
 424 0038 C046     		nop
 425 003a BD46     		mov	sp, r7
 426 003c 05B0     		add	sp, sp, #20
 427              		@ sp needed
 428 003e 90BD     		pop	{r4, r7, pc}
 429              	.L22:
 430              		.align	2
 431              	.L21:
 432 0040 00010B40 		.word	1074462976
 433 0044 FFFFC7FF 		.word	-3670017
 434              		.cfi_endproc
 435              	.LFE5:
 436              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 437              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 438              		.align	2
 439              		.global	CySysClkWriteImoFreq
 440              		.code	16
 441              		.thumb_func
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 19


 442              		.type	CySysClkWriteImoFreq, %function
 443              	CySysClkWriteImoFreq:
 444              	.LFB6:
 578:Generated_Source\PSoC4/CyLib.c **** 
 579:Generated_Source\PSoC4/CyLib.c **** 
 580:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 581:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 582:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 583:Generated_Source\PSoC4/CyLib.c **** *
 584:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 585:Generated_Source\PSoC4/CyLib.c **** *
 586:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 587:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 588:Generated_Source\PSoC4/CyLib.c **** *
 589:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 590:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 591:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 592:Generated_Source\PSoC4/CyLib.c **** *
 593:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 594:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 595:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 596:Generated_Source\PSoC4/CyLib.c **** *
 597:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 598:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 599:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 600:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 601:Generated_Source\PSoC4/CyLib.c **** *
 602:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 603:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 604:Generated_Source\PSoC4/CyLib.c **** *
 605:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 606:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 607:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 608:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 609:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 610:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 611:Generated_Source\PSoC4/CyLib.c **** *
 612:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 613:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 614:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 615:Generated_Source\PSoC4/CyLib.c **** *
 616:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 617:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 618:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 619:Generated_Source\PSoC4/CyLib.c **** * 4.
 620:Generated_Source\PSoC4/CyLib.c **** *
 621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 622:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 623:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 624:Generated_Source\PSoC4/CyLib.c ****     {
 445              		.loc 1 624 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 16
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 90B5     		push	{r4, r7, lr}
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 20


 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 85B0     		sub	sp, sp, #20
 455              		.cfi_def_cfa_offset 32
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 458 0006 7860     		str	r0, [r7, #4]
 625:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 626:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 627:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 628:Generated_Source\PSoC4/CyLib.c ****         #else
 629:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 630:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 631:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 632:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 633:Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 634:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 635:Generated_Source\PSoC4/CyLib.c **** 
 636:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 637:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 638:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 639:Generated_Source\PSoC4/CyLib.c **** 
 640:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 641:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 642:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 645:Generated_Source\PSoC4/CyLib.c **** 
 646:Generated_Source\PSoC4/CyLib.c **** 
 647:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 459              		.loc 1 647 0
 460 0008 0C23     		movs	r3, #12
 461 000a FC18     		adds	r4, r7, r3
 462 000c FFF7FEFF 		bl	CyEnterCriticalSection
 463 0010 0300     		movs	r3, r0
 464 0012 2370     		strb	r3, [r4]
 648:Generated_Source\PSoC4/CyLib.c **** 
 649:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 650:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 651:Generated_Source\PSoC4/CyLib.c ****             {
 652:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 653:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 654:Generated_Source\PSoC4/CyLib.c ****             }
 655:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 656:Generated_Source\PSoC4/CyLib.c **** 
 657:Generated_Source\PSoC4/CyLib.c **** 
 658:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 659:Generated_Source\PSoC4/CyLib.c **** 
 660:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 661:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 662:Generated_Source\PSoC4/CyLib.c ****                 {
 663:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 664:Generated_Source\PSoC4/CyLib.c **** 
 665:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 666:Generated_Source\PSoC4/CyLib.c ****                 {
 667:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 668:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 21


 669:Generated_Source\PSoC4/CyLib.c ****                 }
 670:Generated_Source\PSoC4/CyLib.c **** 
 671:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 672:Generated_Source\PSoC4/CyLib.c ****                 }
 673:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 674:Generated_Source\PSoC4/CyLib.c **** 
 675:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 676:Generated_Source\PSoC4/CyLib.c **** 
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 679:Generated_Source\PSoC4/CyLib.c **** 
 680:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 681:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 682:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 683:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 684:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 685:Generated_Source\PSoC4/CyLib.c **** 
 686:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 687:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 688:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 689:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 690:Generated_Source\PSoC4/CyLib.c **** 
 691:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 692:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 693:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 694:Generated_Source\PSoC4/CyLib.c **** 
 695:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 465              		.loc 1 697 0
 466 0014 7B68     		ldr	r3, [r7, #4]
 467 0016 022B     		cmp	r3, #2
 468 0018 00D8     		bhi	.LCB302
 469 001a B3E0     		b	.L24	@long jump
 470              	.LCB302:
 471              		.loc 1 697 0 is_stmt 0 discriminator 1
 472 001c 7B68     		ldr	r3, [r7, #4]
 473 001e 302B     		cmp	r3, #48
 474 0020 00D9     		bls	.LCB305
 475 0022 AFE0     		b	.L24	@long jump
 476              	.LCB305:
 698:Generated_Source\PSoC4/CyLib.c ****         {
 699:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 477              		.loc 1 699 0 is_stmt 1
 478 0024 5E4B     		ldr	r3, .L35
 479 0026 1B78     		ldrb	r3, [r3]
 480 0028 DBB2     		uxtb	r3, r3
 481 002a 1A00     		movs	r2, r3
 482 002c 7B68     		ldr	r3, [r7, #4]
 483 002e 9A42     		cmp	r2, r3
 484 0030 0AD3     		bcc	.L25
 700:Generated_Source\PSoC4/CyLib.c ****             {
 701:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 485              		.loc 1 701 0
 486 0032 5C4A     		ldr	r2, .L35+4
 487 0034 0F23     		movs	r3, #15
 488 0036 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 22


 489 0038 1278     		ldrb	r2, [r2]
 490 003a 1A70     		strb	r2, [r3]
 702:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 491              		.loc 1 702 0
 492 003c 5A4A     		ldr	r2, .L35+8
 493 003e 0E23     		movs	r3, #14
 494 0040 FB18     		adds	r3, r7, r3
 495 0042 1278     		ldrb	r2, [r2]
 496 0044 1A70     		strb	r2, [r3]
 497 0046 3FE0     		b	.L26
 498              	.L25:
 703:Generated_Source\PSoC4/CyLib.c ****             }
 704:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 499              		.loc 1 704 0
 500 0048 584B     		ldr	r3, .L35+12
 501 004a 1B78     		ldrb	r3, [r3]
 502 004c DBB2     		uxtb	r3, r3
 503 004e 1A00     		movs	r2, r3
 504 0050 7B68     		ldr	r3, [r7, #4]
 505 0052 9A42     		cmp	r2, r3
 506 0054 0AD3     		bcc	.L27
 705:Generated_Source\PSoC4/CyLib.c ****             {
 706:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 507              		.loc 1 706 0
 508 0056 564A     		ldr	r2, .L35+16
 509 0058 0F23     		movs	r3, #15
 510 005a FB18     		adds	r3, r7, r3
 511 005c 1278     		ldrb	r2, [r2]
 512 005e 1A70     		strb	r2, [r3]
 707:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 513              		.loc 1 707 0
 514 0060 544A     		ldr	r2, .L35+20
 515 0062 0E23     		movs	r3, #14
 516 0064 FB18     		adds	r3, r7, r3
 517 0066 1278     		ldrb	r2, [r2]
 518 0068 1A70     		strb	r2, [r3]
 519 006a 2DE0     		b	.L26
 520              	.L27:
 708:Generated_Source\PSoC4/CyLib.c ****             }
 709:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 521              		.loc 1 709 0
 522 006c 524B     		ldr	r3, .L35+24
 523 006e 1B78     		ldrb	r3, [r3]
 524 0070 DBB2     		uxtb	r3, r3
 525 0072 1A00     		movs	r2, r3
 526 0074 7B68     		ldr	r3, [r7, #4]
 527 0076 9A42     		cmp	r2, r3
 528 0078 0AD3     		bcc	.L28
 710:Generated_Source\PSoC4/CyLib.c ****             {
 711:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 529              		.loc 1 711 0
 530 007a 504A     		ldr	r2, .L35+28
 531 007c 0F23     		movs	r3, #15
 532 007e FB18     		adds	r3, r7, r3
 533 0080 1278     		ldrb	r2, [r2]
 534 0082 1A70     		strb	r2, [r3]
 712:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 23


 535              		.loc 1 712 0
 536 0084 4E4A     		ldr	r2, .L35+32
 537 0086 0E23     		movs	r3, #14
 538 0088 FB18     		adds	r3, r7, r3
 539 008a 1278     		ldrb	r2, [r2]
 540 008c 1A70     		strb	r2, [r3]
 541 008e 1BE0     		b	.L26
 542              	.L28:
 713:Generated_Source\PSoC4/CyLib.c ****             }
 714:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 543              		.loc 1 714 0
 544 0090 4C4B     		ldr	r3, .L35+36
 545 0092 1B78     		ldrb	r3, [r3]
 546 0094 DBB2     		uxtb	r3, r3
 547 0096 1A00     		movs	r2, r3
 548 0098 7B68     		ldr	r3, [r7, #4]
 549 009a 9A42     		cmp	r2, r3
 550 009c 0AD3     		bcc	.L29
 715:Generated_Source\PSoC4/CyLib.c ****             {
 716:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 551              		.loc 1 716 0
 552 009e 4A4A     		ldr	r2, .L35+40
 553 00a0 0F23     		movs	r3, #15
 554 00a2 FB18     		adds	r3, r7, r3
 555 00a4 1278     		ldrb	r2, [r2]
 556 00a6 1A70     		strb	r2, [r3]
 717:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 557              		.loc 1 717 0
 558 00a8 484A     		ldr	r2, .L35+44
 559 00aa 0E23     		movs	r3, #14
 560 00ac FB18     		adds	r3, r7, r3
 561 00ae 1278     		ldrb	r2, [r2]
 562 00b0 1A70     		strb	r2, [r3]
 563 00b2 09E0     		b	.L26
 564              	.L29:
 718:Generated_Source\PSoC4/CyLib.c ****             }
 719:Generated_Source\PSoC4/CyLib.c ****             else
 720:Generated_Source\PSoC4/CyLib.c ****             {
 721:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 565              		.loc 1 721 0
 566 00b4 464A     		ldr	r2, .L35+48
 567 00b6 0F23     		movs	r3, #15
 568 00b8 FB18     		adds	r3, r7, r3
 569 00ba 1278     		ldrb	r2, [r2]
 570 00bc 1A70     		strb	r2, [r3]
 722:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 571              		.loc 1 722 0
 572 00be 454A     		ldr	r2, .L35+52
 573 00c0 0E23     		movs	r3, #14
 574 00c2 FB18     		adds	r3, r7, r3
 575 00c4 1278     		ldrb	r2, [r2]
 576 00c6 1A70     		strb	r2, [r3]
 577              	.L26:
 723:Generated_Source\PSoC4/CyLib.c ****             }
 724:Generated_Source\PSoC4/CyLib.c **** 
 725:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 726:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 24


 578              		.loc 1 726 0
 579 00c8 7B68     		ldr	r3, [r7, #4]
 580 00ca DA1E     		subs	r2, r3, #3
 581 00cc 0B23     		movs	r3, #11
 582 00ce FB18     		adds	r3, r7, r3
 583 00d0 4149     		ldr	r1, .L35+56
 584 00d2 8A5C     		ldrb	r2, [r1, r2]
 585 00d4 1A70     		strb	r2, [r3]
 727:Generated_Source\PSoC4/CyLib.c **** 
 728:Generated_Source\PSoC4/CyLib.c **** 
 729:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 730:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 731:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 732:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 733:Generated_Source\PSoC4/CyLib.c ****             *
 734:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 735:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 736:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 737:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 738:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 586              		.loc 1 738 0
 587 00d6 0B23     		movs	r3, #11
 588 00d8 FB18     		adds	r3, r7, r3
 589 00da 1B78     		ldrb	r3, [r3]
 590 00dc 2F2B     		cmp	r3, #47
 591 00de 0DD9     		bls	.L30
 592              		.loc 1 738 0 is_stmt 0 discriminator 1
 593 00e0 7B68     		ldr	r3, [r7, #4]
 594 00e2 2A2B     		cmp	r3, #42
 595 00e4 0AD9     		bls	.L30
 739:Generated_Source\PSoC4/CyLib.c ****             {
 740:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 741:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 596              		.loc 1 741 0 is_stmt 1
 597 00e6 3D4B     		ldr	r3, .L35+60
 598 00e8 1922     		movs	r2, #25
 599 00ea 1A60     		str	r2, [r3]
 742:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 743:Generated_Source\PSoC4/CyLib.c **** 
 744:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 600              		.loc 1 744 0
 601 00ec 0520     		movs	r0, #5
 602 00ee FFF7FEFF 		bl	CyDelayCycles
 745:Generated_Source\PSoC4/CyLib.c **** 
 746:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 603              		.loc 1 746 0
 604 00f2 0D23     		movs	r3, #13
 605 00f4 FB18     		adds	r3, r7, r3
 606 00f6 1922     		movs	r2, #25
 607 00f8 1A70     		strb	r2, [r3]
 608 00fa 07E0     		b	.L31
 609              	.L30:
 747:Generated_Source\PSoC4/CyLib.c ****             }
 748:Generated_Source\PSoC4/CyLib.c ****             else
 749:Generated_Source\PSoC4/CyLib.c ****             {
 750:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 610              		.loc 1 750 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 25


 611 00fc 374B     		ldr	r3, .L35+60
 612 00fe 1B68     		ldr	r3, [r3]
 613 0100 DAB2     		uxtb	r2, r3
 614 0102 0D23     		movs	r3, #13
 615 0104 FB18     		adds	r3, r7, r3
 616 0106 3F21     		movs	r1, #63
 617 0108 0A40     		ands	r2, r1
 618 010a 1A70     		strb	r2, [r3]
 619              	.L31:
 751:Generated_Source\PSoC4/CyLib.c ****             }
 752:Generated_Source\PSoC4/CyLib.c **** 
 753:Generated_Source\PSoC4/CyLib.c **** 
 754:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 755:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 756:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 757:Generated_Source\PSoC4/CyLib.c ****             *
 758:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 759:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 760:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 761:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 762:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 620              		.loc 1 762 0
 621 010c 0B23     		movs	r3, #11
 622 010e FA18     		adds	r2, r7, r3
 623 0110 0D23     		movs	r3, #13
 624 0112 FB18     		adds	r3, r7, r3
 625 0114 1278     		ldrb	r2, [r2]
 626 0116 1B78     		ldrb	r3, [r3]
 627 0118 9A42     		cmp	r2, r3
 628 011a 08D2     		bcs	.L32
 763:Generated_Source\PSoC4/CyLib.c ****             {
 764:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 765:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 629              		.loc 1 765 0
 630 011c 2F4B     		ldr	r3, .L35+60
 631 011e 7A68     		ldr	r2, [r7, #4]
 632 0120 033A     		subs	r2, r2, #3
 633 0122 2D49     		ldr	r1, .L35+56
 634 0124 8A5C     		ldrb	r2, [r1, r2]
 635 0126 1A60     		str	r2, [r3]
 766:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 636              		.loc 1 766 0
 637 0128 0520     		movs	r0, #5
 638 012a FFF7FEFF 		bl	CyDelayCycles
 639              	.L32:
 767:Generated_Source\PSoC4/CyLib.c ****             }
 768:Generated_Source\PSoC4/CyLib.c **** 
 769:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 770:Generated_Source\PSoC4/CyLib.c **** 
 771:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 772:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 773:Generated_Source\PSoC4/CyLib.c ****                 {
 774:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 775:Generated_Source\PSoC4/CyLib.c ****                 }
 776:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 777:Generated_Source\PSoC4/CyLib.c ****                 {
 778:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 26


 779:Generated_Source\PSoC4/CyLib.c ****                 }
 780:Generated_Source\PSoC4/CyLib.c ****                 else
 781:Generated_Source\PSoC4/CyLib.c ****                 {
 782:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 783:Generated_Source\PSoC4/CyLib.c ****                 }
 784:Generated_Source\PSoC4/CyLib.c ****             #else
 785:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 640              		.loc 1 785 0
 641 012e 7B68     		ldr	r3, [r7, #4]
 642 0130 284A     		ldr	r2, .L35+52
 643 0132 9A18     		adds	r2, r3, r2
 644 0134 0A23     		movs	r3, #10
 645 0136 FB18     		adds	r3, r7, r3
 646 0138 1278     		ldrb	r2, [r2]
 647 013a 1A70     		strb	r2, [r3]
 786:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 787:Generated_Source\PSoC4/CyLib.c **** 
 788:Generated_Source\PSoC4/CyLib.c **** 
 789:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 648              		.loc 1 789 0
 649 013c 284B     		ldr	r3, .L35+64
 650 013e 0A22     		movs	r2, #10
 651 0140 BA18     		adds	r2, r7, r2
 652 0142 1278     		ldrb	r2, [r2]
 653 0144 1A60     		str	r2, [r3]
 790:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 654              		.loc 1 790 0
 655 0146 274B     		ldr	r3, .L35+68
 656 0148 0F22     		movs	r2, #15
 657 014a BA18     		adds	r2, r7, r2
 658 014c 1278     		ldrb	r2, [r2]
 659 014e 1A60     		str	r2, [r3]
 791:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 660              		.loc 1 791 0
 661 0150 254B     		ldr	r3, .L35+72
 662 0152 0E22     		movs	r2, #14
 663 0154 BA18     		adds	r2, r7, r2
 664 0156 1278     		ldrb	r2, [r2]
 665 0158 1A60     		str	r2, [r3]
 792:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 666              		.loc 1 792 0
 667 015a 0520     		movs	r0, #5
 668 015c FFF7FEFF 		bl	CyDelayUs
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 669              		.loc 1 794 0
 670 0160 0B23     		movs	r3, #11
 671 0162 FA18     		adds	r2, r7, r3
 672 0164 0D23     		movs	r3, #13
 673 0166 FB18     		adds	r3, r7, r3
 674 0168 1278     		ldrb	r2, [r2]
 675 016a 1B78     		ldrb	r3, [r3]
 676 016c 9A42     		cmp	r2, r3
 677 016e 0CD9     		bls	.L34
 795:Generated_Source\PSoC4/CyLib.c ****             {
 796:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 797:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 27


 678              		.loc 1 797 0
 679 0170 1A4B     		ldr	r3, .L35+60
 680 0172 7A68     		ldr	r2, [r7, #4]
 681 0174 033A     		subs	r2, r2, #3
 682 0176 1849     		ldr	r1, .L35+56
 683 0178 8A5C     		ldrb	r2, [r1, r2]
 684 017a 1A60     		str	r2, [r3]
 798:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 685              		.loc 1 798 0
 686 017c 0520     		movs	r0, #5
 687 017e FFF7FEFF 		bl	CyDelayCycles
 794:Generated_Source\PSoC4/CyLib.c ****             {
 688              		.loc 1 794 0
 689 0182 02E0     		b	.L34
 690              	.L24:
 799:Generated_Source\PSoC4/CyLib.c ****             }
 800:Generated_Source\PSoC4/CyLib.c ****         }
 801:Generated_Source\PSoC4/CyLib.c ****         else
 802:Generated_Source\PSoC4/CyLib.c ****         {
 803:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 804:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 691              		.loc 1 804 0 discriminator 1
 692 0184 0020     		movs	r0, #0
 693 0186 FFF7FEFF 		bl	CyHalt
 694              	.L34:
 805:Generated_Source\PSoC4/CyLib.c ****         }
 806:Generated_Source\PSoC4/CyLib.c **** 
 807:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 808:Generated_Source\PSoC4/CyLib.c **** 
 809:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 810:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 811:Generated_Source\PSoC4/CyLib.c ****             {
 812:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 813:Generated_Source\PSoC4/CyLib.c ****             }
 814:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 815:Generated_Source\PSoC4/CyLib.c **** 
 816:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 817:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 818:Generated_Source\PSoC4/CyLib.c ****             {
 819:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 820:Generated_Source\PSoC4/CyLib.c ****             }
 821:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 822:Generated_Source\PSoC4/CyLib.c **** 
 823:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 695              		.loc 1 823 0
 696 018a 0C23     		movs	r3, #12
 697 018c FB18     		adds	r3, r7, r3
 698 018e 1B78     		ldrb	r3, [r3]
 699 0190 1800     		movs	r0, r3
 700 0192 FFF7FEFF 		bl	CyExitCriticalSection
 824:Generated_Source\PSoC4/CyLib.c ****     }
 701              		.loc 1 824 0
 702 0196 C046     		nop
 703 0198 BD46     		mov	sp, r7
 704 019a 05B0     		add	sp, sp, #20
 705              		@ sp needed
 706 019c 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 28


 707              	.L36:
 708 019e C046     		.align	2
 709              	.L35:
 710 01a0 C0F1FF0F 		.word	268431808
 711 01a4 C1F1FF0F 		.word	268431809
 712 01a8 C2F1FF0F 		.word	268431810
 713 01ac C3F1FF0F 		.word	268431811
 714 01b0 C4F1FF0F 		.word	268431812
 715 01b4 C5F1FF0F 		.word	268431813
 716 01b8 C6F1FF0F 		.word	268431814
 717 01bc C7F1FF0F 		.word	268431815
 718 01c0 C8F1FF0F 		.word	268431816
 719 01c4 C9F1FF0F 		.word	268431817
 720 01c8 CAF1FF0F 		.word	268431818
 721 01cc CBF1FF0F 		.word	268431819
 722 01d0 CCF1FF0F 		.word	268431820
 723 01d4 CDF1FF0F 		.word	268431821
 724 01d8 00000000 		.word	cyImoFreqMhz2Reg
 725 01dc 2CFF0B40 		.word	1074528044
 726 01e0 28FF0B40 		.word	1074528040
 727 01e4 1CFF0B40 		.word	1074528028
 728 01e8 20FF0B40 		.word	1074528032
 729              		.cfi_endproc
 730              	.LFE6:
 731              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 732              		.section	.text.CySysLvdEnable,"ax",%progbits
 733              		.align	2
 734              		.global	CySysLvdEnable
 735              		.code	16
 736              		.thumb_func
 737              		.type	CySysLvdEnable, %function
 738              	CySysLvdEnable:
 739              	.LFB7:
 825:Generated_Source\PSoC4/CyLib.c **** 
 826:Generated_Source\PSoC4/CyLib.c **** #else
 827:Generated_Source\PSoC4/CyLib.c **** 
 828:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 829:Generated_Source\PSoC4/CyLib.c ****     {
 830:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 831:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 832:Generated_Source\PSoC4/CyLib.c **** 
 833:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 834:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 835:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 836:Generated_Source\PSoC4/CyLib.c ****         
 837:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 839:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 840:Generated_Source\PSoC4/CyLib.c **** 
 841:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 842:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 843:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 844:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 845:Generated_Source\PSoC4/CyLib.c ****         #else
 846:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 847:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 848:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 29


 849:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 850:Generated_Source\PSoC4/CyLib.c ****         {
 851:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 852:Generated_Source\PSoC4/CyLib.c **** 
 853:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 854:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 855:Generated_Source\PSoC4/CyLib.c ****                 {
 856:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 857:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 858:Generated_Source\PSoC4/CyLib.c ****                 }
 859:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 860:Generated_Source\PSoC4/CyLib.c **** 
 861:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 862:Generated_Source\PSoC4/CyLib.c **** 
 863:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 864:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 865:Generated_Source\PSoC4/CyLib.c ****                     {
 866:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 869:Generated_Source\PSoC4/CyLib.c ****                     {
 870:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 871:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 872:Generated_Source\PSoC4/CyLib.c ****                     }
 873:Generated_Source\PSoC4/CyLib.c **** 
 874:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 875:Generated_Source\PSoC4/CyLib.c ****                     }
 876:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 877:Generated_Source\PSoC4/CyLib.c **** 
 878:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 879:Generated_Source\PSoC4/CyLib.c **** 
 880:Generated_Source\PSoC4/CyLib.c **** 
 881:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 882:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 883:Generated_Source\PSoC4/CyLib.c **** 
 884:Generated_Source\PSoC4/CyLib.c **** 
 885:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 886:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 888:Generated_Source\PSoC4/CyLib.c ****                 {
 889:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 890:Generated_Source\PSoC4/CyLib.c ****                 }
 891:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 892:Generated_Source\PSoC4/CyLib.c ****                 {
 893:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 894:Generated_Source\PSoC4/CyLib.c ****                 }
 895:Generated_Source\PSoC4/CyLib.c ****                 else
 896:Generated_Source\PSoC4/CyLib.c ****                 {
 897:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 898:Generated_Source\PSoC4/CyLib.c ****                 }
 899:Generated_Source\PSoC4/CyLib.c ****             #else
 900:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 901:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 902:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 903:Generated_Source\PSoC4/CyLib.c **** 
 904:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
 905:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 30


 906:Generated_Source\PSoC4/CyLib.c **** 
 907:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 908:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 909:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 910:Generated_Source\PSoC4/CyLib.c **** 
 911:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 912:Generated_Source\PSoC4/CyLib.c **** 
 913:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 914:Generated_Source\PSoC4/CyLib.c ****             {
 915:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 916:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 917:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 918:Generated_Source\PSoC4/CyLib.c **** 
 919:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 922:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 923:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 924:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 925:Generated_Source\PSoC4/CyLib.c ****             }
 926:Generated_Source\PSoC4/CyLib.c **** 
 927:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 928:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 929:Generated_Source\PSoC4/CyLib.c ****                 {
 930:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 931:Generated_Source\PSoC4/CyLib.c ****                 }
 932:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 933:Generated_Source\PSoC4/CyLib.c ****         
 934:Generated_Source\PSoC4/CyLib.c ****         
 935:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 936:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
 937:Generated_Source\PSoC4/CyLib.c ****                 {
 938:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 939:Generated_Source\PSoC4/CyLib.c ****                 }
 940:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 941:Generated_Source\PSoC4/CyLib.c **** 
 942:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 943:Generated_Source\PSoC4/CyLib.c ****         }
 944:Generated_Source\PSoC4/CyLib.c ****         else
 945:Generated_Source\PSoC4/CyLib.c ****         {
 946:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 947:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 948:Generated_Source\PSoC4/CyLib.c ****         }
 949:Generated_Source\PSoC4/CyLib.c ****     }
 950:Generated_Source\PSoC4/CyLib.c **** 
 951:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 952:Generated_Source\PSoC4/CyLib.c **** 
 953:Generated_Source\PSoC4/CyLib.c **** 
 954:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 955:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 956:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 957:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 958:Generated_Source\PSoC4/CyLib.c ****     *
 959:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 960:Generated_Source\PSoC4/CyLib.c ****     *
 961:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
 962:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 31


 963:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 964:Generated_Source\PSoC4/CyLib.c ****     *
 965:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 966:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 967:Generated_Source\PSoC4/CyLib.c ****     *
 968:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 969:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 970:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 971:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 972:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 973:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 974:Generated_Source\PSoC4/CyLib.c ****     *
 975:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 976:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 977:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 978:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 979:Generated_Source\PSoC4/CyLib.c ****     *
 980:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 981:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 982:Generated_Source\PSoC4/CyLib.c ****     {
 983:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 984:Generated_Source\PSoC4/CyLib.c **** 
 985:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 986:Generated_Source\PSoC4/CyLib.c **** 
 987:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 988:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 989:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 990:Generated_Source\PSoC4/CyLib.c **** 
 991:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 992:Generated_Source\PSoC4/CyLib.c ****     }
 993:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
 994:Generated_Source\PSoC4/CyLib.c **** 
 995:Generated_Source\PSoC4/CyLib.c **** 
 996:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 997:Generated_Source\PSoC4/CyLib.c **** 
 998:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 999:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1000:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1001:Generated_Source\PSoC4/CyLib.c ****     *
1002:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1003:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1004:Generated_Source\PSoC4/CyLib.c ****     *
1005:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1006:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1007:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1008:Generated_Source\PSoC4/CyLib.c ****     * called.
1009:Generated_Source\PSoC4/CyLib.c ****     *
1010:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1011:Generated_Source\PSoC4/CyLib.c ****     *
1012:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1013:Generated_Source\PSoC4/CyLib.c ****     *
1014:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1015:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1016:Generated_Source\PSoC4/CyLib.c ****     *
1017:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1018:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1019:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 32


1020:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1021:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1022:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1023:Generated_Source\PSoC4/CyLib.c ****     *
1024:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1025:Generated_Source\PSoC4/CyLib.c ****     *
1026:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1027:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1028:Generated_Source\PSoC4/CyLib.c ****     {
1029:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1030:Generated_Source\PSoC4/CyLib.c **** 
1031:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1032:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1033:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1036:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
1037:Generated_Source\PSoC4/CyLib.c **** 
1038:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1039:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1040:Generated_Source\PSoC4/CyLib.c ****         
1041:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1042:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1043:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1044:Generated_Source\PSoC4/CyLib.c ****             
1045:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1046:Generated_Source\PSoC4/CyLib.c ****             {
1047:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1048:Generated_Source\PSoC4/CyLib.c ****             }
1049:Generated_Source\PSoC4/CyLib.c ****             else
1050:Generated_Source\PSoC4/CyLib.c ****             {
1051:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1052:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1053:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1054:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1055:Generated_Source\PSoC4/CyLib.c ****             
1056:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1057:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1058:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1059:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1060:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1061:Generated_Source\PSoC4/CyLib.c ****                 
1062:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1063:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1064:Generated_Source\PSoC4/CyLib.c ****                 {
1065:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1066:Generated_Source\PSoC4/CyLib.c ****                 }
1067:Generated_Source\PSoC4/CyLib.c ****                 
1068:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1069:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1070:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1071:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1072:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1073:Generated_Source\PSoC4/CyLib.c **** 
1074:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1075:Generated_Source\PSoC4/CyLib.c ****                 {
1076:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 33


1077:Generated_Source\PSoC4/CyLib.c ****                 }
1078:Generated_Source\PSoC4/CyLib.c **** 
1079:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1080:Generated_Source\PSoC4/CyLib.c ****                 {
1081:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1082:Generated_Source\PSoC4/CyLib.c ****                 }
1083:Generated_Source\PSoC4/CyLib.c ****                 
1084:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1085:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1086:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1087:Generated_Source\PSoC4/CyLib.c ****                 
1088:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1089:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1090:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1091:Generated_Source\PSoC4/CyLib.c ****                 #else
1092:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1093:Generated_Source\PSoC4/CyLib.c ****                 #endif
1094:Generated_Source\PSoC4/CyLib.c ****                 
1095:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1096:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1097:Generated_Source\PSoC4/CyLib.c ****                 {
1098:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1099:Generated_Source\PSoC4/CyLib.c ****                 }
1100:Generated_Source\PSoC4/CyLib.c ****                 
1101:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1102:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1103:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1104:Generated_Source\PSoC4/CyLib.c ****                                             
1105:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1106:Generated_Source\PSoC4/CyLib.c ****                 {
1107:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1108:Generated_Source\PSoC4/CyLib.c ****                 }
1109:Generated_Source\PSoC4/CyLib.c **** 
1110:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1111:Generated_Source\PSoC4/CyLib.c ****                 
1112:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1113:Generated_Source\PSoC4/CyLib.c ****                 
1114:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1115:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1116:Generated_Source\PSoC4/CyLib.c ****                 
1117:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1118:Generated_Source\PSoC4/CyLib.c ****                 {
1119:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1120:Generated_Source\PSoC4/CyLib.c ****                 }
1121:Generated_Source\PSoC4/CyLib.c ****                 
1122:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1123:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1124:Generated_Source\PSoC4/CyLib.c ****                 
1125:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1126:Generated_Source\PSoC4/CyLib.c ****                 {
1127:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1128:Generated_Source\PSoC4/CyLib.c ****                 }
1129:Generated_Source\PSoC4/CyLib.c ****                 
1130:Generated_Source\PSoC4/CyLib.c ****             }
1131:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 */
1132:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1133:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 34


1134:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1135:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1136:Generated_Source\PSoC4/CyLib.c **** 
1137:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
1138:Generated_Source\PSoC4/CyLib.c ****         {
1139:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
1140:Generated_Source\PSoC4/CyLib.c **** 
1141:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
1142:Generated_Source\PSoC4/CyLib.c ****             {
1143:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
1144:Generated_Source\PSoC4/CyLib.c **** 
1145:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
1146:Generated_Source\PSoC4/CyLib.c ****                 {
1147:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
1148:Generated_Source\PSoC4/CyLib.c ****                     break;
1149:Generated_Source\PSoC4/CyLib.c ****                 }
1150:Generated_Source\PSoC4/CyLib.c ****             }
1151:Generated_Source\PSoC4/CyLib.c **** 
1152:Generated_Source\PSoC4/CyLib.c ****         }
1153:Generated_Source\PSoC4/CyLib.c **** 
1154:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
1155:Generated_Source\PSoC4/CyLib.c ****     }
1156:Generated_Source\PSoC4/CyLib.c **** 
1157:Generated_Source\PSoC4/CyLib.c **** 
1158:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1159:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1160:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1161:Generated_Source\PSoC4/CyLib.c ****     *
1162:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1163:Generated_Source\PSoC4/CyLib.c ****     *
1164:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1165:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1166:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1167:Generated_Source\PSoC4/CyLib.c ****     *
1168:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1169:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1170:Generated_Source\PSoC4/CyLib.c ****     {
1171:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1172:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1173:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1174:Generated_Source\PSoC4/CyLib.c **** 
1175:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1176:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1177:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1178:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1179:Generated_Source\PSoC4/CyLib.c ****         #else
1180:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1181:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1182:Generated_Source\PSoC4/CyLib.c ****     }
1183:Generated_Source\PSoC4/CyLib.c **** 
1184:Generated_Source\PSoC4/CyLib.c **** 
1185:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1186:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1187:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1188:Generated_Source\PSoC4/CyLib.c ****     *
1189:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1190:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 35


1191:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1192:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1193:Generated_Source\PSoC4/CyLib.c ****     *
1194:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1195:Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1196:Generated_Source\PSoC4/CyLib.c ****     *
1197:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1198:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1199:Generated_Source\PSoC4/CyLib.c ****     *
1200:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1201:Generated_Source\PSoC4/CyLib.c ****     *
1202:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1203:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1204:Generated_Source\PSoC4/CyLib.c ****     {
1205:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1206:Generated_Source\PSoC4/CyLib.c **** 
1207:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1208:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
1209:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1210:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1211:Generated_Source\PSoC4/CyLib.c **** 
1212:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1213:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1214:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1215:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1216:Generated_Source\PSoC4/CyLib.c ****         #else
1217:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1218:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1219:Generated_Source\PSoC4/CyLib.c **** 
1220:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1221:Generated_Source\PSoC4/CyLib.c ****     }
1222:Generated_Source\PSoC4/CyLib.c **** 
1223:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1224:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1225:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1226:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1227:Generated_Source\PSoC4/CyLib.c ****         *
1228:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1229:Generated_Source\PSoC4/CyLib.c ****         *
1230:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1231:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1232:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1233:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1234:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1235:Generated_Source\PSoC4/CyLib.c ****         *
1236:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1237:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1238:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1239:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1240:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1241:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1242:Generated_Source\PSoC4/CyLib.c ****         *
1243:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1244:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1245:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1246:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1247:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 36


1248:Generated_Source\PSoC4/CyLib.c ****         *
1249:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1250:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1251:Generated_Source\PSoC4/CyLib.c ****         {
1252:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1253:Generated_Source\PSoC4/CyLib.c **** 
1254:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
1255:Generated_Source\PSoC4/CyLib.c ****             {
1256:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
1257:Generated_Source\PSoC4/CyLib.c **** 
1258:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
1259:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
1260:Generated_Source\PSoC4/CyLib.c **** 
1261:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
1262:Generated_Source\PSoC4/CyLib.c ****             }
1263:Generated_Source\PSoC4/CyLib.c ****             else
1264:Generated_Source\PSoC4/CyLib.c ****             {
1265:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1266:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1267:Generated_Source\PSoC4/CyLib.c ****             }
1268:Generated_Source\PSoC4/CyLib.c ****         }
1269:Generated_Source\PSoC4/CyLib.c **** 
1270:Generated_Source\PSoC4/CyLib.c ****     #else
1271:Generated_Source\PSoC4/CyLib.c **** 
1272:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1273:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1274:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1275:Generated_Source\PSoC4/CyLib.c ****         *
1276:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1277:Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1278:Generated_Source\PSoC4/CyLib.c ****         *
1279:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1280:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1281:Generated_Source\PSoC4/CyLib.c ****         *
1282:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1283:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1284:Generated_Source\PSoC4/CyLib.c ****         *
1285:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1286:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1287:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1288:Generated_Source\PSoC4/CyLib.c ****         *
1289:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1290:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1291:Generated_Source\PSoC4/CyLib.c ****         *
1292:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1293:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1294:Generated_Source\PSoC4/CyLib.c ****         *
1295:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1296:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1297:Generated_Source\PSoC4/CyLib.c ****         *
1298:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1299:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1300:Generated_Source\PSoC4/CyLib.c ****         *
1301:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1302:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1303:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1304:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 37


1305:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1306:Generated_Source\PSoC4/CyLib.c ****         *
1307:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1308:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1309:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1310:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1311:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1312:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1313:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1314:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1315:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1316:Generated_Source\PSoC4/CyLib.c ****         *
1317:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1318:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1319:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1320:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1321:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1322:Generated_Source\PSoC4/CyLib.c ****         *
1323:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1324:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1325:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1326:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1327:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1328:Generated_Source\PSoC4/CyLib.c ****         *
1329:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1330:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1331:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1332:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1333:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1334:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1335:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1336:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1337:Generated_Source\PSoC4/CyLib.c ****         *
1338:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1339:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1340:Generated_Source\PSoC4/CyLib.c ****         {
1341:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1342:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1343:Generated_Source\PSoC4/CyLib.c **** 
1344:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1345:Generated_Source\PSoC4/CyLib.c **** 
1346:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1347:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1348:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1349:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1350:Generated_Source\PSoC4/CyLib.c **** 
1351:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1352:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1353:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1354:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1355:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1356:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1357:Generated_Source\PSoC4/CyLib.c **** 
1358:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1359:Generated_Source\PSoC4/CyLib.c **** 
1360:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1361:Generated_Source\PSoC4/CyLib.c ****         }
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 38


1362:Generated_Source\PSoC4/CyLib.c **** 
1363:Generated_Source\PSoC4/CyLib.c **** 
1364:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1365:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1366:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1367:Generated_Source\PSoC4/CyLib.c ****         *
1368:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1369:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1370:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1371:Generated_Source\PSoC4/CyLib.c ****         *
1372:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1373:Generated_Source\PSoC4/CyLib.c ****         *
1374:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1375:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1376:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1377:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1378:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1379:Generated_Source\PSoC4/CyLib.c ****         *
1380:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1381:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1382:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1383:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1384:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1385:Generated_Source\PSoC4/CyLib.c ****         *
1386:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1387:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1388:Generated_Source\PSoC4/CyLib.c ****         *
1389:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1390:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1391:Generated_Source\PSoC4/CyLib.c ****         {
1392:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1393:Generated_Source\PSoC4/CyLib.c **** 
1394:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1395:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1396:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1397:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1398:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1399:Generated_Source\PSoC4/CyLib.c **** 
1400:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1401:Generated_Source\PSoC4/CyLib.c **** 
1402:Generated_Source\PSoC4/CyLib.c **** 
1403:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1404:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1405:Generated_Source\PSoC4/CyLib.c ****             {
1406:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1407:Generated_Source\PSoC4/CyLib.c ****             }
1408:Generated_Source\PSoC4/CyLib.c ****             else
1409:Generated_Source\PSoC4/CyLib.c ****             {
1410:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1411:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1412:Generated_Source\PSoC4/CyLib.c **** 
1413:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1414:Generated_Source\PSoC4/CyLib.c ****                 {
1415:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1416:Generated_Source\PSoC4/CyLib.c ****                 }
1417:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1418:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 39


1419:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1420:Generated_Source\PSoC4/CyLib.c ****                 }
1421:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1422:Generated_Source\PSoC4/CyLib.c ****                 {
1423:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1424:Generated_Source\PSoC4/CyLib.c ****                 }
1425:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1426:Generated_Source\PSoC4/CyLib.c ****                 {
1427:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1428:Generated_Source\PSoC4/CyLib.c ****                 }
1429:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1430:Generated_Source\PSoC4/CyLib.c ****                 {
1431:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1432:Generated_Source\PSoC4/CyLib.c ****                 }
1433:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1434:Generated_Source\PSoC4/CyLib.c ****                 {
1435:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1436:Generated_Source\PSoC4/CyLib.c ****                 }
1437:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1438:Generated_Source\PSoC4/CyLib.c ****                 {
1439:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1440:Generated_Source\PSoC4/CyLib.c ****                 }
1441:Generated_Source\PSoC4/CyLib.c ****                 else
1442:Generated_Source\PSoC4/CyLib.c ****                 {
1443:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1444:Generated_Source\PSoC4/CyLib.c ****                 }
1445:Generated_Source\PSoC4/CyLib.c **** 
1446:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1447:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1448:Generated_Source\PSoC4/CyLib.c **** 
1449:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1450:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1451:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1452:Generated_Source\PSoC4/CyLib.c ****                 {
1453:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1454:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1455:Generated_Source\PSoC4/CyLib.c ****                 }
1456:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1457:Generated_Source\PSoC4/CyLib.c ****                 {
1458:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1459:Generated_Source\PSoC4/CyLib.c ****                 }
1460:Generated_Source\PSoC4/CyLib.c ****                 else
1461:Generated_Source\PSoC4/CyLib.c ****                 {
1462:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1463:Generated_Source\PSoC4/CyLib.c ****                 }
1464:Generated_Source\PSoC4/CyLib.c **** 
1465:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1466:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1467:Generated_Source\PSoC4/CyLib.c ****                 {
1468:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1469:Generated_Source\PSoC4/CyLib.c ****                 }
1470:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1471:Generated_Source\PSoC4/CyLib.c ****                 {
1472:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1473:Generated_Source\PSoC4/CyLib.c ****                 }
1474:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1475:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 40


1476:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1477:Generated_Source\PSoC4/CyLib.c ****                 }
1478:Generated_Source\PSoC4/CyLib.c ****                 else
1479:Generated_Source\PSoC4/CyLib.c ****                 {
1480:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1481:Generated_Source\PSoC4/CyLib.c ****                 }
1482:Generated_Source\PSoC4/CyLib.c **** 
1483:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1484:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1485:Generated_Source\PSoC4/CyLib.c **** 
1486:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1487:Generated_Source\PSoC4/CyLib.c **** 
1488:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1489:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1490:Generated_Source\PSoC4/CyLib.c ****                 {
1491:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1492:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1493:Generated_Source\PSoC4/CyLib.c ****                 }
1494:Generated_Source\PSoC4/CyLib.c ****                 else
1495:Generated_Source\PSoC4/CyLib.c ****                 {
1496:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1497:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1498:Generated_Source\PSoC4/CyLib.c ****                     */
1499:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1500:Generated_Source\PSoC4/CyLib.c ****                 }
1501:Generated_Source\PSoC4/CyLib.c ****             }
1502:Generated_Source\PSoC4/CyLib.c **** 
1503:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1504:Generated_Source\PSoC4/CyLib.c ****         }
1505:Generated_Source\PSoC4/CyLib.c **** 
1506:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1507:Generated_Source\PSoC4/CyLib.c **** 
1508:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1509:Generated_Source\PSoC4/CyLib.c **** 
1510:Generated_Source\PSoC4/CyLib.c **** 
1511:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1512:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1513:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1514:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1515:Generated_Source\PSoC4/CyLib.c ****     *
1516:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1517:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1518:Generated_Source\PSoC4/CyLib.c ****     *
1519:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1520:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1521:Generated_Source\PSoC4/CyLib.c ****     *
1522:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1523:Generated_Source\PSoC4/CyLib.c ****     *
1524:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1525:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1526:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1527:Generated_Source\PSoC4/CyLib.c ****     *
1528:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1529:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1530:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1531:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1532:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 41


1533:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1534:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1535:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1536:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1537:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1538:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1539:Generated_Source\PSoC4/CyLib.c ****     *
1540:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1542:Generated_Source\PSoC4/CyLib.c ****     {
1543:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1544:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1545:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1546:Generated_Source\PSoC4/CyLib.c **** 
1547:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1548:Generated_Source\PSoC4/CyLib.c ****         {
1549:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1550:Generated_Source\PSoC4/CyLib.c **** 
1551:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1552:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1553:Generated_Source\PSoC4/CyLib.c **** 
1554:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1555:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1556:Generated_Source\PSoC4/CyLib.c **** 
1557:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1558:Generated_Source\PSoC4/CyLib.c **** 
1559:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1560:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1561:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1562:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1563:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1564:Generated_Source\PSoC4/CyLib.c **** 
1565:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1566:Generated_Source\PSoC4/CyLib.c ****             {
1567:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1568:Generated_Source\PSoC4/CyLib.c **** 
1569:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1570:Generated_Source\PSoC4/CyLib.c ****                 {
1571:Generated_Source\PSoC4/CyLib.c **** 
1572:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1573:Generated_Source\PSoC4/CyLib.c ****                     {
1574:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1575:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1576:Generated_Source\PSoC4/CyLib.c ****                         break;
1577:Generated_Source\PSoC4/CyLib.c ****                     }
1578:Generated_Source\PSoC4/CyLib.c **** 
1579:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1580:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1581:Generated_Source\PSoC4/CyLib.c ****                 }
1582:Generated_Source\PSoC4/CyLib.c ****             }
1583:Generated_Source\PSoC4/CyLib.c ****         }
1584:Generated_Source\PSoC4/CyLib.c ****         else
1585:Generated_Source\PSoC4/CyLib.c ****         {
1586:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1587:Generated_Source\PSoC4/CyLib.c ****         }
1588:Generated_Source\PSoC4/CyLib.c **** 
1589:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 42


1590:Generated_Source\PSoC4/CyLib.c ****     }
1591:Generated_Source\PSoC4/CyLib.c **** 
1592:Generated_Source\PSoC4/CyLib.c **** 
1593:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1594:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1595:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1596:Generated_Source\PSoC4/CyLib.c ****     *
1597:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1598:Generated_Source\PSoC4/CyLib.c ****     *
1599:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1600:Generated_Source\PSoC4/CyLib.c ****     *
1601:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1602:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1603:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1604:Generated_Source\PSoC4/CyLib.c ****     *
1605:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1606:Generated_Source\PSoC4/CyLib.c ****     *
1607:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1608:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1609:Generated_Source\PSoC4/CyLib.c ****     {
1610:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1611:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1612:Generated_Source\PSoC4/CyLib.c **** 
1613:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1614:Generated_Source\PSoC4/CyLib.c **** 
1615:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1616:Generated_Source\PSoC4/CyLib.c **** 
1617:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1618:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1619:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1620:Generated_Source\PSoC4/CyLib.c ****         {
1621:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1622:Generated_Source\PSoC4/CyLib.c ****         }
1623:Generated_Source\PSoC4/CyLib.c **** 
1624:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1625:Generated_Source\PSoC4/CyLib.c **** 
1626:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1627:Generated_Source\PSoC4/CyLib.c ****     }
1628:Generated_Source\PSoC4/CyLib.c **** 
1629:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1630:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1631:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1632:Generated_Source\PSoC4/CyLib.c ****     *
1633:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1634:Generated_Source\PSoC4/CyLib.c ****     *
1635:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1636:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1639:Generated_Source\PSoC4/CyLib.c ****     *
1640:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1641:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1642:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1643:Generated_Source\PSoC4/CyLib.c ****     *
1644:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1645:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1646:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 43


1647:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1650:Generated_Source\PSoC4/CyLib.c ****         {
1651:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1652:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1653:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1654:Generated_Source\PSoC4/CyLib.c ****         }
1655:Generated_Source\PSoC4/CyLib.c ****     }
1656:Generated_Source\PSoC4/CyLib.c **** 
1657:Generated_Source\PSoC4/CyLib.c **** 
1658:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1659:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1660:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1661:Generated_Source\PSoC4/CyLib.c ****     *
1662:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1663:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1664:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1665:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1666:Generated_Source\PSoC4/CyLib.c ****     *
1667:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1668:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1669:Generated_Source\PSoC4/CyLib.c ****     *
1670:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1671:Generated_Source\PSoC4/CyLib.c ****     *
1672:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1673:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1674:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1675:Generated_Source\PSoC4/CyLib.c ****     *
1676:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1677:Generated_Source\PSoC4/CyLib.c ****     * divider.
1678:Generated_Source\PSoC4/CyLib.c ****     *
1679:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1680:Generated_Source\PSoC4/CyLib.c ****     *
1681:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1682:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1683:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1684:Generated_Source\PSoC4/CyLib.c ****     *
1685:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1686:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1687:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1688:Generated_Source\PSoC4/CyLib.c ****     *
1689:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1690:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1691:Generated_Source\PSoC4/CyLib.c ****     {
1692:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1693:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1694:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1695:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1696:Generated_Source\PSoC4/CyLib.c **** 
1697:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1698:Generated_Source\PSoC4/CyLib.c **** 
1699:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1700:Generated_Source\PSoC4/CyLib.c **** 
1701:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1702:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1703:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 44


1704:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1705:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1706:Generated_Source\PSoC4/CyLib.c ****         {
1707:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1708:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1709:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1710:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1711:Generated_Source\PSoC4/CyLib.c **** 
1712:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1713:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1714:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1715:Generated_Source\PSoC4/CyLib.c **** 
1716:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1717:Generated_Source\PSoC4/CyLib.c **** 
1718:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1719:Generated_Source\PSoC4/CyLib.c ****         }
1720:Generated_Source\PSoC4/CyLib.c **** 
1721:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1722:Generated_Source\PSoC4/CyLib.c **** 
1723:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1724:Generated_Source\PSoC4/CyLib.c ****     }
1725:Generated_Source\PSoC4/CyLib.c **** 
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1728:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1729:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1732:Generated_Source\PSoC4/CyLib.c ****     *
1733:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1734:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1735:Generated_Source\PSoC4/CyLib.c ****     *
1736:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1737:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1738:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1739:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1740:Generated_Source\PSoC4/CyLib.c ****     *
1741:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1742:Generated_Source\PSoC4/CyLib.c ****     *
1743:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1744:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1745:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1746:Generated_Source\PSoC4/CyLib.c ****     *
1747:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1748:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1749:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1750:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1751:Generated_Source\PSoC4/CyLib.c ****     *
1752:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1753:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1754:Generated_Source\PSoC4/CyLib.c ****     *
1755:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1756:Generated_Source\PSoC4/CyLib.c ****     *
1757:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1758:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1759:Generated_Source\PSoC4/CyLib.c ****     {
1760:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 45


1761:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1762:Generated_Source\PSoC4/CyLib.c **** 
1763:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1764:Generated_Source\PSoC4/CyLib.c **** 
1765:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1766:Generated_Source\PSoC4/CyLib.c ****         {
1767:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1768:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1769:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1770:Generated_Source\PSoC4/CyLib.c ****         }
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1773:Generated_Source\PSoC4/CyLib.c ****     }
1774:Generated_Source\PSoC4/CyLib.c **** 
1775:Generated_Source\PSoC4/CyLib.c **** 
1776:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1777:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1778:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1779:Generated_Source\PSoC4/CyLib.c ****     *
1780:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1781:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1782:Generated_Source\PSoC4/CyLib.c ****     *
1783:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1784:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1785:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1786:Generated_Source\PSoC4/CyLib.c ****     *
1787:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1788:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1789:Generated_Source\PSoC4/CyLib.c ****     *
1790:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1791:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1792:Generated_Source\PSoC4/CyLib.c ****     {
1793:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1794:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1795:Generated_Source\PSoC4/CyLib.c **** 
1796:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1797:Generated_Source\PSoC4/CyLib.c **** 
1798:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1799:Generated_Source\PSoC4/CyLib.c **** 
1800:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1801:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1802:Generated_Source\PSoC4/CyLib.c **** 
1803:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1804:Generated_Source\PSoC4/CyLib.c **** 
1805:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1806:Generated_Source\PSoC4/CyLib.c ****     }
1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c **** 
1809:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1810:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1811:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1812:Generated_Source\PSoC4/CyLib.c ****     *
1813:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1814:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1815:Generated_Source\PSoC4/CyLib.c ****     *
1816:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1817:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 46


1818:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1819:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1820:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1821:Generated_Source\PSoC4/CyLib.c ****     *
1822:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1823:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1824:Generated_Source\PSoC4/CyLib.c ****     *
1825:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1826:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1827:Generated_Source\PSoC4/CyLib.c ****     {
1828:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1829:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1830:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1831:Generated_Source\PSoC4/CyLib.c **** 
1832:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1833:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1834:Generated_Source\PSoC4/CyLib.c **** 
1835:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1836:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1837:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1838:Generated_Source\PSoC4/CyLib.c ****         {
1839:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1840:Generated_Source\PSoC4/CyLib.c ****         }
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1843:Generated_Source\PSoC4/CyLib.c ****     }
1844:Generated_Source\PSoC4/CyLib.c **** 
1845:Generated_Source\PSoC4/CyLib.c **** 
1846:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1847:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1848:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1849:Generated_Source\PSoC4/CyLib.c ****     *
1850:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1851:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1852:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1853:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1856:Generated_Source\PSoC4/CyLib.c ****     *
1857:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1858:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1859:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1860:Generated_Source\PSoC4/CyLib.c ****     *
1861:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1862:Generated_Source\PSoC4/CyLib.c ****     *
1863:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1864:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1865:Generated_Source\PSoC4/CyLib.c ****     {
1866:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1867:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1868:Generated_Source\PSoC4/CyLib.c **** 
1869:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1870:Generated_Source\PSoC4/CyLib.c **** 
1871:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1872:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1873:Generated_Source\PSoC4/CyLib.c **** 
1874:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 47


1875:Generated_Source\PSoC4/CyLib.c **** 
1876:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1877:Generated_Source\PSoC4/CyLib.c ****     }
1878:Generated_Source\PSoC4/CyLib.c **** 
1879:Generated_Source\PSoC4/CyLib.c **** 
1880:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1881:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1882:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1883:Generated_Source\PSoC4/CyLib.c ****     *
1884:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1885:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1886:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1887:Generated_Source\PSoC4/CyLib.c ****     *
1888:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1889:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1890:Generated_Source\PSoC4/CyLib.c ****     *
1891:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1892:Generated_Source\PSoC4/CyLib.c ****     *
1893:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1894:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1895:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1896:Generated_Source\PSoC4/CyLib.c ****     *
1897:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1898:Generated_Source\PSoC4/CyLib.c ****     *
1899:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1900:Generated_Source\PSoC4/CyLib.c ****     *
1901:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1902:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1903:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1904:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1905:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1906:Generated_Source\PSoC4/CyLib.c ****     *
1907:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1908:Generated_Source\PSoC4/CyLib.c ****     *
1909:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1910:Generated_Source\PSoC4/CyLib.c ****     * frequency.
1911:Generated_Source\PSoC4/CyLib.c ****     *
1912:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1913:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1914:Generated_Source\PSoC4/CyLib.c ****     *
1915:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1916:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
1917:Generated_Source\PSoC4/CyLib.c ****     {
1918:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1919:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1920:Generated_Source\PSoC4/CyLib.c **** 
1921:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1922:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1923:Generated_Source\PSoC4/CyLib.c **** 
1924:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1925:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1926:Generated_Source\PSoC4/CyLib.c **** 
1927:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1928:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
1929:Generated_Source\PSoC4/CyLib.c **** 
1930:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1931:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 48


1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c **** 
1934:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1935:Generated_Source\PSoC4/CyLib.c **** 
1936:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1937:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1938:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1939:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1940:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1941:Generated_Source\PSoC4/CyLib.c ****         {
1942:Generated_Source\PSoC4/CyLib.c **** 
1943:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1944:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1945:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1946:Generated_Source\PSoC4/CyLib.c **** 
1947:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1948:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1949:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1950:Generated_Source\PSoC4/CyLib.c **** 
1951:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1952:Generated_Source\PSoC4/CyLib.c ****             {
1953:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1954:Generated_Source\PSoC4/CyLib.c ****                 {
1955:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1956:Generated_Source\PSoC4/CyLib.c **** 
1957:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1958:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1959:Generated_Source\PSoC4/CyLib.c **** 
1960:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1961:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1962:Generated_Source\PSoC4/CyLib.c **** 
1963:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1964:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1965:Generated_Source\PSoC4/CyLib.c **** 
1966:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1967:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1968:Generated_Source\PSoC4/CyLib.c ****                     {
1969:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1970:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1971:Generated_Source\PSoC4/CyLib.c ****                         break;
1972:Generated_Source\PSoC4/CyLib.c ****                     }
1973:Generated_Source\PSoC4/CyLib.c ****                 }
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c **** 
1976:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1977:Generated_Source\PSoC4/CyLib.c ****                 {
1978:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1979:Generated_Source\PSoC4/CyLib.c ****                     {
1980:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1981:Generated_Source\PSoC4/CyLib.c ****                     }
1982:Generated_Source\PSoC4/CyLib.c ****                 }
1983:Generated_Source\PSoC4/CyLib.c ****             }
1984:Generated_Source\PSoC4/CyLib.c **** 
1985:Generated_Source\PSoC4/CyLib.c ****         }
1986:Generated_Source\PSoC4/CyLib.c **** 
1987:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1988:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 49


1989:Generated_Source\PSoC4/CyLib.c **** 
1990:Generated_Source\PSoC4/CyLib.c **** 
1991:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
1993:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLib.c ****     *
1995:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1996:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2001:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2002:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
2003:Generated_Source\PSoC4/CyLib.c ****     *
2004:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2005:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2006:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
2007:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2008:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
2009:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
2010:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
2011:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
2012:Generated_Source\PSoC4/CyLib.c ****     *
2013:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2014:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2015:Generated_Source\PSoC4/CyLib.c ****     {
2016:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2017:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2018:Generated_Source\PSoC4/CyLib.c **** 
2019:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2020:Generated_Source\PSoC4/CyLib.c **** 
2021:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2022:Generated_Source\PSoC4/CyLib.c ****         {
2023:Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2024:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
2025:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
2026:Generated_Source\PSoC4/CyLib.c ****         }
2027:Generated_Source\PSoC4/CyLib.c **** 
2028:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2029:Generated_Source\PSoC4/CyLib.c ****     }
2030:Generated_Source\PSoC4/CyLib.c **** 
2031:Generated_Source\PSoC4/CyLib.c **** 
2032:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2033:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2034:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2035:Generated_Source\PSoC4/CyLib.c ****     *
2036:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2037:Generated_Source\PSoC4/CyLib.c ****     *
2038:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2039:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2040:Generated_Source\PSoC4/CyLib.c ****     *
2041:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
2042:Generated_Source\PSoC4/CyLib.c ****     *
2043:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2044:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2045:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 50


2046:Generated_Source\PSoC4/CyLib.c ****     *
2047:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2048:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2049:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2050:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2051:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2052:Generated_Source\PSoC4/CyLib.c ****     *
2053:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2054:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2055:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2056:Generated_Source\PSoC4/CyLib.c ****     *
2057:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2058:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
2059:Generated_Source\PSoC4/CyLib.c ****     {
2060:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2061:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2062:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2063:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2064:Generated_Source\PSoC4/CyLib.c **** 
2065:Generated_Source\PSoC4/CyLib.c **** 
2066:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2067:Generated_Source\PSoC4/CyLib.c **** 
2068:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2069:Generated_Source\PSoC4/CyLib.c **** 
2070:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2071:Generated_Source\PSoC4/CyLib.c ****         {
2072:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2073:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2074:Generated_Source\PSoC4/CyLib.c **** 
2075:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2076:Generated_Source\PSoC4/CyLib.c **** 
2077:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2078:Generated_Source\PSoC4/CyLib.c ****         }
2079:Generated_Source\PSoC4/CyLib.c **** 
2080:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2081:Generated_Source\PSoC4/CyLib.c **** 
2082:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2083:Generated_Source\PSoC4/CyLib.c ****     }
2084:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c **** 
2087:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2088:Generated_Source\PSoC4/CyLib.c **** 
2089:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2090:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2091:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2092:Generated_Source\PSoC4/CyLib.c ****     *
2093:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2094:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2095:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2096:Generated_Source\PSoC4/CyLib.c ****     *
2097:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2098:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2099:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2100:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2101:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2102:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 51


2103:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2104:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2105:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2106:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2107:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2108:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2109:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2110:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2111:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2112:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2113:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2114:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2115:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2116:Generated_Source\PSoC4/CyLib.c ****     *
2117:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2118:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2119:Generated_Source\PSoC4/CyLib.c ****     {
 740              		.loc 1 2119 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 8
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 82B0     		sub	sp, sp, #8
 749              		.cfi_def_cfa_offset 16
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
2120:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2121:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 753              		.loc 1 2121 0
 754 0008 144B     		ldr	r3, .L38
 755 000a 144A     		ldr	r2, .L38
 756 000c 1268     		ldr	r2, [r2]
 757 000e 0221     		movs	r1, #2
 758 0010 8A43     		bics	r2, r1
 759 0012 1A60     		str	r2, [r3]
2122:Generated_Source\PSoC4/CyLib.c **** 
2123:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2124:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 760              		.loc 1 2124 0
 761 0014 124B     		ldr	r3, .L38+4
 762 0016 124A     		ldr	r2, .L38+4
 763 0018 1268     		ldr	r2, [r2]
 764 001a 1E21     		movs	r1, #30
 765 001c 8A43     		bics	r2, r1
 766 001e 1100     		movs	r1, r2
2125:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 767              		.loc 1 2125 0
 768 0020 7A68     		ldr	r2, [r7, #4]
 769 0022 5200     		lsls	r2, r2, #1
 770 0024 1E20     		movs	r0, #30
 771 0026 0240     		ands	r2, r0
2124:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 772              		.loc 1 2124 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 52


 773 0028 0A43     		orrs	r2, r1
 774 002a 1A60     		str	r2, [r3]
2126:Generated_Source\PSoC4/CyLib.c **** 
2127:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2128:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 775              		.loc 1 2128 0
 776 002c 0C4B     		ldr	r3, .L38+4
 777 002e 0C4A     		ldr	r2, .L38+4
 778 0030 1268     		ldr	r2, [r2]
 779 0032 0121     		movs	r1, #1
 780 0034 0A43     		orrs	r2, r1
 781 0036 1A60     		str	r2, [r3]
2129:Generated_Source\PSoC4/CyLib.c **** 
2130:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2131:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 782              		.loc 1 2131 0
 783 0038 FA23     		movs	r3, #250
 784 003a 9B00     		lsls	r3, r3, #2
 785 003c 1800     		movs	r0, r3
 786 003e FFF7FEFF 		bl	CyDelayUs
2132:Generated_Source\PSoC4/CyLib.c **** 
2133:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2134:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 787              		.loc 1 2134 0
 788 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
2135:Generated_Source\PSoC4/CyLib.c **** 
2136:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2137:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 789              		.loc 1 2137 0
 790 0046 054B     		ldr	r3, .L38
 791 0048 044A     		ldr	r2, .L38
 792 004a 1268     		ldr	r2, [r2]
 793 004c 0221     		movs	r1, #2
 794 004e 0A43     		orrs	r2, r1
 795 0050 1A60     		str	r2, [r3]
2138:Generated_Source\PSoC4/CyLib.c ****     }
 796              		.loc 1 2138 0
 797 0052 C046     		nop
 798 0054 BD46     		mov	sp, r7
 799 0056 02B0     		add	sp, sp, #8
 800              		@ sp needed
 801 0058 80BD     		pop	{r7, pc}
 802              	.L39:
 803 005a C046     		.align	2
 804              	.L38:
 805 005c 08000B40 		.word	1074462728
 806 0060 18000B40 		.word	1074462744
 807              		.cfi_endproc
 808              	.LFE7:
 809              		.size	CySysLvdEnable, .-CySysLvdEnable
 810              		.section	.text.CySysLvdDisable,"ax",%progbits
 811              		.align	2
 812              		.global	CySysLvdDisable
 813              		.code	16
 814              		.thumb_func
 815              		.type	CySysLvdDisable, %function
 816              	CySysLvdDisable:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 53


 817              	.LFB8:
2139:Generated_Source\PSoC4/CyLib.c **** 
2140:Generated_Source\PSoC4/CyLib.c **** 
2141:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2142:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2143:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2144:Generated_Source\PSoC4/CyLib.c ****     *
2145:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2146:Generated_Source\PSoC4/CyLib.c ****     *
2147:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2149:Generated_Source\PSoC4/CyLib.c ****     {
 818              		.loc 1 2149 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 00AF     		add	r7, sp, #0
 827              		.cfi_def_cfa_register 7
2150:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 828              		.loc 1 2150 0
 829 0004 074B     		ldr	r3, .L41
 830 0006 074A     		ldr	r2, .L41
 831 0008 1268     		ldr	r2, [r2]
 832 000a 0221     		movs	r1, #2
 833 000c 8A43     		bics	r2, r1
 834 000e 1A60     		str	r2, [r3]
2151:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 835              		.loc 1 2151 0
 836 0010 054B     		ldr	r3, .L41+4
 837 0012 054A     		ldr	r2, .L41+4
 838 0014 1268     		ldr	r2, [r2]
 839 0016 0121     		movs	r1, #1
 840 0018 8A43     		bics	r2, r1
 841 001a 1A60     		str	r2, [r3]
2152:Generated_Source\PSoC4/CyLib.c ****     }
 842              		.loc 1 2152 0
 843 001c C046     		nop
 844 001e BD46     		mov	sp, r7
 845              		@ sp needed
 846 0020 80BD     		pop	{r7, pc}
 847              	.L42:
 848 0022 C046     		.align	2
 849              	.L41:
 850 0024 08000B40 		.word	1074462728
 851 0028 18000B40 		.word	1074462744
 852              		.cfi_endproc
 853              	.LFE8:
 854              		.size	CySysLvdDisable, .-CySysLvdDisable
 855              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 856              		.align	2
 857              		.global	CySysLvdGetInterruptSource
 858              		.code	16
 859              		.thumb_func
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 54


 860              		.type	CySysLvdGetInterruptSource, %function
 861              	CySysLvdGetInterruptSource:
 862              	.LFB9:
2153:Generated_Source\PSoC4/CyLib.c **** 
2154:Generated_Source\PSoC4/CyLib.c **** 
2155:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2156:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2157:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2158:Generated_Source\PSoC4/CyLib.c ****     *
2159:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2160:Generated_Source\PSoC4/CyLib.c ****     *
2161:Generated_Source\PSoC4/CyLib.c ****     * \return
2162:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2163:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2164:Generated_Source\PSoC4/CyLib.c ****     *
2165:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2166:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2167:Generated_Source\PSoC4/CyLib.c ****     {
 863              		.loc 1 2167 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
2168:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 873              		.loc 1 2168 0
 874 0004 034B     		ldr	r3, .L45
 875 0006 1B68     		ldr	r3, [r3]
 876 0008 0222     		movs	r2, #2
 877 000a 1340     		ands	r3, r2
2169:Generated_Source\PSoC4/CyLib.c ****     }
 878              		.loc 1 2169 0
 879 000c 1800     		movs	r0, r3
 880 000e BD46     		mov	sp, r7
 881              		@ sp needed
 882 0010 80BD     		pop	{r7, pc}
 883              	.L46:
 884 0012 C046     		.align	2
 885              	.L45:
 886 0014 04000B40 		.word	1074462724
 887              		.cfi_endproc
 888              	.LFE9:
 889              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 890              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 891              		.align	2
 892              		.global	CySysLvdClearInterrupt
 893              		.code	16
 894              		.thumb_func
 895              		.type	CySysLvdClearInterrupt, %function
 896              	CySysLvdClearInterrupt:
 897              	.LFB10:
2170:Generated_Source\PSoC4/CyLib.c **** 
2171:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 55


2172:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2173:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2174:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2175:Generated_Source\PSoC4/CyLib.c ****     *
2176:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2177:Generated_Source\PSoC4/CyLib.c ****     *
2178:Generated_Source\PSoC4/CyLib.c ****     * \return
2179:Generated_Source\PSoC4/CyLib.c ****     *  None
2180:Generated_Source\PSoC4/CyLib.c ****     *
2181:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2182:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2183:Generated_Source\PSoC4/CyLib.c ****     {
 898              		.loc 1 2183 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902 0000 80B5     		push	{r7, lr}
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 00AF     		add	r7, sp, #0
 907              		.cfi_def_cfa_register 7
2184:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 908              		.loc 1 2184 0
 909 0004 024B     		ldr	r3, .L48
 910 0006 0222     		movs	r2, #2
 911 0008 1A60     		str	r2, [r3]
2185:Generated_Source\PSoC4/CyLib.c ****     }
 912              		.loc 1 2185 0
 913 000a C046     		nop
 914 000c BD46     		mov	sp, r7
 915              		@ sp needed
 916 000e 80BD     		pop	{r7, pc}
 917              	.L49:
 918              		.align	2
 919              	.L48:
 920 0010 04000B40 		.word	1074462724
 921              		.cfi_endproc
 922              	.LFE10:
 923              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 924              		.section	.text.CySysGetResetReason,"ax",%progbits
 925              		.align	2
 926              		.global	CySysGetResetReason
 927              		.code	16
 928              		.thumb_func
 929              		.type	CySysGetResetReason, %function
 930              	CySysGetResetReason:
 931              	.LFB11:
2186:Generated_Source\PSoC4/CyLib.c **** 
2187:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2188:Generated_Source\PSoC4/CyLib.c **** 
2189:Generated_Source\PSoC4/CyLib.c **** 
2190:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2191:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2192:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2193:Generated_Source\PSoC4/CyLib.c **** *
2194:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 56


2195:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2196:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2197:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2198:Generated_Source\PSoC4/CyLib.c **** *
2199:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2200:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2201:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2202:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2203:Generated_Source\PSoC4/CyLib.c **** *
2204:Generated_Source\PSoC4/CyLib.c **** * \return
2205:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2206:Generated_Source\PSoC4/CyLib.c **** *
2207:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2208:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2209:Generated_Source\PSoC4/CyLib.c **** {
 932              		.loc 1 2209 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 16
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 84B0     		sub	sp, sp, #16
 941              		.cfi_def_cfa_offset 24
 942 0004 00AF     		add	r7, sp, #0
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]
2210:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2211:Generated_Source\PSoC4/CyLib.c **** 
2212:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 945              		.loc 1 2212 0
 946 0008 7B68     		ldr	r3, [r7, #4]
 947 000a 1922     		movs	r2, #25
 948 000c 1340     		ands	r3, r2
 949 000e 7B60     		str	r3, [r7, #4]
2213:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 950              		.loc 1 2213 0
 951 0010 064B     		ldr	r3, .L52
 952 0012 1B68     		ldr	r3, [r3]
 953 0014 1922     		movs	r2, #25
 954 0016 1340     		ands	r3, r2
 955 0018 FB60     		str	r3, [r7, #12]
2214:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2215:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 956              		.loc 1 2215 0
 957 001a 044B     		ldr	r3, .L52
 958 001c 7A68     		ldr	r2, [r7, #4]
 959 001e 1A60     		str	r2, [r3]
2216:Generated_Source\PSoC4/CyLib.c **** 
2217:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 960              		.loc 1 2217 0
 961 0020 FB68     		ldr	r3, [r7, #12]
2218:Generated_Source\PSoC4/CyLib.c **** }
 962              		.loc 1 2218 0
 963 0022 1800     		movs	r0, r3
 964 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 57


 965 0026 04B0     		add	sp, sp, #16
 966              		@ sp needed
 967 0028 80BD     		pop	{r7, pc}
 968              	.L53:
 969 002a C046     		.align	2
 970              	.L52:
 971 002c 00030B40 		.word	1074463488
 972              		.cfi_endproc
 973              	.LFE11:
 974              		.size	CySysGetResetReason, .-CySysGetResetReason
 975              		.section	.text.CyDisableInts,"ax",%progbits
 976              		.align	2
 977              		.global	CyDisableInts
 978              		.code	16
 979              		.thumb_func
 980              		.type	CyDisableInts, %function
 981              	CyDisableInts:
 982              	.LFB12:
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c **** 
2221:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2222:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2223:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2224:Generated_Source\PSoC4/CyLib.c **** *
2225:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2226:Generated_Source\PSoC4/CyLib.c **** *
2227:Generated_Source\PSoC4/CyLib.c **** * \return
2228:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2229:Generated_Source\PSoC4/CyLib.c **** *
2230:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2231:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2232:Generated_Source\PSoC4/CyLib.c **** {
 983              		.loc 1 2232 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 8
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 80B5     		push	{r7, lr}
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 82B0     		sub	sp, sp, #8
 992              		.cfi_def_cfa_offset 16
 993 0004 00AF     		add	r7, sp, #0
 994              		.cfi_def_cfa_register 7
2233:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2234:Generated_Source\PSoC4/CyLib.c **** 
2235:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2236:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 995              		.loc 1 2236 0
 996 0006 064B     		ldr	r3, .L56
 997 0008 1B68     		ldr	r3, [r3]
 998 000a 7B60     		str	r3, [r7, #4]
2237:Generated_Source\PSoC4/CyLib.c **** 
2238:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2239:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 999              		.loc 1 2239 0
 1000 000c 044B     		ldr	r3, .L56
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 58


 1001 000e 0122     		movs	r2, #1
 1002 0010 5242     		rsbs	r2, r2, #0
 1003 0012 1A60     		str	r2, [r3]
2240:Generated_Source\PSoC4/CyLib.c **** 
2241:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1004              		.loc 1 2241 0
 1005 0014 7B68     		ldr	r3, [r7, #4]
2242:Generated_Source\PSoC4/CyLib.c **** }
 1006              		.loc 1 2242 0
 1007 0016 1800     		movs	r0, r3
 1008 0018 BD46     		mov	sp, r7
 1009 001a 02B0     		add	sp, sp, #8
 1010              		@ sp needed
 1011 001c 80BD     		pop	{r7, pc}
 1012              	.L57:
 1013 001e C046     		.align	2
 1014              	.L56:
 1015 0020 80E100E0 		.word	-536813184
 1016              		.cfi_endproc
 1017              	.LFE12:
 1018              		.size	CyDisableInts, .-CyDisableInts
 1019              		.section	.text.CyEnableInts,"ax",%progbits
 1020              		.align	2
 1021              		.global	CyEnableInts
 1022              		.code	16
 1023              		.thumb_func
 1024              		.type	CyEnableInts, %function
 1025              	CyEnableInts:
 1026              	.LFB13:
2243:Generated_Source\PSoC4/CyLib.c **** 
2244:Generated_Source\PSoC4/CyLib.c **** 
2245:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2246:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2247:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2248:Generated_Source\PSoC4/CyLib.c **** *
2249:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2250:Generated_Source\PSoC4/CyLib.c **** *
2251:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2252:Generated_Source\PSoC4/CyLib.c **** *
2253:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2254:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2255:Generated_Source\PSoC4/CyLib.c **** {
 1027              		.loc 1 2255 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 82B0     		sub	sp, sp, #8
 1036              		.cfi_def_cfa_offset 16
 1037 0004 00AF     		add	r7, sp, #0
 1038              		.cfi_def_cfa_register 7
 1039 0006 7860     		str	r0, [r7, #4]
2256:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1040              		.loc 1 2256 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 59


 1041 0008 034B     		ldr	r3, .L59
 1042 000a 7A68     		ldr	r2, [r7, #4]
 1043 000c 1A60     		str	r2, [r3]
2257:Generated_Source\PSoC4/CyLib.c **** }
 1044              		.loc 1 2257 0
 1045 000e C046     		nop
 1046 0010 BD46     		mov	sp, r7
 1047 0012 02B0     		add	sp, sp, #8
 1048              		@ sp needed
 1049 0014 80BD     		pop	{r7, pc}
 1050              	.L60:
 1051 0016 C046     		.align	2
 1052              	.L59:
 1053 0018 00E100E0 		.word	-536813312
 1054              		.cfi_endproc
 1055              	.LFE13:
 1056              		.size	CyEnableInts, .-CyEnableInts
 1057              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1058              		.align	2
 1059              		.global	CyIntSetSysVector
 1060              		.code	16
 1061              		.thumb_func
 1062              		.type	CyIntSetSysVector, %function
 1063              	CyIntSetSysVector:
 1064              	.LFB14:
2258:Generated_Source\PSoC4/CyLib.c **** 
2259:Generated_Source\PSoC4/CyLib.c **** 
2260:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2261:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2262:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2263:Generated_Source\PSoC4/CyLib.c **** *
2264:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2265:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2266:Generated_Source\PSoC4/CyLib.c **** *
2267:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2268:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2269:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2270:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2271:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2272:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2273:Generated_Source\PSoC4/CyLib.c **** *
2274:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2275:Generated_Source\PSoC4/CyLib.c **** *
2276:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2277:Generated_Source\PSoC4/CyLib.c **** *
2278:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2279:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2280:Generated_Source\PSoC4/CyLib.c **** {
 1065              		.loc 1 2280 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 16
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              		.cfi_def_cfa_offset 8
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 60


 1074              		.cfi_def_cfa_offset 24
 1075 0004 00AF     		add	r7, sp, #0
 1076              		.cfi_def_cfa_register 7
 1077 0006 0200     		movs	r2, r0
 1078 0008 3960     		str	r1, [r7]
 1079 000a FB1D     		adds	r3, r7, #7
 1080 000c 1A70     		strb	r2, [r3]
2281:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2282:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1081              		.loc 1 2282 0
 1082 000e 8023     		movs	r3, #128
 1083 0010 9B05     		lsls	r3, r3, #22
 1084 0012 FB60     		str	r3, [r7, #12]
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1085              		.loc 1 2284 0
 1086 0014 FB1D     		adds	r3, r7, #7
 1087 0016 1B78     		ldrb	r3, [r3]
 1088 0018 0F2B     		cmp	r3, #15
 1089 001a 02D9     		bls	.L62
 1090              		.loc 1 2284 0 is_stmt 0 discriminator 1
 1091 001c 0020     		movs	r0, #0
 1092 001e FFF7FEFF 		bl	CyHalt
 1093              	.L62:
2285:Generated_Source\PSoC4/CyLib.c **** 
2286:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2287:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1094              		.loc 1 2287 0 is_stmt 1
 1095 0022 FB1D     		adds	r3, r7, #7
 1096 0024 1B78     		ldrb	r3, [r3]
 1097 0026 9B00     		lsls	r3, r3, #2
 1098 0028 FA68     		ldr	r2, [r7, #12]
 1099 002a D318     		adds	r3, r2, r3
 1100 002c 1B68     		ldr	r3, [r3]
 1101 002e BB60     		str	r3, [r7, #8]
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2290:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1102              		.loc 1 2290 0
 1103 0030 FB1D     		adds	r3, r7, #7
 1104 0032 1B78     		ldrb	r3, [r3]
 1105 0034 9B00     		lsls	r3, r3, #2
 1106 0036 FA68     		ldr	r2, [r7, #12]
 1107 0038 D318     		adds	r3, r2, r3
 1108 003a 3A68     		ldr	r2, [r7]
 1109 003c 1A60     		str	r2, [r3]
2291:Generated_Source\PSoC4/CyLib.c **** 
2292:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1110              		.loc 1 2292 0
 1111 003e BB68     		ldr	r3, [r7, #8]
2293:Generated_Source\PSoC4/CyLib.c **** }
 1112              		.loc 1 2293 0
 1113 0040 1800     		movs	r0, r3
 1114 0042 BD46     		mov	sp, r7
 1115 0044 04B0     		add	sp, sp, #16
 1116              		@ sp needed
 1117 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 61


 1118              		.cfi_endproc
 1119              	.LFE14:
 1120              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1121              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1122              		.align	2
 1123              		.global	CyIntGetSysVector
 1124              		.code	16
 1125              		.thumb_func
 1126              		.type	CyIntGetSysVector, %function
 1127              	CyIntGetSysVector:
 1128              	.LFB15:
2294:Generated_Source\PSoC4/CyLib.c **** 
2295:Generated_Source\PSoC4/CyLib.c **** 
2296:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2297:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2298:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2299:Generated_Source\PSoC4/CyLib.c **** *
2300:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2301:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2302:Generated_Source\PSoC4/CyLib.c **** *
2303:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2304:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2305:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2306:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2307:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2308:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2309:Generated_Source\PSoC4/CyLib.c **** *
2310:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2311:Generated_Source\PSoC4/CyLib.c **** *
2312:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2313:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2314:Generated_Source\PSoC4/CyLib.c **** {
 1129              		.loc 1 2314 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 16
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 84B0     		sub	sp, sp, #16
 1138              		.cfi_def_cfa_offset 24
 1139 0004 00AF     		add	r7, sp, #0
 1140              		.cfi_def_cfa_register 7
 1141 0006 0200     		movs	r2, r0
 1142 0008 FB1D     		adds	r3, r7, #7
 1143 000a 1A70     		strb	r2, [r3]
2315:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1144              		.loc 1 2315 0
 1145 000c 8023     		movs	r3, #128
 1146 000e 9B05     		lsls	r3, r3, #22
 1147 0010 FB60     		str	r3, [r7, #12]
2316:Generated_Source\PSoC4/CyLib.c **** 
2317:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1148              		.loc 1 2317 0
 1149 0012 FB1D     		adds	r3, r7, #7
 1150 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 62


 1151 0016 0F2B     		cmp	r3, #15
 1152 0018 02D9     		bls	.L65
 1153              		.loc 1 2317 0 is_stmt 0 discriminator 1
 1154 001a 0020     		movs	r0, #0
 1155 001c FFF7FEFF 		bl	CyHalt
 1156              	.L65:
2318:Generated_Source\PSoC4/CyLib.c **** 
2319:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1157              		.loc 1 2319 0 is_stmt 1
 1158 0020 FB1D     		adds	r3, r7, #7
 1159 0022 1B78     		ldrb	r3, [r3]
 1160 0024 9B00     		lsls	r3, r3, #2
 1161 0026 FA68     		ldr	r2, [r7, #12]
 1162 0028 D318     		adds	r3, r2, r3
 1163 002a 1B68     		ldr	r3, [r3]
2320:Generated_Source\PSoC4/CyLib.c **** }
 1164              		.loc 1 2320 0
 1165 002c 1800     		movs	r0, r3
 1166 002e BD46     		mov	sp, r7
 1167 0030 04B0     		add	sp, sp, #16
 1168              		@ sp needed
 1169 0032 80BD     		pop	{r7, pc}
 1170              		.cfi_endproc
 1171              	.LFE15:
 1172              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1173              		.section	.text.CyIntSetVector,"ax",%progbits
 1174              		.align	2
 1175              		.global	CyIntSetVector
 1176              		.code	16
 1177              		.thumb_func
 1178              		.type	CyIntSetVector, %function
 1179              	CyIntSetVector:
 1180              	.LFB16:
2321:Generated_Source\PSoC4/CyLib.c **** 
2322:Generated_Source\PSoC4/CyLib.c **** 
2323:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2324:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2325:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2326:Generated_Source\PSoC4/CyLib.c **** *
2327:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2328:Generated_Source\PSoC4/CyLib.c **** *
2329:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2330:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2331:Generated_Source\PSoC4/CyLib.c **** *
2332:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2333:Generated_Source\PSoC4/CyLib.c **** *
2334:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2335:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2336:Generated_Source\PSoC4/CyLib.c **** {
 1181              		.loc 1 2336 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 16
 1184              		@ frame_needed = 1, uses_anonymous_args = 0
 1185 0000 80B5     		push	{r7, lr}
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 7, -8
 1188              		.cfi_offset 14, -4
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 63


 1189 0002 84B0     		sub	sp, sp, #16
 1190              		.cfi_def_cfa_offset 24
 1191 0004 00AF     		add	r7, sp, #0
 1192              		.cfi_def_cfa_register 7
 1193 0006 0200     		movs	r2, r0
 1194 0008 3960     		str	r1, [r7]
 1195 000a FB1D     		adds	r3, r7, #7
 1196 000c 1A70     		strb	r2, [r3]
2337:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2338:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1197              		.loc 1 2338 0
 1198 000e 8023     		movs	r3, #128
 1199 0010 9B05     		lsls	r3, r3, #22
 1200 0012 FB60     		str	r3, [r7, #12]
2339:Generated_Source\PSoC4/CyLib.c **** 
2340:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1201              		.loc 1 2340 0
 1202 0014 FB1D     		adds	r3, r7, #7
 1203 0016 1B78     		ldrb	r3, [r3]
 1204 0018 1F2B     		cmp	r3, #31
 1205 001a 02D9     		bls	.L68
 1206              		.loc 1 2340 0 is_stmt 0 discriminator 1
 1207 001c 0020     		movs	r0, #0
 1208 001e FFF7FEFF 		bl	CyHalt
 1209              	.L68:
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2343:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1210              		.loc 1 2343 0 is_stmt 1
 1211 0022 FB1D     		adds	r3, r7, #7
 1212 0024 1B78     		ldrb	r3, [r3]
 1213 0026 1033     		adds	r3, r3, #16
 1214 0028 9B00     		lsls	r3, r3, #2
 1215 002a FA68     		ldr	r2, [r7, #12]
 1216 002c D318     		adds	r3, r2, r3
 1217 002e 1B68     		ldr	r3, [r3]
 1218 0030 BB60     		str	r3, [r7, #8]
2344:Generated_Source\PSoC4/CyLib.c **** 
2345:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2346:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1219              		.loc 1 2346 0
 1220 0032 FB1D     		adds	r3, r7, #7
 1221 0034 1B78     		ldrb	r3, [r3]
 1222 0036 1033     		adds	r3, r3, #16
 1223 0038 9B00     		lsls	r3, r3, #2
 1224 003a FA68     		ldr	r2, [r7, #12]
 1225 003c D318     		adds	r3, r2, r3
 1226 003e 3A68     		ldr	r2, [r7]
 1227 0040 1A60     		str	r2, [r3]
2347:Generated_Source\PSoC4/CyLib.c **** 
2348:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1228              		.loc 1 2348 0
 1229 0042 BB68     		ldr	r3, [r7, #8]
2349:Generated_Source\PSoC4/CyLib.c **** }
 1230              		.loc 1 2349 0
 1231 0044 1800     		movs	r0, r3
 1232 0046 BD46     		mov	sp, r7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 64


 1233 0048 04B0     		add	sp, sp, #16
 1234              		@ sp needed
 1235 004a 80BD     		pop	{r7, pc}
 1236              		.cfi_endproc
 1237              	.LFE16:
 1238              		.size	CyIntSetVector, .-CyIntSetVector
 1239              		.section	.text.CyIntGetVector,"ax",%progbits
 1240              		.align	2
 1241              		.global	CyIntGetVector
 1242              		.code	16
 1243              		.thumb_func
 1244              		.type	CyIntGetVector, %function
 1245              	CyIntGetVector:
 1246              	.LFB17:
2350:Generated_Source\PSoC4/CyLib.c **** 
2351:Generated_Source\PSoC4/CyLib.c **** 
2352:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2353:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2354:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2355:Generated_Source\PSoC4/CyLib.c **** *
2356:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2357:Generated_Source\PSoC4/CyLib.c **** *
2358:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2359:Generated_Source\PSoC4/CyLib.c **** *
2360:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2361:Generated_Source\PSoC4/CyLib.c **** *
2362:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2363:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2364:Generated_Source\PSoC4/CyLib.c **** {
 1247              		.loc 1 2364 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 16
 1250              		@ frame_needed = 1, uses_anonymous_args = 0
 1251 0000 80B5     		push	{r7, lr}
 1252              		.cfi_def_cfa_offset 8
 1253              		.cfi_offset 7, -8
 1254              		.cfi_offset 14, -4
 1255 0002 84B0     		sub	sp, sp, #16
 1256              		.cfi_def_cfa_offset 24
 1257 0004 00AF     		add	r7, sp, #0
 1258              		.cfi_def_cfa_register 7
 1259 0006 0200     		movs	r2, r0
 1260 0008 FB1D     		adds	r3, r7, #7
 1261 000a 1A70     		strb	r2, [r3]
2365:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1262              		.loc 1 2365 0
 1263 000c 8023     		movs	r3, #128
 1264 000e 9B05     		lsls	r3, r3, #22
 1265 0010 FB60     		str	r3, [r7, #12]
2366:Generated_Source\PSoC4/CyLib.c **** 
2367:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1266              		.loc 1 2367 0
 1267 0012 FB1D     		adds	r3, r7, #7
 1268 0014 1B78     		ldrb	r3, [r3]
 1269 0016 1F2B     		cmp	r3, #31
 1270 0018 02D9     		bls	.L71
 1271              		.loc 1 2367 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 65


 1272 001a 0020     		movs	r0, #0
 1273 001c FFF7FEFF 		bl	CyHalt
 1274              	.L71:
2368:Generated_Source\PSoC4/CyLib.c **** 
2369:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1275              		.loc 1 2369 0 is_stmt 1
 1276 0020 FB1D     		adds	r3, r7, #7
 1277 0022 1B78     		ldrb	r3, [r3]
 1278 0024 1033     		adds	r3, r3, #16
 1279 0026 9B00     		lsls	r3, r3, #2
 1280 0028 FA68     		ldr	r2, [r7, #12]
 1281 002a D318     		adds	r3, r2, r3
 1282 002c 1B68     		ldr	r3, [r3]
2370:Generated_Source\PSoC4/CyLib.c **** }
 1283              		.loc 1 2370 0
 1284 002e 1800     		movs	r0, r3
 1285 0030 BD46     		mov	sp, r7
 1286 0032 04B0     		add	sp, sp, #16
 1287              		@ sp needed
 1288 0034 80BD     		pop	{r7, pc}
 1289              		.cfi_endproc
 1290              	.LFE17:
 1291              		.size	CyIntGetVector, .-CyIntGetVector
 1292 0036 C046     		.section	.text.CyIntSetPriority,"ax",%progbits
 1293              		.align	2
 1294              		.global	CyIntSetPriority
 1295              		.code	16
 1296              		.thumb_func
 1297              		.type	CyIntSetPriority, %function
 1298              	CyIntSetPriority:
 1299              	.LFB18:
2371:Generated_Source\PSoC4/CyLib.c **** 
2372:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2373:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2374:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2375:Generated_Source\PSoC4/CyLib.c **** *
2376:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2377:Generated_Source\PSoC4/CyLib.c **** *
2378:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2379:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2380:Generated_Source\PSoC4/CyLib.c **** *
2381:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2382:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2383:Generated_Source\PSoC4/CyLib.c **** {
 1300              		.loc 1 2383 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 24
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304 0000 90B5     		push	{r4, r7, lr}
 1305              		.cfi_def_cfa_offset 12
 1306              		.cfi_offset 4, -12
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 87B0     		sub	sp, sp, #28
 1310              		.cfi_def_cfa_offset 40
 1311 0004 00AF     		add	r7, sp, #0
 1312              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 66


 1313 0006 0200     		movs	r2, r0
 1314 0008 FB1D     		adds	r3, r7, #7
 1315 000a 1A70     		strb	r2, [r3]
 1316 000c BB1D     		adds	r3, r7, #6
 1317 000e 0A1C     		adds	r2, r1, #0
 1318 0010 1A70     		strb	r2, [r3]
2384:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2385:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2386:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2387:Generated_Source\PSoC4/CyLib.c **** 
2388:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1319              		.loc 1 2388 0
 1320 0012 BB1D     		adds	r3, r7, #6
 1321 0014 1B78     		ldrb	r3, [r3]
 1322 0016 032B     		cmp	r3, #3
 1323 0018 02D9     		bls	.L74
 1324              		.loc 1 2388 0 is_stmt 0 discriminator 1
 1325 001a 0020     		movs	r0, #0
 1326 001c FFF7FEFF 		bl	CyHalt
 1327              	.L74:
2389:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1328              		.loc 1 2389 0 is_stmt 1
 1329 0020 FB1D     		adds	r3, r7, #7
 1330 0022 1B78     		ldrb	r3, [r3]
 1331 0024 1F2B     		cmp	r3, #31
 1332 0026 02D9     		bls	.L75
 1333              		.loc 1 2389 0 is_stmt 0 discriminator 1
 1334 0028 0020     		movs	r0, #0
 1335 002a FFF7FEFF 		bl	CyHalt
 1336              	.L75:
2390:Generated_Source\PSoC4/CyLib.c **** 
2391:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1337              		.loc 1 2391 0 is_stmt 1
 1338 002e FB1D     		adds	r3, r7, #7
 1339 0030 1B78     		ldrb	r3, [r3]
 1340 0032 0322     		movs	r2, #3
 1341 0034 1340     		ands	r3, r2
 1342 0036 DB00     		lsls	r3, r3, #3
 1343 0038 0633     		adds	r3, r3, #6
 1344 003a 7B61     		str	r3, [r7, #20]
2392:Generated_Source\PSoC4/CyLib.c **** 
2393:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1345              		.loc 1 2393 0
 1346 003c 1323     		movs	r3, #19
 1347 003e FC18     		adds	r4, r7, r3
 1348 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1349 0044 0300     		movs	r3, r0
 1350 0046 2370     		strb	r3, [r4]
2394:Generated_Source\PSoC4/CyLib.c **** 
2395:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1351              		.loc 1 2395 0
 1352 0048 FB1D     		adds	r3, r7, #7
 1353 004a 1B78     		ldrb	r3, [r3]
 1354 004c 9B08     		lsrs	r3, r3, #2
 1355 004e DBB2     		uxtb	r3, r3
 1356 0050 9B00     		lsls	r3, r3, #2
 1357 0052 144A     		ldr	r2, .L76
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 67


 1358 0054 9446     		mov	ip, r2
 1359 0056 6344     		add	r3, r3, ip
 1360 0058 1B68     		ldr	r3, [r3]
 1361 005a FB60     		str	r3, [r7, #12]
2396:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1362              		.loc 1 2396 0
 1363 005c 0322     		movs	r2, #3
 1364 005e 7B69     		ldr	r3, [r7, #20]
 1365 0060 9A40     		lsls	r2, r2, r3
 1366 0062 1300     		movs	r3, r2
 1367 0064 DA43     		mvns	r2, r3
 1368 0066 FB68     		ldr	r3, [r7, #12]
 1369 0068 1340     		ands	r3, r2
 1370 006a FB60     		str	r3, [r7, #12]
2397:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1371              		.loc 1 2397 0
 1372 006c BB1D     		adds	r3, r7, #6
 1373 006e 1A78     		ldrb	r2, [r3]
 1374 0070 7B69     		ldr	r3, [r7, #20]
 1375 0072 9A40     		lsls	r2, r2, r3
 1376 0074 1300     		movs	r3, r2
 1377 0076 FA68     		ldr	r2, [r7, #12]
 1378 0078 1343     		orrs	r3, r2
 1379 007a FB60     		str	r3, [r7, #12]
2398:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1380              		.loc 1 2398 0
 1381 007c FB1D     		adds	r3, r7, #7
 1382 007e 1B78     		ldrb	r3, [r3]
 1383 0080 9B08     		lsrs	r3, r3, #2
 1384 0082 DBB2     		uxtb	r3, r3
 1385 0084 9B00     		lsls	r3, r3, #2
 1386 0086 074A     		ldr	r2, .L76
 1387 0088 9446     		mov	ip, r2
 1388 008a 6344     		add	r3, r3, ip
 1389 008c FA68     		ldr	r2, [r7, #12]
 1390 008e 1A60     		str	r2, [r3]
2399:Generated_Source\PSoC4/CyLib.c **** 
2400:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1391              		.loc 1 2400 0
 1392 0090 1323     		movs	r3, #19
 1393 0092 FB18     		adds	r3, r7, r3
 1394 0094 1B78     		ldrb	r3, [r3]
 1395 0096 1800     		movs	r0, r3
 1396 0098 FFF7FEFF 		bl	CyExitCriticalSection
2401:Generated_Source\PSoC4/CyLib.c **** }
 1397              		.loc 1 2401 0
 1398 009c C046     		nop
 1399 009e BD46     		mov	sp, r7
 1400 00a0 07B0     		add	sp, sp, #28
 1401              		@ sp needed
 1402 00a2 90BD     		pop	{r4, r7, pc}
 1403              	.L77:
 1404              		.align	2
 1405              	.L76:
 1406 00a4 00E400E0 		.word	-536812544
 1407              		.cfi_endproc
 1408              	.LFE18:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 68


 1409              		.size	CyIntSetPriority, .-CyIntSetPriority
 1410              		.section	.text.CyIntGetPriority,"ax",%progbits
 1411              		.align	2
 1412              		.global	CyIntGetPriority
 1413              		.code	16
 1414              		.thumb_func
 1415              		.type	CyIntGetPriority, %function
 1416              	CyIntGetPriority:
 1417              	.LFB19:
2402:Generated_Source\PSoC4/CyLib.c **** 
2403:Generated_Source\PSoC4/CyLib.c **** 
2404:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2405:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2406:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2407:Generated_Source\PSoC4/CyLib.c **** *
2408:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2409:Generated_Source\PSoC4/CyLib.c **** *
2410:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2411:Generated_Source\PSoC4/CyLib.c **** *
2412:Generated_Source\PSoC4/CyLib.c **** * \return
2413:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2414:Generated_Source\PSoC4/CyLib.c **** *
2415:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2416:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2417:Generated_Source\PSoC4/CyLib.c **** {
 1418              		.loc 1 2417 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 16
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422 0000 80B5     		push	{r7, lr}
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 84B0     		sub	sp, sp, #16
 1427              		.cfi_def_cfa_offset 24
 1428 0004 00AF     		add	r7, sp, #0
 1429              		.cfi_def_cfa_register 7
 1430 0006 0200     		movs	r2, r0
 1431 0008 FB1D     		adds	r3, r7, #7
 1432 000a 1A70     		strb	r2, [r3]
2418:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2419:Generated_Source\PSoC4/CyLib.c **** 
2420:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1433              		.loc 1 2420 0
 1434 000c FB1D     		adds	r3, r7, #7
 1435 000e 1B78     		ldrb	r3, [r3]
 1436 0010 1F2B     		cmp	r3, #31
 1437 0012 02D9     		bls	.L79
 1438              		.loc 1 2420 0 is_stmt 0 discriminator 1
 1439 0014 0020     		movs	r0, #0
 1440 0016 FFF7FEFF 		bl	CyHalt
 1441              	.L79:
2421:Generated_Source\PSoC4/CyLib.c **** 
2422:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1442              		.loc 1 2422 0 is_stmt 1
 1443 001a FB1D     		adds	r3, r7, #7
 1444 001c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 69


 1445 001e 9B08     		lsrs	r3, r3, #2
 1446 0020 DBB2     		uxtb	r3, r3
 1447 0022 9B00     		lsls	r3, r3, #2
 1448 0024 0B4A     		ldr	r2, .L81
 1449 0026 9446     		mov	ip, r2
 1450 0028 6344     		add	r3, r3, ip
 1451 002a 1A68     		ldr	r2, [r3]
 1452 002c FB1D     		adds	r3, r7, #7
 1453 002e 1B78     		ldrb	r3, [r3]
 1454 0030 0321     		movs	r1, #3
 1455 0032 0B40     		ands	r3, r1
 1456 0034 DB00     		lsls	r3, r3, #3
 1457 0036 0633     		adds	r3, r3, #6
 1458 0038 DA40     		lsrs	r2, r2, r3
 1459 003a 0F23     		movs	r3, #15
 1460 003c FB18     		adds	r3, r7, r3
 1461 003e 1A70     		strb	r2, [r3]
2423:Generated_Source\PSoC4/CyLib.c **** 
2424:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1462              		.loc 1 2424 0
 1463 0040 0F23     		movs	r3, #15
 1464 0042 FB18     		adds	r3, r7, r3
 1465 0044 1B78     		ldrb	r3, [r3]
 1466 0046 0322     		movs	r2, #3
 1467 0048 1340     		ands	r3, r2
 1468 004a DBB2     		uxtb	r3, r3
2425:Generated_Source\PSoC4/CyLib.c **** }
 1469              		.loc 1 2425 0
 1470 004c 1800     		movs	r0, r3
 1471 004e BD46     		mov	sp, r7
 1472 0050 04B0     		add	sp, sp, #16
 1473              		@ sp needed
 1474 0052 80BD     		pop	{r7, pc}
 1475              	.L82:
 1476              		.align	2
 1477              	.L81:
 1478 0054 00E400E0 		.word	-536812544
 1479              		.cfi_endproc
 1480              	.LFE19:
 1481              		.size	CyIntGetPriority, .-CyIntGetPriority
 1482              		.section	.text.CyIntEnable,"ax",%progbits
 1483              		.align	2
 1484              		.global	CyIntEnable
 1485              		.code	16
 1486              		.thumb_func
 1487              		.type	CyIntEnable, %function
 1488              	CyIntEnable:
 1489              	.LFB20:
2426:Generated_Source\PSoC4/CyLib.c **** 
2427:Generated_Source\PSoC4/CyLib.c **** 
2428:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2429:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2430:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2433:Generated_Source\PSoC4/CyLib.c **** *
2434:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 70


2435:Generated_Source\PSoC4/CyLib.c **** *
2436:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2437:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2438:Generated_Source\PSoC4/CyLib.c **** {
 1490              		.loc 1 2438 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 8
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}
 1495              		.cfi_def_cfa_offset 8
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
 1498 0002 82B0     		sub	sp, sp, #8
 1499              		.cfi_def_cfa_offset 16
 1500 0004 00AF     		add	r7, sp, #0
 1501              		.cfi_def_cfa_register 7
 1502 0006 0200     		movs	r2, r0
 1503 0008 FB1D     		adds	r3, r7, #7
 1504 000a 1A70     		strb	r2, [r3]
2439:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1505              		.loc 1 2439 0
 1506 000c 064B     		ldr	r3, .L84
 1507 000e FA1D     		adds	r2, r7, #7
 1508 0010 1278     		ldrb	r2, [r2]
 1509 0012 1F21     		movs	r1, #31
 1510 0014 0A40     		ands	r2, r1
 1511 0016 0121     		movs	r1, #1
 1512 0018 9140     		lsls	r1, r1, r2
 1513 001a 0A00     		movs	r2, r1
 1514 001c 1A60     		str	r2, [r3]
2440:Generated_Source\PSoC4/CyLib.c **** }
 1515              		.loc 1 2440 0
 1516 001e C046     		nop
 1517 0020 BD46     		mov	sp, r7
 1518 0022 02B0     		add	sp, sp, #8
 1519              		@ sp needed
 1520 0024 80BD     		pop	{r7, pc}
 1521              	.L85:
 1522 0026 C046     		.align	2
 1523              	.L84:
 1524 0028 00E100E0 		.word	-536813312
 1525              		.cfi_endproc
 1526              	.LFE20:
 1527              		.size	CyIntEnable, .-CyIntEnable
 1528              		.section	.text.CyIntGetState,"ax",%progbits
 1529              		.align	2
 1530              		.global	CyIntGetState
 1531              		.code	16
 1532              		.thumb_func
 1533              		.type	CyIntGetState, %function
 1534              	CyIntGetState:
 1535              	.LFB21:
2441:Generated_Source\PSoC4/CyLib.c **** 
2442:Generated_Source\PSoC4/CyLib.c **** 
2443:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2444:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2445:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 71


2446:Generated_Source\PSoC4/CyLib.c **** *
2447:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2448:Generated_Source\PSoC4/CyLib.c **** *
2449:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** * \return
2452:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2453:Generated_Source\PSoC4/CyLib.c **** *
2454:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2455:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2456:Generated_Source\PSoC4/CyLib.c **** {
 1536              		.loc 1 2456 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 8
 1539              		@ frame_needed = 1, uses_anonymous_args = 0
 1540 0000 80B5     		push	{r7, lr}
 1541              		.cfi_def_cfa_offset 8
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544 0002 82B0     		sub	sp, sp, #8
 1545              		.cfi_def_cfa_offset 16
 1546 0004 00AF     		add	r7, sp, #0
 1547              		.cfi_def_cfa_register 7
 1548 0006 0200     		movs	r2, r0
 1549 0008 FB1D     		adds	r3, r7, #7
 1550 000a 1A70     		strb	r2, [r3]
2457:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2458:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1551              		.loc 1 2458 0
 1552 000c 074B     		ldr	r3, .L88
 1553 000e 1A68     		ldr	r2, [r3]
 1554 0010 FB1D     		adds	r3, r7, #7
 1555 0012 1B78     		ldrb	r3, [r3]
 1556 0014 1F21     		movs	r1, #31
 1557 0016 0B40     		ands	r3, r1
 1558 0018 DA40     		lsrs	r2, r2, r3
 1559 001a 1300     		movs	r3, r2
 1560 001c DBB2     		uxtb	r3, r3
 1561 001e 0122     		movs	r2, #1
 1562 0020 1340     		ands	r3, r2
 1563 0022 DBB2     		uxtb	r3, r3
2459:Generated_Source\PSoC4/CyLib.c **** }
 1564              		.loc 1 2459 0
 1565 0024 1800     		movs	r0, r3
 1566 0026 BD46     		mov	sp, r7
 1567 0028 02B0     		add	sp, sp, #8
 1568              		@ sp needed
 1569 002a 80BD     		pop	{r7, pc}
 1570              	.L89:
 1571              		.align	2
 1572              	.L88:
 1573 002c 00E100E0 		.word	-536813312
 1574              		.cfi_endproc
 1575              	.LFE21:
 1576              		.size	CyIntGetState, .-CyIntGetState
 1577              		.section	.text.CyIntDisable,"ax",%progbits
 1578              		.align	2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 72


 1579              		.global	CyIntDisable
 1580              		.code	16
 1581              		.thumb_func
 1582              		.type	CyIntDisable, %function
 1583              	CyIntDisable:
 1584              	.LFB22:
2460:Generated_Source\PSoC4/CyLib.c **** 
2461:Generated_Source\PSoC4/CyLib.c **** 
2462:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2463:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2464:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2465:Generated_Source\PSoC4/CyLib.c **** *
2466:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2467:Generated_Source\PSoC4/CyLib.c **** *
2468:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2469:Generated_Source\PSoC4/CyLib.c **** *
2470:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2471:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2472:Generated_Source\PSoC4/CyLib.c **** {
 1585              		.loc 1 2472 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 8
 1588              		@ frame_needed = 1, uses_anonymous_args = 0
 1589 0000 80B5     		push	{r7, lr}
 1590              		.cfi_def_cfa_offset 8
 1591              		.cfi_offset 7, -8
 1592              		.cfi_offset 14, -4
 1593 0002 82B0     		sub	sp, sp, #8
 1594              		.cfi_def_cfa_offset 16
 1595 0004 00AF     		add	r7, sp, #0
 1596              		.cfi_def_cfa_register 7
 1597 0006 0200     		movs	r2, r0
 1598 0008 FB1D     		adds	r3, r7, #7
 1599 000a 1A70     		strb	r2, [r3]
2473:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1600              		.loc 1 2473 0
 1601 000c 064B     		ldr	r3, .L91
 1602 000e FA1D     		adds	r2, r7, #7
 1603 0010 1278     		ldrb	r2, [r2]
 1604 0012 1F21     		movs	r1, #31
 1605 0014 0A40     		ands	r2, r1
 1606 0016 0121     		movs	r1, #1
 1607 0018 9140     		lsls	r1, r1, r2
 1608 001a 0A00     		movs	r2, r1
 1609 001c 1A60     		str	r2, [r3]
2474:Generated_Source\PSoC4/CyLib.c **** }
 1610              		.loc 1 2474 0
 1611 001e C046     		nop
 1612 0020 BD46     		mov	sp, r7
 1613 0022 02B0     		add	sp, sp, #8
 1614              		@ sp needed
 1615 0024 80BD     		pop	{r7, pc}
 1616              	.L92:
 1617 0026 C046     		.align	2
 1618              	.L91:
 1619 0028 80E100E0 		.word	-536813184
 1620              		.cfi_endproc
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 73


 1621              	.LFE22:
 1622              		.size	CyIntDisable, .-CyIntDisable
 1623              		.section	.text.CyIntSetPending,"ax",%progbits
 1624              		.align	2
 1625              		.global	CyIntSetPending
 1626              		.code	16
 1627              		.thumb_func
 1628              		.type	CyIntSetPending, %function
 1629              	CyIntSetPending:
 1630              	.LFB23:
2475:Generated_Source\PSoC4/CyLib.c **** 
2476:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2477:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2478:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2483:Generated_Source\PSoC4/CyLib.c **** *
2484:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2485:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2486:Generated_Source\PSoC4/CyLib.c **** {
 1631              		.loc 1 2486 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 8
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635 0000 80B5     		push	{r7, lr}
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 7, -8
 1638              		.cfi_offset 14, -4
 1639 0002 82B0     		sub	sp, sp, #8
 1640              		.cfi_def_cfa_offset 16
 1641 0004 00AF     		add	r7, sp, #0
 1642              		.cfi_def_cfa_register 7
 1643 0006 0200     		movs	r2, r0
 1644 0008 FB1D     		adds	r3, r7, #7
 1645 000a 1A70     		strb	r2, [r3]
2487:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1646              		.loc 1 2487 0
 1647 000c 064B     		ldr	r3, .L94
 1648 000e FA1D     		adds	r2, r7, #7
 1649 0010 1278     		ldrb	r2, [r2]
 1650 0012 1F21     		movs	r1, #31
 1651 0014 0A40     		ands	r2, r1
 1652 0016 0121     		movs	r1, #1
 1653 0018 9140     		lsls	r1, r1, r2
 1654 001a 0A00     		movs	r2, r1
 1655 001c 1A60     		str	r2, [r3]
2488:Generated_Source\PSoC4/CyLib.c **** }
 1656              		.loc 1 2488 0
 1657 001e C046     		nop
 1658 0020 BD46     		mov	sp, r7
 1659 0022 02B0     		add	sp, sp, #8
 1660              		@ sp needed
 1661 0024 80BD     		pop	{r7, pc}
 1662              	.L95:
 1663 0026 C046     		.align	2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 74


 1664              	.L94:
 1665 0028 00E200E0 		.word	-536813056
 1666              		.cfi_endproc
 1667              	.LFE23:
 1668              		.size	CyIntSetPending, .-CyIntSetPending
 1669              		.section	.text.CyIntClearPending,"ax",%progbits
 1670              		.align	2
 1671              		.global	CyIntClearPending
 1672              		.code	16
 1673              		.thumb_func
 1674              		.type	CyIntClearPending, %function
 1675              	CyIntClearPending:
 1676              	.LFB24:
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2493:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:Generated_Source\PSoC4/CyLib.c **** *
2495:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2496:Generated_Source\PSoC4/CyLib.c **** *
2497:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2498:Generated_Source\PSoC4/CyLib.c **** *
2499:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2500:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2501:Generated_Source\PSoC4/CyLib.c **** {
 1677              		.loc 1 2501 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 8
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681 0000 80B5     		push	{r7, lr}
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 82B0     		sub	sp, sp, #8
 1686              		.cfi_def_cfa_offset 16
 1687 0004 00AF     		add	r7, sp, #0
 1688              		.cfi_def_cfa_register 7
 1689 0006 0200     		movs	r2, r0
 1690 0008 FB1D     		adds	r3, r7, #7
 1691 000a 1A70     		strb	r2, [r3]
2502:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1692              		.loc 1 2502 0
 1693 000c 064B     		ldr	r3, .L97
 1694 000e FA1D     		adds	r2, r7, #7
 1695 0010 1278     		ldrb	r2, [r2]
 1696 0012 1F21     		movs	r1, #31
 1697 0014 0A40     		ands	r2, r1
 1698 0016 0121     		movs	r1, #1
 1699 0018 9140     		lsls	r1, r1, r2
 1700 001a 0A00     		movs	r2, r1
 1701 001c 1A60     		str	r2, [r3]
2503:Generated_Source\PSoC4/CyLib.c **** }
 1702              		.loc 1 2503 0
 1703 001e C046     		nop
 1704 0020 BD46     		mov	sp, r7
 1705 0022 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 75


 1706              		@ sp needed
 1707 0024 80BD     		pop	{r7, pc}
 1708              	.L98:
 1709 0026 C046     		.align	2
 1710              	.L97:
 1711 0028 80E200E0 		.word	-536812928
 1712              		.cfi_endproc
 1713              	.LFE24:
 1714              		.size	CyIntClearPending, .-CyIntClearPending
 1715              		.section	.text.CyHalt,"ax",%progbits
 1716              		.align	2
 1717              		.global	CyHalt
 1718              		.code	16
 1719              		.thumb_func
 1720              		.type	CyHalt, %function
 1721              	CyHalt:
 1722              	.LFB25:
2504:Generated_Source\PSoC4/CyLib.c **** 
2505:Generated_Source\PSoC4/CyLib.c **** 
2506:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2507:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2508:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2509:Generated_Source\PSoC4/CyLib.c **** *
2510:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2511:Generated_Source\PSoC4/CyLib.c **** *
2512:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2513:Generated_Source\PSoC4/CyLib.c **** *
2514:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2515:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2516:Generated_Source\PSoC4/CyLib.c **** {
 1723              		.loc 1 2516 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 8
 1726              		@ frame_needed = 1, uses_anonymous_args = 0
 1727 0000 80B5     		push	{r7, lr}
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 7, -8
 1730              		.cfi_offset 14, -4
 1731 0002 82B0     		sub	sp, sp, #8
 1732              		.cfi_def_cfa_offset 16
 1733 0004 00AF     		add	r7, sp, #0
 1734              		.cfi_def_cfa_register 7
 1735 0006 0200     		movs	r2, r0
 1736 0008 FB1D     		adds	r3, r7, #7
 1737 000a 1A70     		strb	r2, [r3]
2517:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2518:Generated_Source\PSoC4/CyLib.c ****     {
2519:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2520:Generated_Source\PSoC4/CyLib.c ****     }
2521:Generated_Source\PSoC4/CyLib.c **** 
2522:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2523:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2524:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2525:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1738              		.loc 1 2525 0
 1739              		.syntax divided
 1740              	@ 2525 "Generated_Source\PSoC4\CyLib.c" 1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 76


 1741 000c 01BE     		    bkpt    1
 1742              	@ 0 "" 2
2526:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2527:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2528:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2529:Generated_Source\PSoC4/CyLib.c **** }
 1743              		.loc 1 2529 0
 1744              		.thumb
 1745              		.syntax unified
 1746 000e C046     		nop
 1747 0010 BD46     		mov	sp, r7
 1748 0012 02B0     		add	sp, sp, #8
 1749              		@ sp needed
 1750 0014 80BD     		pop	{r7, pc}
 1751              		.cfi_endproc
 1752              	.LFE25:
 1753              		.size	CyHalt, .-CyHalt
 1754 0016 C046     		.section	.text.CySoftwareReset,"ax",%progbits
 1755              		.align	2
 1756              		.global	CySoftwareReset
 1757              		.code	16
 1758              		.thumb_func
 1759              		.type	CySoftwareReset, %function
 1760              	CySoftwareReset:
 1761              	.LFB26:
2530:Generated_Source\PSoC4/CyLib.c **** 
2531:Generated_Source\PSoC4/CyLib.c **** 
2532:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2533:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2534:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2535:Generated_Source\PSoC4/CyLib.c **** *
2536:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2537:Generated_Source\PSoC4/CyLib.c **** *
2538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2540:Generated_Source\PSoC4/CyLib.c **** {
 1762              		.loc 1 2540 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766 0000 80B5     		push	{r7, lr}
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 7, -8
 1769              		.cfi_offset 14, -4
 1770 0002 00AF     		add	r7, sp, #0
 1771              		.cfi_def_cfa_register 7
2541:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2542:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2543:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2544:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2545:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1772              		.loc 1 2545 0
 1773 0004 054B     		ldr	r3, .L101
 1774 0006 054A     		ldr	r2, .L101
 1775 0008 1268     		ldr	r2, [r2]
 1776 000a 1204     		lsls	r2, r2, #16
 1777 000c 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 77


2546:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1778              		.loc 1 2546 0
 1779 000e 0449     		ldr	r1, .L101+4
 1780 0010 0A43     		orrs	r2, r1
2545:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1781              		.loc 1 2545 0
 1782 0012 1A60     		str	r2, [r3]
2547:Generated_Source\PSoC4/CyLib.c **** }
 1783              		.loc 1 2547 0
 1784 0014 C046     		nop
 1785 0016 BD46     		mov	sp, r7
 1786              		@ sp needed
 1787 0018 80BD     		pop	{r7, pc}
 1788              	.L102:
 1789 001a C046     		.align	2
 1790              	.L101:
 1791 001c 0CED00E0 		.word	-536810228
 1792 0020 0400FA05 		.word	100270084
 1793              		.cfi_endproc
 1794              	.LFE26:
 1795              		.size	CySoftwareReset, .-CySoftwareReset
 1796              		.section	.text.CyDelay,"ax",%progbits
 1797              		.align	2
 1798              		.global	CyDelay
 1799              		.code	16
 1800              		.thumb_func
 1801              		.type	CyDelay, %function
 1802              	CyDelay:
 1803              	.LFB27:
2548:Generated_Source\PSoC4/CyLib.c **** 
2549:Generated_Source\PSoC4/CyLib.c **** 
2550:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2551:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2552:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLib.c **** *
2554:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2559:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2560:Generated_Source\PSoC4/CyLib.c **** {
 1804              		.loc 1 2560 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 8
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808 0000 80B5     		push	{r7, lr}
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 7, -8
 1811              		.cfi_offset 14, -4
 1812 0002 82B0     		sub	sp, sp, #8
 1813              		.cfi_def_cfa_offset 16
 1814 0004 00AF     		add	r7, sp, #0
 1815              		.cfi_def_cfa_register 7
 1816 0006 7860     		str	r0, [r7, #4]
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1817              		.loc 1 2561 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 78


 1818 0008 09E0     		b	.L104
 1819              	.L105:
2562:Generated_Source\PSoC4/CyLib.c ****     {
2563:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2564:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2565:Generated_Source\PSoC4/CyLib.c ****          */
2566:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1820              		.loc 1 2566 0
 1821 000a 0D4B     		ldr	r3, .L106
 1822 000c 1B68     		ldr	r3, [r3]
 1823 000e 1800     		movs	r0, r3
 1824 0010 FFF7FEFF 		bl	CyDelayCycles
2567:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1825              		.loc 1 2567 0
 1826 0014 7B68     		ldr	r3, [r7, #4]
 1827 0016 0B4A     		ldr	r2, .L106+4
 1828 0018 9446     		mov	ip, r2
 1829 001a 6344     		add	r3, r3, ip
 1830 001c 7B60     		str	r3, [r7, #4]
 1831              	.L104:
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1832              		.loc 1 2561 0
 1833 001e 7A68     		ldr	r2, [r7, #4]
 1834 0020 8023     		movs	r3, #128
 1835 0022 1B02     		lsls	r3, r3, #8
 1836 0024 9A42     		cmp	r2, r3
 1837 0026 F0D8     		bhi	.L105
2568:Generated_Source\PSoC4/CyLib.c ****     }
2569:Generated_Source\PSoC4/CyLib.c **** 
2570:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1838              		.loc 1 2570 0
 1839 0028 074B     		ldr	r3, .L106+8
 1840 002a 1B68     		ldr	r3, [r3]
 1841 002c 7A68     		ldr	r2, [r7, #4]
 1842 002e 5343     		muls	r3, r2
 1843 0030 1800     		movs	r0, r3
 1844 0032 FFF7FEFF 		bl	CyDelayCycles
2571:Generated_Source\PSoC4/CyLib.c **** }
 1845              		.loc 1 2571 0
 1846 0036 C046     		nop
 1847 0038 BD46     		mov	sp, r7
 1848 003a 02B0     		add	sp, sp, #8
 1849              		@ sp needed
 1850 003c 80BD     		pop	{r7, pc}
 1851              	.L107:
 1852 003e C046     		.align	2
 1853              	.L106:
 1854 0040 00000000 		.word	cydelay32kMs
 1855 0044 0080FFFF 		.word	-32768
 1856 0048 00000000 		.word	cydelayFreqKhz
 1857              		.cfi_endproc
 1858              	.LFE27:
 1859              		.size	CyDelay, .-CyDelay
 1860              		.section	.text.CyDelayUs,"ax",%progbits
 1861              		.align	2
 1862              		.global	CyDelayUs
 1863              		.code	16
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 79


 1864              		.thumb_func
 1865              		.type	CyDelayUs, %function
 1866              	CyDelayUs:
 1867              	.LFB28:
2572:Generated_Source\PSoC4/CyLib.c **** 
2573:Generated_Source\PSoC4/CyLib.c **** 
2574:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2575:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2576:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2577:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2578:Generated_Source\PSoC4/CyLib.c **** *
2579:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2580:Generated_Source\PSoC4/CyLib.c **** *
2581:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2582:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2583:Generated_Source\PSoC4/CyLib.c **** {
 1868              		.loc 1 2583 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 8
 1871              		@ frame_needed = 1, uses_anonymous_args = 0
 1872 0000 80B5     		push	{r7, lr}
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0002 82B0     		sub	sp, sp, #8
 1877              		.cfi_def_cfa_offset 16
 1878 0004 00AF     		add	r7, sp, #0
 1879              		.cfi_def_cfa_register 7
 1880 0006 0200     		movs	r2, r0
 1881 0008 BB1D     		adds	r3, r7, #6
 1882 000a 1A80     		strh	r2, [r3]
2584:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1883              		.loc 1 2584 0
 1884 000c BB1D     		adds	r3, r7, #6
 1885 000e 1B88     		ldrh	r3, [r3]
 1886 0010 044A     		ldr	r2, .L109
 1887 0012 1278     		ldrb	r2, [r2]
 1888 0014 5343     		muls	r3, r2
 1889 0016 1800     		movs	r0, r3
 1890 0018 FFF7FEFF 		bl	CyDelayCycles
2585:Generated_Source\PSoC4/CyLib.c **** }
 1891              		.loc 1 2585 0
 1892 001c C046     		nop
 1893 001e BD46     		mov	sp, r7
 1894 0020 02B0     		add	sp, sp, #8
 1895              		@ sp needed
 1896 0022 80BD     		pop	{r7, pc}
 1897              	.L110:
 1898              		.align	2
 1899              	.L109:
 1900 0024 00000000 		.word	cydelayFreqMhz
 1901              		.cfi_endproc
 1902              	.LFE28:
 1903              		.size	CyDelayUs, .-CyDelayUs
 1904              		.global	__aeabi_uidiv
 1905              		.section	.text.CyDelayFreq,"ax",%progbits
 1906              		.align	2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 80


 1907              		.global	CyDelayFreq
 1908              		.code	16
 1909              		.thumb_func
 1910              		.type	CyDelayFreq, %function
 1911              	CyDelayFreq:
 1912              	.LFB29:
2586:Generated_Source\PSoC4/CyLib.c **** 
2587:Generated_Source\PSoC4/CyLib.c **** 
2588:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2589:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2590:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2591:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2592:Generated_Source\PSoC4/CyLib.c **** *
2593:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2594:Generated_Source\PSoC4/CyLib.c **** *
2595:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2596:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2597:Generated_Source\PSoC4/CyLib.c **** {
 1913              		.loc 1 2597 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 8
 1916              		@ frame_needed = 1, uses_anonymous_args = 0
 1917 0000 80B5     		push	{r7, lr}
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 7, -8
 1920              		.cfi_offset 14, -4
 1921 0002 82B0     		sub	sp, sp, #8
 1922              		.cfi_def_cfa_offset 16
 1923 0004 00AF     		add	r7, sp, #0
 1924              		.cfi_def_cfa_register 7
 1925 0006 7860     		str	r0, [r7, #4]
2598:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1926              		.loc 1 2598 0
 1927 0008 7B68     		ldr	r3, [r7, #4]
 1928 000a 002B     		cmp	r3, #0
 1929 000c 03D0     		beq	.L112
2599:Generated_Source\PSoC4/CyLib.c ****     {
2600:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1930              		.loc 1 2600 0
 1931 000e 154B     		ldr	r3, .L114
 1932 0010 7A68     		ldr	r2, [r7, #4]
 1933 0012 1A60     		str	r2, [r3]
 1934 0014 02E0     		b	.L113
 1935              	.L112:
2601:Generated_Source\PSoC4/CyLib.c ****     }
2602:Generated_Source\PSoC4/CyLib.c ****     else
2603:Generated_Source\PSoC4/CyLib.c ****     {
2604:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 1936              		.loc 1 2604 0
 1937 0016 134B     		ldr	r3, .L114
 1938 0018 134A     		ldr	r2, .L114+4
 1939 001a 1A60     		str	r2, [r3]
 1940              	.L113:
2605:Generated_Source\PSoC4/CyLib.c ****     }
2606:Generated_Source\PSoC4/CyLib.c **** 
2607:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 1941              		.loc 1 2607 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 81


 1942 001c 114B     		ldr	r3, .L114
 1943 001e 1B68     		ldr	r3, [r3]
 1944 0020 124A     		ldr	r2, .L114+8
 1945 0022 9446     		mov	ip, r2
 1946 0024 6344     		add	r3, r3, ip
 1947 0026 1249     		ldr	r1, .L114+12
 1948 0028 1800     		movs	r0, r3
 1949 002a FFF7FEFF 		bl	__aeabi_uidiv
 1950 002e 0300     		movs	r3, r0
 1951 0030 DAB2     		uxtb	r2, r3
 1952 0032 104B     		ldr	r3, .L114+16
 1953 0034 1A70     		strb	r2, [r3]
2608:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1954              		.loc 1 2608 0
 1955 0036 0B4B     		ldr	r3, .L114
 1956 0038 1B68     		ldr	r3, [r3]
 1957 003a 0F4A     		ldr	r2, .L114+20
 1958 003c 9A18     		adds	r2, r3, r2
 1959 003e FA23     		movs	r3, #250
 1960 0040 9900     		lsls	r1, r3, #2
 1961 0042 1000     		movs	r0, r2
 1962 0044 FFF7FEFF 		bl	__aeabi_uidiv
 1963 0048 0300     		movs	r3, r0
 1964 004a 1A00     		movs	r2, r3
 1965 004c 0B4B     		ldr	r3, .L114+24
 1966 004e 1A60     		str	r2, [r3]
2609:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 1967              		.loc 1 2609 0
 1968 0050 0A4B     		ldr	r3, .L114+24
 1969 0052 1B68     		ldr	r3, [r3]
 1970 0054 DA03     		lsls	r2, r3, #15
 1971 0056 0A4B     		ldr	r3, .L114+28
 1972 0058 1A60     		str	r2, [r3]
2610:Generated_Source\PSoC4/CyLib.c **** }
 1973              		.loc 1 2610 0
 1974 005a C046     		nop
 1975 005c BD46     		mov	sp, r7
 1976 005e 02B0     		add	sp, sp, #8
 1977              		@ sp needed
 1978 0060 80BD     		pop	{r7, pc}
 1979              	.L115:
 1980 0062 C046     		.align	2
 1981              	.L114:
 1982 0064 00000000 		.word	cydelayFreqHz
 1983 0068 006CDC02 		.word	48000000
 1984 006c 3F420F00 		.word	999999
 1985 0070 40420F00 		.word	1000000
 1986 0074 00000000 		.word	cydelayFreqMhz
 1987 0078 E7030000 		.word	999
 1988 007c 00000000 		.word	cydelayFreqKhz
 1989 0080 00000000 		.word	cydelay32kMs
 1990              		.cfi_endproc
 1991              	.LFE29:
 1992              		.size	CyDelayFreq, .-CyDelayFreq
 1993              		.section	.text.CySysTickStart,"ax",%progbits
 1994              		.align	2
 1995              		.global	CySysTickStart
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 82


 1996              		.code	16
 1997              		.thumb_func
 1998              		.type	CySysTickStart, %function
 1999              	CySysTickStart:
 2000              	.LFB30:
2611:Generated_Source\PSoC4/CyLib.c **** 
2612:Generated_Source\PSoC4/CyLib.c **** 
2613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2618:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2619:Generated_Source\PSoC4/CyLib.c **** *
2620:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2621:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2622:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2623:Generated_Source\PSoC4/CyLib.c **** *
2624:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2625:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2626:Generated_Source\PSoC4/CyLib.c **** *
2627:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2628:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2629:Generated_Source\PSoC4/CyLib.c **** {
 2001              		.loc 1 2629 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 0000 80B5     		push	{r7, lr}
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 7, -8
 2008              		.cfi_offset 14, -4
 2009 0002 00AF     		add	r7, sp, #0
 2010              		.cfi_def_cfa_register 7
2630:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2011              		.loc 1 2630 0
 2012 0004 064B     		ldr	r3, .L118
 2013 0006 1B68     		ldr	r3, [r3]
 2014 0008 002B     		cmp	r3, #0
 2015 000a 04D1     		bne	.L117
2631:Generated_Source\PSoC4/CyLib.c ****     {
2632:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2016              		.loc 1 2632 0
 2017 000c FFF7FEFF 		bl	CySysTickInit
2633:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2018              		.loc 1 2633 0
 2019 0010 034B     		ldr	r3, .L118
 2020 0012 0122     		movs	r2, #1
 2021 0014 1A60     		str	r2, [r3]
 2022              	.L117:
2634:Generated_Source\PSoC4/CyLib.c ****     }
2635:Generated_Source\PSoC4/CyLib.c **** 
2636:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2023              		.loc 1 2636 0
 2024 0016 FFF7FEFF 		bl	CySysTickEnable
2637:Generated_Source\PSoC4/CyLib.c **** }
 2025              		.loc 1 2637 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 83


 2026 001a C046     		nop
 2027 001c BD46     		mov	sp, r7
 2028              		@ sp needed
 2029 001e 80BD     		pop	{r7, pc}
 2030              	.L119:
 2031              		.align	2
 2032              	.L118:
 2033 0020 00000000 		.word	CySysTickInitVar
 2034              		.cfi_endproc
 2035              	.LFE30:
 2036              		.size	CySysTickStart, .-CySysTickStart
 2037              		.section	.text.CySysTickInit,"ax",%progbits
 2038              		.align	2
 2039              		.global	CySysTickInit
 2040              		.code	16
 2041              		.thumb_func
 2042              		.type	CySysTickInit, %function
 2043              	CySysTickInit:
 2044              	.LFB31:
2638:Generated_Source\PSoC4/CyLib.c **** 
2639:Generated_Source\PSoC4/CyLib.c **** 
2640:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2641:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2642:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2643:Generated_Source\PSoC4/CyLib.c **** *
2644:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2645:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2646:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2647:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2648:Generated_Source\PSoC4/CyLib.c **** *
2649:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2650:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2651:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2652:Generated_Source\PSoC4/CyLib.c **** *
2653:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2654:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2655:Generated_Source\PSoC4/CyLib.c **** *
2656:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2657:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2658:Generated_Source\PSoC4/CyLib.c **** {
 2045              		.loc 1 2658 0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 8
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049 0000 80B5     		push	{r7, lr}
 2050              		.cfi_def_cfa_offset 8
 2051              		.cfi_offset 7, -8
 2052              		.cfi_offset 14, -4
 2053 0002 82B0     		sub	sp, sp, #8
 2054              		.cfi_def_cfa_offset 16
 2055 0004 00AF     		add	r7, sp, #0
 2056              		.cfi_def_cfa_register 7
2659:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2660:Generated_Source\PSoC4/CyLib.c **** 
2661:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2057              		.loc 1 2661 0
 2058 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 84


 2059 0008 7B60     		str	r3, [r7, #4]
 2060 000a 07E0     		b	.L121
 2061              	.L122:
2662:Generated_Source\PSoC4/CyLib.c ****     {
2663:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2062              		.loc 1 2663 0 discriminator 3
 2063 000c 114B     		ldr	r3, .L123
 2064 000e 7A68     		ldr	r2, [r7, #4]
 2065 0010 9200     		lsls	r2, r2, #2
 2066 0012 0021     		movs	r1, #0
 2067 0014 D150     		str	r1, [r2, r3]
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2068              		.loc 1 2661 0 discriminator 3
 2069 0016 7B68     		ldr	r3, [r7, #4]
 2070 0018 0133     		adds	r3, r3, #1
 2071 001a 7B60     		str	r3, [r7, #4]
 2072              	.L121:
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2073              		.loc 1 2661 0 is_stmt 0 discriminator 1
 2074 001c 7B68     		ldr	r3, [r7, #4]
 2075 001e 042B     		cmp	r3, #4
 2076 0020 F4D9     		bls	.L122
2664:Generated_Source\PSoC4/CyLib.c ****     }
2665:Generated_Source\PSoC4/CyLib.c **** 
2666:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2077              		.loc 1 2666 0 is_stmt 1
 2078 0022 0D4B     		ldr	r3, .L123+4
 2079 0024 1900     		movs	r1, r3
 2080 0026 0F20     		movs	r0, #15
 2081 0028 FFF7FEFF 		bl	CyIntSetSysVector
2667:Generated_Source\PSoC4/CyLib.c **** 
2668:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2669:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
2670:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2671:Generated_Source\PSoC4/CyLib.c **** 
2672:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2082              		.loc 1 2672 0
 2083 002c 0B4B     		ldr	r3, .L123+8
 2084 002e 1A68     		ldr	r2, [r3]
 2085 0030 FA23     		movs	r3, #250
 2086 0032 9900     		lsls	r1, r3, #2
 2087 0034 1000     		movs	r0, r2
 2088 0036 FFF7FEFF 		bl	__aeabi_uidiv
 2089 003a 0300     		movs	r3, r0
 2090 003c 1800     		movs	r0, r3
 2091 003e FFF7FEFF 		bl	CySysTickSetReload
2673:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2092              		.loc 1 2673 0
 2093 0042 FFF7FEFF 		bl	CySysTickClear
2674:Generated_Source\PSoC4/CyLib.c ****     CyIntEnable(CY_INT_SYSTICK_IRQN);
 2094              		.loc 1 2674 0
 2095 0046 0F20     		movs	r0, #15
 2096 0048 FFF7FEFF 		bl	CyIntEnable
2675:Generated_Source\PSoC4/CyLib.c **** }
 2097              		.loc 1 2675 0
 2098 004c C046     		nop
 2099 004e BD46     		mov	sp, r7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 85


 2100 0050 02B0     		add	sp, sp, #8
 2101              		@ sp needed
 2102 0052 80BD     		pop	{r7, pc}
 2103              	.L124:
 2104              		.align	2
 2105              	.L123:
 2106 0054 00000000 		.word	CySysTickCallbacks
 2107 0058 00000000 		.word	CySysTickServiceCallbacks
 2108 005c 00000000 		.word	cydelayFreqHz
 2109              		.cfi_endproc
 2110              	.LFE31:
 2111              		.size	CySysTickInit, .-CySysTickInit
 2112              		.section	.text.CySysTickEnable,"ax",%progbits
 2113              		.align	2
 2114              		.global	CySysTickEnable
 2115              		.code	16
 2116              		.thumb_func
 2117              		.type	CySysTickEnable, %function
 2118              	CySysTickEnable:
 2119              	.LFB32:
2676:Generated_Source\PSoC4/CyLib.c **** 
2677:Generated_Source\PSoC4/CyLib.c **** 
2678:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2679:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2680:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2681:Generated_Source\PSoC4/CyLib.c **** *
2682:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2683:Generated_Source\PSoC4/CyLib.c **** *
2684:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2685:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2686:Generated_Source\PSoC4/CyLib.c **** *
2687:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2688:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2689:Generated_Source\PSoC4/CyLib.c **** {
 2120              		.loc 1 2689 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 0
 2123              		@ frame_needed = 1, uses_anonymous_args = 0
 2124 0000 80B5     		push	{r7, lr}
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 00AF     		add	r7, sp, #0
 2129              		.cfi_def_cfa_register 7
2690:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2130              		.loc 1 2690 0
 2131 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
2691:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2132              		.loc 1 2691 0
 2133 0008 044B     		ldr	r3, .L126
 2134 000a 044A     		ldr	r2, .L126
 2135 000c 1268     		ldr	r2, [r2]
 2136 000e 0121     		movs	r1, #1
 2137 0010 0A43     		orrs	r2, r1
 2138 0012 1A60     		str	r2, [r3]
2692:Generated_Source\PSoC4/CyLib.c **** }
 2139              		.loc 1 2692 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 86


 2140 0014 C046     		nop
 2141 0016 BD46     		mov	sp, r7
 2142              		@ sp needed
 2143 0018 80BD     		pop	{r7, pc}
 2144              	.L127:
 2145 001a C046     		.align	2
 2146              	.L126:
 2147 001c 10E000E0 		.word	-536813552
 2148              		.cfi_endproc
 2149              	.LFE32:
 2150              		.size	CySysTickEnable, .-CySysTickEnable
 2151              		.section	.text.CySysTickStop,"ax",%progbits
 2152              		.align	2
 2153              		.global	CySysTickStop
 2154              		.code	16
 2155              		.thumb_func
 2156              		.type	CySysTickStop, %function
 2157              	CySysTickStop:
 2158              	.LFB33:
2693:Generated_Source\PSoC4/CyLib.c **** 
2694:Generated_Source\PSoC4/CyLib.c **** 
2695:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2696:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2697:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2698:Generated_Source\PSoC4/CyLib.c **** *
2699:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2700:Generated_Source\PSoC4/CyLib.c **** *
2701:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2702:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2703:Generated_Source\PSoC4/CyLib.c **** *
2704:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2705:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2706:Generated_Source\PSoC4/CyLib.c **** {
 2159              		.loc 1 2706 0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 1, uses_anonymous_args = 0
 2163 0000 80B5     		push	{r7, lr}
 2164              		.cfi_def_cfa_offset 8
 2165              		.cfi_offset 7, -8
 2166              		.cfi_offset 14, -4
 2167 0002 00AF     		add	r7, sp, #0
 2168              		.cfi_def_cfa_register 7
2707:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2169              		.loc 1 2707 0
 2170 0004 044B     		ldr	r3, .L129
 2171 0006 044A     		ldr	r2, .L129
 2172 0008 1268     		ldr	r2, [r2]
 2173 000a 0121     		movs	r1, #1
 2174 000c 8A43     		bics	r2, r1
 2175 000e 1A60     		str	r2, [r3]
2708:Generated_Source\PSoC4/CyLib.c **** }
 2176              		.loc 1 2708 0
 2177 0010 C046     		nop
 2178 0012 BD46     		mov	sp, r7
 2179              		@ sp needed
 2180 0014 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 87


 2181              	.L130:
 2182 0016 C046     		.align	2
 2183              	.L129:
 2184 0018 10E000E0 		.word	-536813552
 2185              		.cfi_endproc
 2186              	.LFE33:
 2187              		.size	CySysTickStop, .-CySysTickStop
 2188              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2189              		.align	2
 2190              		.global	CySysTickEnableInterrupt
 2191              		.code	16
 2192              		.thumb_func
 2193              		.type	CySysTickEnableInterrupt, %function
 2194              	CySysTickEnableInterrupt:
 2195              	.LFB34:
2709:Generated_Source\PSoC4/CyLib.c **** 
2710:Generated_Source\PSoC4/CyLib.c **** 
2711:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2712:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2713:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2714:Generated_Source\PSoC4/CyLib.c **** *
2715:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2716:Generated_Source\PSoC4/CyLib.c **** *
2717:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2718:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2719:Generated_Source\PSoC4/CyLib.c **** *
2720:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2721:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2722:Generated_Source\PSoC4/CyLib.c **** {
 2196              		.loc 1 2722 0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 1, uses_anonymous_args = 0
 2200 0000 80B5     		push	{r7, lr}
 2201              		.cfi_def_cfa_offset 8
 2202              		.cfi_offset 7, -8
 2203              		.cfi_offset 14, -4
 2204 0002 00AF     		add	r7, sp, #0
 2205              		.cfi_def_cfa_register 7
2723:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2206              		.loc 1 2723 0
 2207 0004 044B     		ldr	r3, .L132
 2208 0006 044A     		ldr	r2, .L132
 2209 0008 1268     		ldr	r2, [r2]
 2210 000a 0221     		movs	r1, #2
 2211 000c 0A43     		orrs	r2, r1
 2212 000e 1A60     		str	r2, [r3]
2724:Generated_Source\PSoC4/CyLib.c **** }
 2213              		.loc 1 2724 0
 2214 0010 C046     		nop
 2215 0012 BD46     		mov	sp, r7
 2216              		@ sp needed
 2217 0014 80BD     		pop	{r7, pc}
 2218              	.L133:
 2219 0016 C046     		.align	2
 2220              	.L132:
 2221 0018 10E000E0 		.word	-536813552
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 88


 2222              		.cfi_endproc
 2223              	.LFE34:
 2224              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2225              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2226              		.align	2
 2227              		.global	CySysTickDisableInterrupt
 2228              		.code	16
 2229              		.thumb_func
 2230              		.type	CySysTickDisableInterrupt, %function
 2231              	CySysTickDisableInterrupt:
 2232              	.LFB35:
2725:Generated_Source\PSoC4/CyLib.c **** 
2726:Generated_Source\PSoC4/CyLib.c **** 
2727:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2728:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2729:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2730:Generated_Source\PSoC4/CyLib.c **** *
2731:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2732:Generated_Source\PSoC4/CyLib.c **** *
2733:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2734:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2735:Generated_Source\PSoC4/CyLib.c **** *
2736:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2737:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2738:Generated_Source\PSoC4/CyLib.c **** {
 2233              		.loc 1 2738 0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 0
 2236              		@ frame_needed = 1, uses_anonymous_args = 0
 2237 0000 80B5     		push	{r7, lr}
 2238              		.cfi_def_cfa_offset 8
 2239              		.cfi_offset 7, -8
 2240              		.cfi_offset 14, -4
 2241 0002 00AF     		add	r7, sp, #0
 2242              		.cfi_def_cfa_register 7
2739:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2243              		.loc 1 2739 0
 2244 0004 044B     		ldr	r3, .L135
 2245 0006 044A     		ldr	r2, .L135
 2246 0008 1268     		ldr	r2, [r2]
 2247 000a 0221     		movs	r1, #2
 2248 000c 8A43     		bics	r2, r1
 2249 000e 1A60     		str	r2, [r3]
2740:Generated_Source\PSoC4/CyLib.c **** }
 2250              		.loc 1 2740 0
 2251 0010 C046     		nop
 2252 0012 BD46     		mov	sp, r7
 2253              		@ sp needed
 2254 0014 80BD     		pop	{r7, pc}
 2255              	.L136:
 2256 0016 C046     		.align	2
 2257              	.L135:
 2258 0018 10E000E0 		.word	-536813552
 2259              		.cfi_endproc
 2260              	.LFE35:
 2261              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2262              		.section	.text.CySysTickSetReload,"ax",%progbits
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 89


 2263              		.align	2
 2264              		.global	CySysTickSetReload
 2265              		.code	16
 2266              		.thumb_func
 2267              		.type	CySysTickSetReload, %function
 2268              	CySysTickSetReload:
 2269              	.LFB36:
2741:Generated_Source\PSoC4/CyLib.c **** 
2742:Generated_Source\PSoC4/CyLib.c **** 
2743:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2744:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2745:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2746:Generated_Source\PSoC4/CyLib.c **** *
2747:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2748:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2749:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2750:Generated_Source\PSoC4/CyLib.c **** *
2751:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2752:Generated_Source\PSoC4/CyLib.c **** *
2753:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2754:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2755:Generated_Source\PSoC4/CyLib.c **** {
 2270              		.loc 1 2755 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 8
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 0000 80B5     		push	{r7, lr}
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
 2278 0002 82B0     		sub	sp, sp, #8
 2279              		.cfi_def_cfa_offset 16
 2280 0004 00AF     		add	r7, sp, #0
 2281              		.cfi_def_cfa_register 7
 2282 0006 7860     		str	r0, [r7, #4]
2756:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2283              		.loc 1 2756 0
 2284 0008 044B     		ldr	r3, .L138
 2285 000a 7A68     		ldr	r2, [r7, #4]
 2286 000c 1202     		lsls	r2, r2, #8
 2287 000e 120A     		lsrs	r2, r2, #8
 2288 0010 1A60     		str	r2, [r3]
2757:Generated_Source\PSoC4/CyLib.c **** }
 2289              		.loc 1 2757 0
 2290 0012 C046     		nop
 2291 0014 BD46     		mov	sp, r7
 2292 0016 02B0     		add	sp, sp, #8
 2293              		@ sp needed
 2294 0018 80BD     		pop	{r7, pc}
 2295              	.L139:
 2296 001a C046     		.align	2
 2297              	.L138:
 2298 001c 14E000E0 		.word	-536813548
 2299              		.cfi_endproc
 2300              	.LFE36:
 2301              		.size	CySysTickSetReload, .-CySysTickSetReload
 2302              		.section	.text.CySysTickGetReload,"ax",%progbits
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 90


 2303              		.align	2
 2304              		.global	CySysTickGetReload
 2305              		.code	16
 2306              		.thumb_func
 2307              		.type	CySysTickGetReload, %function
 2308              	CySysTickGetReload:
 2309              	.LFB37:
2758:Generated_Source\PSoC4/CyLib.c **** 
2759:Generated_Source\PSoC4/CyLib.c **** 
2760:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2761:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2762:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2763:Generated_Source\PSoC4/CyLib.c **** *
2764:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2765:Generated_Source\PSoC4/CyLib.c **** *
2766:Generated_Source\PSoC4/CyLib.c **** * \return
2767:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2768:Generated_Source\PSoC4/CyLib.c **** *
2769:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2770:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2771:Generated_Source\PSoC4/CyLib.c **** {
 2310              		.loc 1 2771 0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 1, uses_anonymous_args = 0
 2314 0000 80B5     		push	{r7, lr}
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 7, -8
 2317              		.cfi_offset 14, -4
 2318 0002 00AF     		add	r7, sp, #0
 2319              		.cfi_def_cfa_register 7
2772:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2320              		.loc 1 2772 0
 2321 0004 034B     		ldr	r3, .L142
 2322 0006 1B68     		ldr	r3, [r3]
 2323 0008 1B02     		lsls	r3, r3, #8
 2324 000a 1B0A     		lsrs	r3, r3, #8
2773:Generated_Source\PSoC4/CyLib.c **** }
 2325              		.loc 1 2773 0
 2326 000c 1800     		movs	r0, r3
 2327 000e BD46     		mov	sp, r7
 2328              		@ sp needed
 2329 0010 80BD     		pop	{r7, pc}
 2330              	.L143:
 2331 0012 C046     		.align	2
 2332              	.L142:
 2333 0014 14E000E0 		.word	-536813548
 2334              		.cfi_endproc
 2335              	.LFE37:
 2336              		.size	CySysTickGetReload, .-CySysTickGetReload
 2337              		.section	.text.CySysTickGetValue,"ax",%progbits
 2338              		.align	2
 2339              		.global	CySysTickGetValue
 2340              		.code	16
 2341              		.thumb_func
 2342              		.type	CySysTickGetValue, %function
 2343              	CySysTickGetValue:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 91


 2344              	.LFB38:
2774:Generated_Source\PSoC4/CyLib.c **** 
2775:Generated_Source\PSoC4/CyLib.c **** 
2776:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2777:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2778:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2779:Generated_Source\PSoC4/CyLib.c **** *
2780:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2781:Generated_Source\PSoC4/CyLib.c **** *
2782:Generated_Source\PSoC4/CyLib.c **** * \return
2783:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2784:Generated_Source\PSoC4/CyLib.c **** *
2785:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2786:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2787:Generated_Source\PSoC4/CyLib.c **** {
 2345              		.loc 1 2787 0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 1, uses_anonymous_args = 0
 2349 0000 80B5     		push	{r7, lr}
 2350              		.cfi_def_cfa_offset 8
 2351              		.cfi_offset 7, -8
 2352              		.cfi_offset 14, -4
 2353 0002 00AF     		add	r7, sp, #0
 2354              		.cfi_def_cfa_register 7
2788:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2355              		.loc 1 2788 0
 2356 0004 034B     		ldr	r3, .L146
 2357 0006 1B68     		ldr	r3, [r3]
 2358 0008 1B02     		lsls	r3, r3, #8
 2359 000a 1B0A     		lsrs	r3, r3, #8
2789:Generated_Source\PSoC4/CyLib.c **** }
 2360              		.loc 1 2789 0
 2361 000c 1800     		movs	r0, r3
 2362 000e BD46     		mov	sp, r7
 2363              		@ sp needed
 2364 0010 80BD     		pop	{r7, pc}
 2365              	.L147:
 2366 0012 C046     		.align	2
 2367              	.L146:
 2368 0014 18E000E0 		.word	-536813544
 2369              		.cfi_endproc
 2370              	.LFE38:
 2371              		.size	CySysTickGetValue, .-CySysTickGetValue
 2372              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2373              		.align	2
 2374              		.global	CySysTickGetCountFlag
 2375              		.code	16
 2376              		.thumb_func
 2377              		.type	CySysTickGetCountFlag, %function
 2378              	CySysTickGetCountFlag:
 2379              	.LFB39:
2790:Generated_Source\PSoC4/CyLib.c **** 
2791:Generated_Source\PSoC4/CyLib.c **** 
2792:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2793:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2794:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 92


2795:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2796:Generated_Source\PSoC4/CyLib.c ****     *
2797:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2798:Generated_Source\PSoC4/CyLib.c ****     *
2799:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2800:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2801:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2802:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2803:Generated_Source\PSoC4/CyLib.c ****     *
2804:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2805:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2806:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2807:Generated_Source\PSoC4/CyLib.c ****     *
2808:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2809:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2810:Generated_Source\PSoC4/CyLib.c ****     *
2811:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2812:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2813:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2814:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2815:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2816:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2817:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2818:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2819:Generated_Source\PSoC4/CyLib.c ****     {
2820:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
2821:Generated_Source\PSoC4/CyLib.c ****         {
2822:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
2823:Generated_Source\PSoC4/CyLib.c ****         }
2824:Generated_Source\PSoC4/CyLib.c ****         else
2825:Generated_Source\PSoC4/CyLib.c ****         {
2826:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
2827:Generated_Source\PSoC4/CyLib.c ****         }
2828:Generated_Source\PSoC4/CyLib.c ****     }
2829:Generated_Source\PSoC4/CyLib.c **** 
2830:Generated_Source\PSoC4/CyLib.c ****     
2831:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2832:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2833:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2834:Generated_Source\PSoC4/CyLib.c ****     *
2835:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2836:Generated_Source\PSoC4/CyLib.c ****     *
2837:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2838:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2839:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2840:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2841:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2842:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2843:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2844:Generated_Source\PSoC4/CyLib.c ****     {
2845:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
2846:Generated_Source\PSoC4/CyLib.c ****     }
2847:Generated_Source\PSoC4/CyLib.c ****     
2848:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2849:Generated_Source\PSoC4/CyLib.c **** 
2850:Generated_Source\PSoC4/CyLib.c **** 
2851:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 93


2852:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2853:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2854:Generated_Source\PSoC4/CyLib.c **** *
2855:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2856:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2857:Generated_Source\PSoC4/CyLib.c **** *
2858:Generated_Source\PSoC4/CyLib.c **** * \return
2859:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2860:Generated_Source\PSoC4/CyLib.c **** *
2861:Generated_Source\PSoC4/CyLib.c **** *
2862:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2863:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2864:Generated_Source\PSoC4/CyLib.c **** *
2865:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2866:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2867:Generated_Source\PSoC4/CyLib.c **** {
 2380              		.loc 1 2867 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 1, uses_anonymous_args = 0
 2384 0000 80B5     		push	{r7, lr}
 2385              		.cfi_def_cfa_offset 8
 2386              		.cfi_offset 7, -8
 2387              		.cfi_offset 14, -4
 2388 0002 00AF     		add	r7, sp, #0
 2389              		.cfi_def_cfa_register 7
2868:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2390              		.loc 1 2868 0
 2391 0004 034B     		ldr	r3, .L150
 2392 0006 1B68     		ldr	r3, [r3]
 2393 0008 1B0C     		lsrs	r3, r3, #16
 2394 000a 0122     		movs	r2, #1
 2395 000c 1340     		ands	r3, r2
2869:Generated_Source\PSoC4/CyLib.c **** }
 2396              		.loc 1 2869 0
 2397 000e 1800     		movs	r0, r3
 2398 0010 BD46     		mov	sp, r7
 2399              		@ sp needed
 2400 0012 80BD     		pop	{r7, pc}
 2401              	.L151:
 2402              		.align	2
 2403              	.L150:
 2404 0014 10E000E0 		.word	-536813552
 2405              		.cfi_endproc
 2406              	.LFE39:
 2407              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2408              		.section	.text.CySysTickClear,"ax",%progbits
 2409              		.align	2
 2410              		.global	CySysTickClear
 2411              		.code	16
 2412              		.thumb_func
 2413              		.type	CySysTickClear, %function
 2414              	CySysTickClear:
 2415              	.LFB40:
2870:Generated_Source\PSoC4/CyLib.c **** 
2871:Generated_Source\PSoC4/CyLib.c **** 
2872:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 94


2873:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2874:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2875:Generated_Source\PSoC4/CyLib.c **** *
2876:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2877:Generated_Source\PSoC4/CyLib.c **** *
2878:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2879:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2880:Generated_Source\PSoC4/CyLib.c **** {
 2416              		.loc 1 2880 0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 0
 2419              		@ frame_needed = 1, uses_anonymous_args = 0
 2420 0000 80B5     		push	{r7, lr}
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 00AF     		add	r7, sp, #0
 2425              		.cfi_def_cfa_register 7
2881:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2426              		.loc 1 2881 0
 2427 0004 024B     		ldr	r3, .L153
 2428 0006 0022     		movs	r2, #0
 2429 0008 1A60     		str	r2, [r3]
2882:Generated_Source\PSoC4/CyLib.c **** }
 2430              		.loc 1 2882 0
 2431 000a C046     		nop
 2432 000c BD46     		mov	sp, r7
 2433              		@ sp needed
 2434 000e 80BD     		pop	{r7, pc}
 2435              	.L154:
 2436              		.align	2
 2437              	.L153:
 2438 0010 18E000E0 		.word	-536813544
 2439              		.cfi_endproc
 2440              	.LFE40:
 2441              		.size	CySysTickClear, .-CySysTickClear
 2442              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2443              		.align	2
 2444              		.global	CySysTickSetCallback
 2445              		.code	16
 2446              		.thumb_func
 2447              		.type	CySysTickSetCallback, %function
 2448              	CySysTickSetCallback:
 2449              	.LFB41:
2883:Generated_Source\PSoC4/CyLib.c **** 
2884:Generated_Source\PSoC4/CyLib.c **** 
2885:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2886:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2887:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2888:Generated_Source\PSoC4/CyLib.c **** *
2889:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
2890:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2891:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2892:Generated_Source\PSoC4/CyLib.c **** *
2893:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2894:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2895:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 95


2896:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2897:Generated_Source\PSoC4/CyLib.c **** *  functions.
2898:Generated_Source\PSoC4/CyLib.c **** *
2899:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
2900:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2901:Generated_Source\PSoC4/CyLib.c **** *
2902:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2903:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2904:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2905:Generated_Source\PSoC4/CyLib.c **** *
2906:Generated_Source\PSoC4/CyLib.c **** * \return
2907:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2908:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2909:Generated_Source\PSoC4/CyLib.c **** *
2910:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2911:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2912:Generated_Source\PSoC4/CyLib.c **** *
2913:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2914:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2915:Generated_Source\PSoC4/CyLib.c **** {
 2450              		.loc 1 2915 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 16
 2453              		@ frame_needed = 1, uses_anonymous_args = 0
 2454 0000 80B5     		push	{r7, lr}
 2455              		.cfi_def_cfa_offset 8
 2456              		.cfi_offset 7, -8
 2457              		.cfi_offset 14, -4
 2458 0002 84B0     		sub	sp, sp, #16
 2459              		.cfi_def_cfa_offset 24
 2460 0004 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
 2462 0006 7860     		str	r0, [r7, #4]
 2463 0008 3960     		str	r1, [r7]
2916:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2917:Generated_Source\PSoC4/CyLib.c **** 
2918:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2464              		.loc 1 2918 0
 2465 000a 074B     		ldr	r3, .L157
 2466 000c 7A68     		ldr	r2, [r7, #4]
 2467 000e 9200     		lsls	r2, r2, #2
 2468 0010 D358     		ldr	r3, [r2, r3]
 2469 0012 FB60     		str	r3, [r7, #12]
2919:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2470              		.loc 1 2919 0
 2471 0014 044B     		ldr	r3, .L157
 2472 0016 7A68     		ldr	r2, [r7, #4]
 2473 0018 9200     		lsls	r2, r2, #2
 2474 001a 3968     		ldr	r1, [r7]
 2475 001c D150     		str	r1, [r2, r3]
2920:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2476              		.loc 1 2920 0
 2477 001e FB68     		ldr	r3, [r7, #12]
2921:Generated_Source\PSoC4/CyLib.c **** }
 2478              		.loc 1 2921 0
 2479 0020 1800     		movs	r0, r3
 2480 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 96


 2481 0024 04B0     		add	sp, sp, #16
 2482              		@ sp needed
 2483 0026 80BD     		pop	{r7, pc}
 2484              	.L158:
 2485              		.align	2
 2486              	.L157:
 2487 0028 00000000 		.word	CySysTickCallbacks
 2488              		.cfi_endproc
 2489              	.LFE41:
 2490              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2491              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2492              		.align	2
 2493              		.global	CySysTickGetCallback
 2494              		.code	16
 2495              		.thumb_func
 2496              		.type	CySysTickGetCallback, %function
 2497              	CySysTickGetCallback:
 2498              	.LFB42:
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c **** 
2924:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2925:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2926:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2927:Generated_Source\PSoC4/CyLib.c **** *
2928:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2929:Generated_Source\PSoC4/CyLib.c **** *
2930:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2931:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2932:Generated_Source\PSoC4/CyLib.c **** *
2933:Generated_Source\PSoC4/CyLib.c **** * \return
2934:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2935:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2936:Generated_Source\PSoC4/CyLib.c **** *
2937:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2938:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2939:Generated_Source\PSoC4/CyLib.c **** {
 2499              		.loc 1 2939 0
 2500              		.cfi_startproc
 2501              		@ args = 0, pretend = 0, frame = 8
 2502              		@ frame_needed = 1, uses_anonymous_args = 0
 2503 0000 80B5     		push	{r7, lr}
 2504              		.cfi_def_cfa_offset 8
 2505              		.cfi_offset 7, -8
 2506              		.cfi_offset 14, -4
 2507 0002 82B0     		sub	sp, sp, #8
 2508              		.cfi_def_cfa_offset 16
 2509 0004 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
 2511 0006 7860     		str	r0, [r7, #4]
2940:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2512              		.loc 1 2940 0
 2513 0008 034B     		ldr	r3, .L161
 2514 000a 7A68     		ldr	r2, [r7, #4]
 2515 000c 9200     		lsls	r2, r2, #2
 2516 000e D358     		ldr	r3, [r2, r3]
2941:Generated_Source\PSoC4/CyLib.c **** }
 2517              		.loc 1 2941 0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 97


 2518 0010 1800     		movs	r0, r3
 2519 0012 BD46     		mov	sp, r7
 2520 0014 02B0     		add	sp, sp, #8
 2521              		@ sp needed
 2522 0016 80BD     		pop	{r7, pc}
 2523              	.L162:
 2524              		.align	2
 2525              	.L161:
 2526 0018 00000000 		.word	CySysTickCallbacks
 2527              		.cfi_endproc
 2528              	.LFE42:
 2529              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2530              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2531              		.align	2
 2532              		.code	16
 2533              		.thumb_func
 2534              		.type	CySysTickServiceCallbacks, %function
 2535              	CySysTickServiceCallbacks:
 2536              	.LFB43:
2942:Generated_Source\PSoC4/CyLib.c **** 
2943:Generated_Source\PSoC4/CyLib.c **** 
2944:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2945:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2946:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2947:Generated_Source\PSoC4/CyLib.c **** *
2948:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2949:Generated_Source\PSoC4/CyLib.c **** *
2950:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2951:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2952:Generated_Source\PSoC4/CyLib.c **** {
 2537              		.loc 1 2952 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 8
 2540              		@ frame_needed = 1, uses_anonymous_args = 0
 2541 0000 80B5     		push	{r7, lr}
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 7, -8
 2544              		.cfi_offset 14, -4
 2545 0002 82B0     		sub	sp, sp, #8
 2546              		.cfi_def_cfa_offset 16
 2547 0004 00AF     		add	r7, sp, #0
 2548              		.cfi_def_cfa_register 7
2953:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2954:Generated_Source\PSoC4/CyLib.c **** 
2955:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
2956:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2549              		.loc 1 2956 0
 2550 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2551 000a 0300     		movs	r3, r0
 2552 000c 012B     		cmp	r3, #1
 2553 000e 13D1     		bne	.L168
2957:Generated_Source\PSoC4/CyLib.c ****     {
2958:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2554              		.loc 1 2958 0
 2555 0010 0023     		movs	r3, #0
 2556 0012 7B60     		str	r3, [r7, #4]
 2557 0014 0DE0     		b	.L165
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 98


 2558              	.L167:
2959:Generated_Source\PSoC4/CyLib.c ****         {
2960:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2559              		.loc 1 2960 0
 2560 0016 0A4B     		ldr	r3, .L169
 2561 0018 7A68     		ldr	r2, [r7, #4]
 2562 001a 9200     		lsls	r2, r2, #2
 2563 001c D358     		ldr	r3, [r2, r3]
 2564 001e 002B     		cmp	r3, #0
 2565 0020 04D0     		beq	.L166
2961:Generated_Source\PSoC4/CyLib.c ****             {
2962:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2566              		.loc 1 2962 0
 2567 0022 074B     		ldr	r3, .L169
 2568 0024 7A68     		ldr	r2, [r7, #4]
 2569 0026 9200     		lsls	r2, r2, #2
 2570 0028 D358     		ldr	r3, [r2, r3]
 2571 002a 9847     		blx	r3
 2572              	.L166:
2958:Generated_Source\PSoC4/CyLib.c ****         {
 2573              		.loc 1 2958 0 discriminator 2
 2574 002c 7B68     		ldr	r3, [r7, #4]
 2575 002e 0133     		adds	r3, r3, #1
 2576 0030 7B60     		str	r3, [r7, #4]
 2577              	.L165:
2958:Generated_Source\PSoC4/CyLib.c ****         {
 2578              		.loc 1 2958 0 is_stmt 0 discriminator 1
 2579 0032 7B68     		ldr	r3, [r7, #4]
 2580 0034 042B     		cmp	r3, #4
 2581 0036 EED9     		bls	.L167
 2582              	.L168:
2963:Generated_Source\PSoC4/CyLib.c ****             }
2964:Generated_Source\PSoC4/CyLib.c ****         }
2965:Generated_Source\PSoC4/CyLib.c ****     }
2966:Generated_Source\PSoC4/CyLib.c **** }
 2583              		.loc 1 2966 0 is_stmt 1
 2584 0038 C046     		nop
 2585 003a BD46     		mov	sp, r7
 2586 003c 02B0     		add	sp, sp, #8
 2587              		@ sp needed
 2588 003e 80BD     		pop	{r7, pc}
 2589              	.L170:
 2590              		.align	2
 2591              	.L169:
 2592 0040 00000000 		.word	CySysTickCallbacks
 2593              		.cfi_endproc
 2594              	.LFE43:
 2595              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2596              		.section	.text.CyGetUniqueId,"ax",%progbits
 2597              		.align	2
 2598              		.global	CyGetUniqueId
 2599              		.code	16
 2600              		.thumb_func
 2601              		.type	CyGetUniqueId, %function
 2602              	CyGetUniqueId:
 2603              	.LFB44:
2967:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 99


2968:Generated_Source\PSoC4/CyLib.c **** 
2969:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2970:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2971:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2972:Generated_Source\PSoC4/CyLib.c **** *
2973:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2974:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2975:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2976:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2977:Generated_Source\PSoC4/CyLib.c **** *
2978:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2979:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
2980:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2981:Generated_Source\PSoC4/CyLib.c **** *
2982:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2983:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2984:Generated_Source\PSoC4/CyLib.c **** {
 2604              		.loc 1 2984 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 8
 2607              		@ frame_needed = 1, uses_anonymous_args = 0
 2608 0000 80B5     		push	{r7, lr}
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0002 82B0     		sub	sp, sp, #8
 2613              		.cfi_def_cfa_offset 16
 2614 0004 00AF     		add	r7, sp, #0
 2615              		.cfi_def_cfa_register 7
 2616 0006 7860     		str	r0, [r7, #4]
2985:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2986:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2617              		.loc 1 2986 0
 2618 0008 254B     		ldr	r3, .L172
 2619 000a 1B78     		ldrb	r3, [r3]
 2620 000c DBB2     		uxtb	r3, r3
 2621 000e 1A00     		movs	r2, r3
 2622 0010 7B68     		ldr	r3, [r7, #4]
 2623 0012 1A60     		str	r2, [r3]
2987:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2624              		.loc 1 2987 0
 2625 0014 234B     		ldr	r3, .L172+4
 2626 0016 1B78     		ldrb	r3, [r3]
 2627 0018 DBB2     		uxtb	r3, r3
 2628 001a 1A02     		lsls	r2, r3, #8
 2629 001c 7B68     		ldr	r3, [r7, #4]
 2630 001e 1B68     		ldr	r3, [r3]
 2631 0020 1A43     		orrs	r2, r3
 2632 0022 7B68     		ldr	r3, [r7, #4]
 2633 0024 1A60     		str	r2, [r3]
2988:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2634              		.loc 1 2988 0
 2635 0026 204B     		ldr	r3, .L172+8
 2636 0028 1B78     		ldrb	r3, [r3]
 2637 002a DBB2     		uxtb	r3, r3
 2638 002c 1A04     		lsls	r2, r3, #16
 2639 002e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 100


 2640 0030 1B68     		ldr	r3, [r3]
 2641 0032 1A43     		orrs	r2, r3
 2642 0034 7B68     		ldr	r3, [r7, #4]
 2643 0036 1A60     		str	r2, [r3]
2989:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2644              		.loc 1 2989 0
 2645 0038 1C4B     		ldr	r3, .L172+12
 2646 003a 1B78     		ldrb	r3, [r3]
 2647 003c DBB2     		uxtb	r3, r3
 2648 003e 1A06     		lsls	r2, r3, #24
 2649 0040 7B68     		ldr	r3, [r7, #4]
 2650 0042 1B68     		ldr	r3, [r3]
 2651 0044 1A43     		orrs	r2, r3
 2652 0046 7B68     		ldr	r3, [r7, #4]
 2653 0048 1A60     		str	r2, [r3]
2990:Generated_Source\PSoC4/CyLib.c **** 
2991:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2654              		.loc 1 2991 0
 2655 004a 7B68     		ldr	r3, [r7, #4]
 2656 004c 0433     		adds	r3, r3, #4
 2657 004e 184A     		ldr	r2, .L172+16
 2658 0050 1278     		ldrb	r2, [r2]
 2659 0052 D2B2     		uxtb	r2, r2
 2660 0054 1A60     		str	r2, [r3]
2992:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2661              		.loc 1 2992 0
 2662 0056 174B     		ldr	r3, .L172+20
 2663 0058 1B78     		ldrb	r3, [r3]
 2664 005a DBB2     		uxtb	r3, r3
 2665 005c 1902     		lsls	r1, r3, #8
 2666 005e 7B68     		ldr	r3, [r7, #4]
 2667 0060 0433     		adds	r3, r3, #4
 2668 0062 7A68     		ldr	r2, [r7, #4]
 2669 0064 0432     		adds	r2, r2, #4
 2670 0066 1268     		ldr	r2, [r2]
 2671 0068 0A43     		orrs	r2, r1
 2672 006a 1A60     		str	r2, [r3]
2993:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2673              		.loc 1 2993 0
 2674 006c 124B     		ldr	r3, .L172+24
 2675 006e 1B78     		ldrb	r3, [r3]
 2676 0070 DBB2     		uxtb	r3, r3
 2677 0072 1904     		lsls	r1, r3, #16
 2678 0074 7B68     		ldr	r3, [r7, #4]
 2679 0076 0433     		adds	r3, r3, #4
 2680 0078 7A68     		ldr	r2, [r7, #4]
 2681 007a 0432     		adds	r2, r2, #4
 2682 007c 1268     		ldr	r2, [r2]
 2683 007e 0A43     		orrs	r2, r1
 2684 0080 1A60     		str	r2, [r3]
2994:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2685              		.loc 1 2994 0
 2686 0082 0E4B     		ldr	r3, .L172+28
 2687 0084 1B78     		ldrb	r3, [r3]
 2688 0086 DBB2     		uxtb	r3, r3
 2689 0088 1906     		lsls	r1, r3, #24
 2690 008a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 101


 2691 008c 0433     		adds	r3, r3, #4
 2692 008e 7A68     		ldr	r2, [r7, #4]
 2693 0090 0432     		adds	r2, r2, #4
 2694 0092 1268     		ldr	r2, [r2]
 2695 0094 0A43     		orrs	r2, r1
 2696 0096 1A60     		str	r2, [r3]
2995:Generated_Source\PSoC4/CyLib.c **** #else
2996:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2997:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2998:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2999:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
3000:Generated_Source\PSoC4/CyLib.c **** 
3001:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3002:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3003:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3004:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3005:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3006:Generated_Source\PSoC4/CyLib.c **** }
 2697              		.loc 1 3006 0
 2698 0098 C046     		nop
 2699 009a BD46     		mov	sp, r7
 2700 009c 02B0     		add	sp, sp, #8
 2701              		@ sp needed
 2702 009e 80BD     		pop	{r7, pc}
 2703              	.L173:
 2704              		.align	2
 2705              	.L172:
 2706 00a0 78F1FF0F 		.word	268431736
 2707 00a4 79F1FF0F 		.word	268431737
 2708 00a8 7AF1FF0F 		.word	268431738
 2709 00ac 7BF1FF0F 		.word	268431739
 2710 00b0 7CF1FF0F 		.word	268431740
 2711 00b4 7DF1FF0F 		.word	268431741
 2712 00b8 7EF1FF0F 		.word	268431742
 2713 00bc 7FF1FF0F 		.word	268431743
 2714              		.cfi_endproc
 2715              	.LFE44:
 2716              		.size	CyGetUniqueId, .-CyGetUniqueId
 2717              		.text
 2718              	.Letext0:
 2719              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2720              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2721              		.section	.debug_info,"",%progbits
 2722              	.Ldebug_info0:
 2723 0000 EB080000 		.4byte	0x8eb
 2724 0004 0400     		.2byte	0x4
 2725 0006 00000000 		.4byte	.Ldebug_abbrev0
 2726 000a 04       		.byte	0x4
 2727 000b 01       		.uleb128 0x1
 2728 000c 27030000 		.4byte	.LASF102
 2729 0010 0C       		.byte	0xc
 2730 0011 28060000 		.4byte	.LASF103
 2731 0015 C1020000 		.4byte	.LASF104
 2732 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2733 001d 00000000 		.4byte	0
 2734 0021 00000000 		.4byte	.Ldebug_line0
 2735 0025 02       		.uleb128 0x2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 102


 2736 0026 01       		.byte	0x1
 2737 0027 06       		.byte	0x6
 2738 0028 FE000000 		.4byte	.LASF0
 2739 002c 02       		.uleb128 0x2
 2740 002d 01       		.byte	0x1
 2741 002e 08       		.byte	0x8
 2742 002f E6040000 		.4byte	.LASF1
 2743 0033 02       		.uleb128 0x2
 2744 0034 02       		.byte	0x2
 2745 0035 05       		.byte	0x5
 2746 0036 F4040000 		.4byte	.LASF2
 2747 003a 02       		.uleb128 0x2
 2748 003b 02       		.byte	0x2
 2749 003c 07       		.byte	0x7
 2750 003d AE020000 		.4byte	.LASF3
 2751 0041 02       		.uleb128 0x2
 2752 0042 04       		.byte	0x4
 2753 0043 05       		.byte	0x5
 2754 0044 3D010000 		.4byte	.LASF4
 2755 0048 02       		.uleb128 0x2
 2756 0049 04       		.byte	0x4
 2757 004a 07       		.byte	0x7
 2758 004b 4D020000 		.4byte	.LASF5
 2759 004f 02       		.uleb128 0x2
 2760 0050 08       		.byte	0x8
 2761 0051 05       		.byte	0x5
 2762 0052 F0000000 		.4byte	.LASF6
 2763 0056 02       		.uleb128 0x2
 2764 0057 08       		.byte	0x8
 2765 0058 07       		.byte	0x7
 2766 0059 84000000 		.4byte	.LASF7
 2767 005d 03       		.uleb128 0x3
 2768 005e 04       		.byte	0x4
 2769 005f 05       		.byte	0x5
 2770 0060 696E7400 		.ascii	"int\000"
 2771 0064 02       		.uleb128 0x2
 2772 0065 04       		.byte	0x4
 2773 0066 07       		.byte	0x7
 2774 0067 31020000 		.4byte	.LASF8
 2775 006b 04       		.uleb128 0x4
 2776 006c 68010000 		.4byte	.LASF9
 2777 0070 02       		.byte	0x2
 2778 0071 B901     		.2byte	0x1b9
 2779 0073 2C000000 		.4byte	0x2c
 2780 0077 04       		.uleb128 0x4
 2781 0078 17000000 		.4byte	.LASF10
 2782 007c 02       		.byte	0x2
 2783 007d BA01     		.2byte	0x1ba
 2784 007f 3A000000 		.4byte	0x3a
 2785 0083 04       		.uleb128 0x4
 2786 0084 A8010000 		.4byte	.LASF11
 2787 0088 02       		.byte	0x2
 2788 0089 BB01     		.2byte	0x1bb
 2789 008b 48000000 		.4byte	0x48
 2790 008f 02       		.uleb128 0x2
 2791 0090 04       		.byte	0x4
 2792 0091 04       		.byte	0x4
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 103


 2793 0092 8D040000 		.4byte	.LASF12
 2794 0096 02       		.uleb128 0x2
 2795 0097 08       		.byte	0x8
 2796 0098 04       		.byte	0x4
 2797 0099 84010000 		.4byte	.LASF13
 2798 009d 02       		.uleb128 0x2
 2799 009e 01       		.byte	0x1
 2800 009f 08       		.byte	0x8
 2801 00a0 37050000 		.4byte	.LASF14
 2802 00a4 04       		.uleb128 0x4
 2803 00a5 D0040000 		.4byte	.LASF15
 2804 00a9 02       		.byte	0x2
 2805 00aa 6302     		.2byte	0x263
 2806 00ac B0000000 		.4byte	0xb0
 2807 00b0 05       		.uleb128 0x5
 2808 00b1 6B000000 		.4byte	0x6b
 2809 00b5 04       		.uleb128 0x4
 2810 00b6 DC030000 		.4byte	.LASF16
 2811 00ba 02       		.byte	0x2
 2812 00bb 6502     		.2byte	0x265
 2813 00bd C1000000 		.4byte	0xc1
 2814 00c1 05       		.uleb128 0x5
 2815 00c2 83000000 		.4byte	0x83
 2816 00c6 04       		.uleb128 0x4
 2817 00c7 3C050000 		.4byte	.LASF17
 2818 00cb 02       		.byte	0x2
 2819 00cc 7502     		.2byte	0x275
 2820 00ce D2000000 		.4byte	0xd2
 2821 00d2 06       		.uleb128 0x6
 2822 00d3 04       		.byte	0x4
 2823 00d4 D8000000 		.4byte	0xd8
 2824 00d8 07       		.uleb128 0x7
 2825 00d9 02       		.uleb128 0x2
 2826 00da 08       		.byte	0x8
 2827 00db 04       		.byte	0x4
 2828 00dc 19040000 		.4byte	.LASF18
 2829 00e0 02       		.uleb128 0x2
 2830 00e1 04       		.byte	0x4
 2831 00e2 07       		.byte	0x7
 2832 00e3 FE030000 		.4byte	.LASF19
 2833 00e7 08       		.uleb128 0x8
 2834 00e8 A2040000 		.4byte	.LASF20
 2835 00ec 03       		.byte	0x3
 2836 00ed F5       		.byte	0xf5
 2837 00ee D2000000 		.4byte	0xd2
 2838 00f2 09       		.uleb128 0x9
 2839 00f3 06060000 		.4byte	.LASF21
 2840 00f7 01       		.byte	0x1
 2841 00f8 6B       		.byte	0x6b
 2842 00f9 00000000 		.4byte	.LFB0
 2843 00fd 1C000000 		.4byte	.LFE0-.LFB0
 2844 0101 01       		.uleb128 0x1
 2845 0102 9C       		.byte	0x9c
 2846 0103 09       		.uleb128 0x9
 2847 0104 7A020000 		.4byte	.LASF22
 2848 0108 01       		.byte	0x1
 2849 0109 8B       		.byte	0x8b
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 104


 2850 010a 00000000 		.4byte	.LFB1
 2851 010e 1C000000 		.4byte	.LFE1-.LFB1
 2852 0112 01       		.uleb128 0x1
 2853 0113 9C       		.byte	0x9c
 2854 0114 0A       		.uleb128 0xa
 2855 0115 27000000 		.4byte	.LASF25
 2856 0119 01       		.byte	0x1
 2857 011a AD01     		.2byte	0x1ad
 2858 011c 00000000 		.4byte	.LFB2
 2859 0120 48000000 		.4byte	.LFE2-.LFB2
 2860 0124 01       		.uleb128 0x1
 2861 0125 9C       		.byte	0x9c
 2862 0126 58010000 		.4byte	0x158
 2863 012a 0B       		.uleb128 0xb
 2864 012b 1C050000 		.4byte	.LASF27
 2865 012f 01       		.byte	0x1
 2866 0130 AD01     		.2byte	0x1ad
 2867 0132 83000000 		.4byte	0x83
 2868 0136 02       		.uleb128 0x2
 2869 0137 91       		.byte	0x91
 2870 0138 64       		.sleb128 -28
 2871 0139 0C       		.uleb128 0xc
 2872 013a 1B010000 		.4byte	.LASF23
 2873 013e 01       		.byte	0x1
 2874 013f AF01     		.2byte	0x1af
 2875 0141 6B000000 		.4byte	0x6b
 2876 0145 02       		.uleb128 0x2
 2877 0146 91       		.byte	0x91
 2878 0147 6F       		.sleb128 -17
 2879 0148 0C       		.uleb128 0xc
 2880 0149 54060000 		.4byte	.LASF24
 2881 014d 01       		.byte	0x1
 2882 014e B001     		.2byte	0x1b0
 2883 0150 83000000 		.4byte	0x83
 2884 0154 02       		.uleb128 0x2
 2885 0155 91       		.byte	0x91
 2886 0156 68       		.sleb128 -24
 2887 0157 00       		.byte	0
 2888 0158 0D       		.uleb128 0xd
 2889 0159 C7030000 		.4byte	.LASF26
 2890 015d 01       		.byte	0x1
 2891 015e D901     		.2byte	0x1d9
 2892 0160 00000000 		.4byte	.LFB3
 2893 0164 50000000 		.4byte	.LFE3-.LFB3
 2894 0168 01       		.uleb128 0x1
 2895 0169 9C       		.byte	0x9c
 2896 016a 7E010000 		.4byte	0x17e
 2897 016e 0B       		.uleb128 0xb
 2898 016f 7D010000 		.4byte	.LASF28
 2899 0173 01       		.byte	0x1
 2900 0174 D901     		.2byte	0x1d9
 2901 0176 83000000 		.4byte	0x83
 2902 017a 02       		.uleb128 0x2
 2903 017b 91       		.byte	0x91
 2904 017c 74       		.sleb128 -12
 2905 017d 00       		.byte	0
 2906 017e 0E       		.uleb128 0xe
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 105


 2907 017f C3010000 		.4byte	.LASF43
 2908 0183 01       		.byte	0x1
 2909 0184 FE01     		.2byte	0x1fe
 2910 0186 83000000 		.4byte	0x83
 2911 018a 00000000 		.4byte	.LFB4
 2912 018e 34000000 		.4byte	.LFE4-.LFB4
 2913 0192 01       		.uleb128 0x1
 2914 0193 9C       		.byte	0x9c
 2915 0194 B7010000 		.4byte	0x1b7
 2916 0198 0C       		.uleb128 0xc
 2917 0199 1B010000 		.4byte	.LASF23
 2918 019d 01       		.byte	0x1
 2919 019e 0002     		.2byte	0x200
 2920 01a0 6B000000 		.4byte	0x6b
 2921 01a4 02       		.uleb128 0x2
 2922 01a5 91       		.byte	0x91
 2923 01a6 6F       		.sleb128 -17
 2924 01a7 0C       		.uleb128 0xc
 2925 01a8 35040000 		.4byte	.LASF29
 2926 01ac 01       		.byte	0x1
 2927 01ad 0102     		.2byte	0x201
 2928 01af 83000000 		.4byte	0x83
 2929 01b3 02       		.uleb128 0x2
 2930 01b4 91       		.byte	0x91
 2931 01b5 68       		.sleb128 -24
 2932 01b6 00       		.byte	0
 2933 01b7 0A       		.uleb128 0xa
 2934 01b8 59050000 		.4byte	.LASF30
 2935 01bc 01       		.byte	0x1
 2936 01bd 3502     		.2byte	0x235
 2937 01bf 00000000 		.4byte	.LFB5
 2938 01c3 48000000 		.4byte	.LFE5-.LFB5
 2939 01c7 01       		.uleb128 0x1
 2940 01c8 9C       		.byte	0x9c
 2941 01c9 EC010000 		.4byte	0x1ec
 2942 01cd 0B       		.uleb128 0xb
 2943 01ce FE050000 		.4byte	.LASF31
 2944 01d2 01       		.byte	0x1
 2945 01d3 3502     		.2byte	0x235
 2946 01d5 83000000 		.4byte	0x83
 2947 01d9 02       		.uleb128 0x2
 2948 01da 91       		.byte	0x91
 2949 01db 64       		.sleb128 -28
 2950 01dc 0C       		.uleb128 0xc
 2951 01dd 1B010000 		.4byte	.LASF23
 2952 01e1 01       		.byte	0x1
 2953 01e2 3702     		.2byte	0x237
 2954 01e4 6B000000 		.4byte	0x6b
 2955 01e8 02       		.uleb128 0x2
 2956 01e9 91       		.byte	0x91
 2957 01ea 6F       		.sleb128 -17
 2958 01eb 00       		.byte	0
 2959 01ec 0A       		.uleb128 0xa
 2960 01ed 12030000 		.4byte	.LASF32
 2961 01f1 01       		.byte	0x1
 2962 01f2 6F02     		.2byte	0x26f
 2963 01f4 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 106


 2964 01f8 EC010000 		.4byte	.LFE6-.LFB6
 2965 01fc 01       		.uleb128 0x1
 2966 01fd 9C       		.byte	0x9c
 2967 01fe 6C020000 		.4byte	0x26c
 2968 0202 0B       		.uleb128 0xb
 2969 0203 0A010000 		.4byte	.LASF33
 2970 0207 01       		.byte	0x1
 2971 0208 6F02     		.2byte	0x26f
 2972 020a 83000000 		.4byte	0x83
 2973 020e 02       		.uleb128 0x2
 2974 020f 91       		.byte	0x91
 2975 0210 64       		.sleb128 -28
 2976 0211 0C       		.uleb128 0xc
 2977 0212 0F000000 		.4byte	.LASF34
 2978 0216 01       		.byte	0x1
 2979 0217 7502     		.2byte	0x275
 2980 0219 6B000000 		.4byte	0x6b
 2981 021d 02       		.uleb128 0x2
 2982 021e 91       		.byte	0x91
 2983 021f 6F       		.sleb128 -17
 2984 0220 0C       		.uleb128 0xc
 2985 0221 2D040000 		.4byte	.LASF35
 2986 0225 01       		.byte	0x1
 2987 0226 7602     		.2byte	0x276
 2988 0228 6B000000 		.4byte	0x6b
 2989 022c 02       		.uleb128 0x2
 2990 022d 91       		.byte	0x91
 2991 022e 6E       		.sleb128 -18
 2992 022f 0C       		.uleb128 0xc
 2993 0230 17060000 		.4byte	.LASF36
 2994 0234 01       		.byte	0x1
 2995 0235 7702     		.2byte	0x277
 2996 0237 6B000000 		.4byte	0x6b
 2997 023b 02       		.uleb128 0x2
 2998 023c 91       		.byte	0x91
 2999 023d 6B       		.sleb128 -21
 3000 023e 0C       		.uleb128 0xc
 3001 023f 6F000000 		.4byte	.LASF37
 3002 0243 01       		.byte	0x1
 3003 0244 7802     		.2byte	0x278
 3004 0246 6B000000 		.4byte	0x6b
 3005 024a 02       		.uleb128 0x2
 3006 024b 91       		.byte	0x91
 3007 024c 6D       		.sleb128 -19
 3008 024d 0C       		.uleb128 0xc
 3009 024e 98050000 		.4byte	.LASF38
 3010 0252 01       		.byte	0x1
 3011 0253 7902     		.2byte	0x279
 3012 0255 6B000000 		.4byte	0x6b
 3013 0259 02       		.uleb128 0x2
 3014 025a 91       		.byte	0x91
 3015 025b 6A       		.sleb128 -22
 3016 025c 0C       		.uleb128 0xc
 3017 025d 1B010000 		.4byte	.LASF23
 3018 0261 01       		.byte	0x1
 3019 0262 8402     		.2byte	0x284
 3020 0264 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 107


 3021 0268 02       		.uleb128 0x2
 3022 0269 91       		.byte	0x91
 3023 026a 6C       		.sleb128 -20
 3024 026b 00       		.byte	0
 3025 026c 0A       		.uleb128 0xa
 3026 026d 93040000 		.4byte	.LASF39
 3027 0271 01       		.byte	0x1
 3028 0272 4608     		.2byte	0x846
 3029 0274 00000000 		.4byte	.LFB7
 3030 0278 64000000 		.4byte	.LFE7-.LFB7
 3031 027c 01       		.uleb128 0x1
 3032 027d 9C       		.byte	0x9c
 3033 027e 92020000 		.4byte	0x292
 3034 0282 0B       		.uleb128 0xb
 3035 0283 D5040000 		.4byte	.LASF40
 3036 0287 01       		.byte	0x1
 3037 0288 4608     		.2byte	0x846
 3038 028a 83000000 		.4byte	0x83
 3039 028e 02       		.uleb128 0x2
 3040 028f 91       		.byte	0x91
 3041 0290 74       		.sleb128 -12
 3042 0291 00       		.byte	0
 3043 0292 0F       		.uleb128 0xf
 3044 0293 D1050000 		.4byte	.LASF41
 3045 0297 01       		.byte	0x1
 3046 0298 6408     		.2byte	0x864
 3047 029a 00000000 		.4byte	.LFB8
 3048 029e 2C000000 		.4byte	.LFE8-.LFB8
 3049 02a2 01       		.uleb128 0x1
 3050 02a3 9C       		.byte	0x9c
 3051 02a4 10       		.uleb128 0x10
 3052 02a5 5F020000 		.4byte	.LASF83
 3053 02a9 01       		.byte	0x1
 3054 02aa 7608     		.2byte	0x876
 3055 02ac 83000000 		.4byte	0x83
 3056 02b0 00000000 		.4byte	.LFB9
 3057 02b4 18000000 		.4byte	.LFE9-.LFB9
 3058 02b8 01       		.uleb128 0x1
 3059 02b9 9C       		.byte	0x9c
 3060 02ba 0F       		.uleb128 0xf
 3061 02bb 91010000 		.4byte	.LASF42
 3062 02bf 01       		.byte	0x1
 3063 02c0 8608     		.2byte	0x886
 3064 02c2 00000000 		.4byte	.LFB10
 3065 02c6 14000000 		.4byte	.LFE10-.LFB10
 3066 02ca 01       		.uleb128 0x1
 3067 02cb 9C       		.byte	0x9c
 3068 02cc 11       		.uleb128 0x11
 3069 02cd 9A020000 		.4byte	.LASF44
 3070 02d1 01       		.byte	0x1
 3071 02d2 A008     		.2byte	0x8a0
 3072 02d4 83000000 		.4byte	0x83
 3073 02d8 00000000 		.4byte	.LFB11
 3074 02dc 30000000 		.4byte	.LFE11-.LFB11
 3075 02e0 01       		.uleb128 0x1
 3076 02e1 9C       		.byte	0x9c
 3077 02e2 05030000 		.4byte	0x305
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 108


 3078 02e6 0B       		.uleb128 0xb
 3079 02e7 30050000 		.4byte	.LASF45
 3080 02eb 01       		.byte	0x1
 3081 02ec A008     		.2byte	0x8a0
 3082 02ee 83000000 		.4byte	0x83
 3083 02f2 02       		.uleb128 0x2
 3084 02f3 91       		.byte	0x91
 3085 02f4 6C       		.sleb128 -20
 3086 02f5 0C       		.uleb128 0xc
 3087 02f6 F1030000 		.4byte	.LASF46
 3088 02fa 01       		.byte	0x1
 3089 02fb A208     		.2byte	0x8a2
 3090 02fd 83000000 		.4byte	0x83
 3091 0301 02       		.uleb128 0x2
 3092 0302 91       		.byte	0x91
 3093 0303 74       		.sleb128 -12
 3094 0304 00       		.byte	0
 3095 0305 11       		.uleb128 0x11
 3096 0306 61000000 		.4byte	.LASF47
 3097 030a 01       		.byte	0x1
 3098 030b B708     		.2byte	0x8b7
 3099 030d 83000000 		.4byte	0x83
 3100 0311 00000000 		.4byte	.LFB12
 3101 0315 24000000 		.4byte	.LFE12-.LFB12
 3102 0319 01       		.uleb128 0x1
 3103 031a 9C       		.byte	0x9c
 3104 031b 2F030000 		.4byte	0x32f
 3105 031f 0C       		.uleb128 0xc
 3106 0320 1E000000 		.4byte	.LASF48
 3107 0324 01       		.byte	0x1
 3108 0325 B908     		.2byte	0x8b9
 3109 0327 83000000 		.4byte	0x83
 3110 032b 02       		.uleb128 0x2
 3111 032c 91       		.byte	0x91
 3112 032d 74       		.sleb128 -12
 3113 032e 00       		.byte	0
 3114 032f 0D       		.uleb128 0xd
 3115 0330 AC000000 		.4byte	.LASF49
 3116 0334 01       		.byte	0x1
 3117 0335 CE08     		.2byte	0x8ce
 3118 0337 00000000 		.4byte	.LFB13
 3119 033b 1C000000 		.4byte	.LFE13-.LFB13
 3120 033f 01       		.uleb128 0x1
 3121 0340 9C       		.byte	0x9c
 3122 0341 55030000 		.4byte	0x355
 3123 0345 0B       		.uleb128 0xb
 3124 0346 BE010000 		.4byte	.LASF50
 3125 034a 01       		.byte	0x1
 3126 034b CE08     		.2byte	0x8ce
 3127 034d 83000000 		.4byte	0x83
 3128 0351 02       		.uleb128 0x2
 3129 0352 91       		.byte	0x91
 3130 0353 74       		.sleb128 -12
 3131 0354 00       		.byte	0
 3132 0355 0E       		.uleb128 0xe
 3133 0356 B5030000 		.4byte	.LASF51
 3134 035a 01       		.byte	0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 109


 3135 035b E708     		.2byte	0x8e7
 3136 035d C6000000 		.4byte	0xc6
 3137 0361 00000000 		.4byte	.LFB14
 3138 0365 48000000 		.4byte	.LFE14-.LFB14
 3139 0369 01       		.uleb128 0x1
 3140 036a 9C       		.byte	0x9c
 3141 036b AC030000 		.4byte	0x3ac
 3142 036f 0B       		.uleb128 0xb
 3143 0370 02030000 		.4byte	.LASF52
 3144 0374 01       		.byte	0x1
 3145 0375 E708     		.2byte	0x8e7
 3146 0377 6B000000 		.4byte	0x6b
 3147 037b 02       		.uleb128 0x2
 3148 037c 91       		.byte	0x91
 3149 037d 6F       		.sleb128 -17
 3150 037e 0B       		.uleb128 0xb
 3151 037f 25040000 		.4byte	.LASF53
 3152 0383 01       		.byte	0x1
 3153 0384 E708     		.2byte	0x8e7
 3154 0386 C6000000 		.4byte	0xc6
 3155 038a 02       		.uleb128 0x2
 3156 038b 91       		.byte	0x91
 3157 038c 68       		.sleb128 -24
 3158 038d 0C       		.uleb128 0xc
 3159 038e 53000000 		.4byte	.LASF54
 3160 0392 01       		.byte	0x1
 3161 0393 E908     		.2byte	0x8e9
 3162 0395 C6000000 		.4byte	0xc6
 3163 0399 02       		.uleb128 0x2
 3164 039a 91       		.byte	0x91
 3165 039b 70       		.sleb128 -16
 3166 039c 0C       		.uleb128 0xc
 3167 039d 00000000 		.4byte	.LASF55
 3168 03a1 01       		.byte	0x1
 3169 03a2 EA08     		.2byte	0x8ea
 3170 03a4 AC030000 		.4byte	0x3ac
 3171 03a8 02       		.uleb128 0x2
 3172 03a9 91       		.byte	0x91
 3173 03aa 74       		.sleb128 -12
 3174 03ab 00       		.byte	0
 3175 03ac 06       		.uleb128 0x6
 3176 03ad 04       		.byte	0x4
 3177 03ae C6000000 		.4byte	0xc6
 3178 03b2 0E       		.uleb128 0xe
 3179 03b3 0A050000 		.4byte	.LASF56
 3180 03b7 01       		.byte	0x1
 3181 03b8 0909     		.2byte	0x909
 3182 03ba C6000000 		.4byte	0xc6
 3183 03be 00000000 		.4byte	.LFB15
 3184 03c2 34000000 		.4byte	.LFE15-.LFB15
 3185 03c6 01       		.uleb128 0x1
 3186 03c7 9C       		.byte	0x9c
 3187 03c8 EB030000 		.4byte	0x3eb
 3188 03cc 0B       		.uleb128 0xb
 3189 03cd 02030000 		.4byte	.LASF52
 3190 03d1 01       		.byte	0x1
 3191 03d2 0909     		.2byte	0x909
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 110


 3192 03d4 6B000000 		.4byte	0x6b
 3193 03d8 02       		.uleb128 0x2
 3194 03d9 91       		.byte	0x91
 3195 03da 6F       		.sleb128 -17
 3196 03db 0C       		.uleb128 0xc
 3197 03dc 00000000 		.4byte	.LASF55
 3198 03e0 01       		.byte	0x1
 3199 03e1 0B09     		.2byte	0x90b
 3200 03e3 AC030000 		.4byte	0x3ac
 3201 03e7 02       		.uleb128 0x2
 3202 03e8 91       		.byte	0x91
 3203 03e9 74       		.sleb128 -12
 3204 03ea 00       		.byte	0
 3205 03eb 0E       		.uleb128 0xe
 3206 03ec AF010000 		.4byte	.LASF57
 3207 03f0 01       		.byte	0x1
 3208 03f1 1F09     		.2byte	0x91f
 3209 03f3 C6000000 		.4byte	0xc6
 3210 03f7 00000000 		.4byte	.LFB16
 3211 03fb 4C000000 		.4byte	.LFE16-.LFB16
 3212 03ff 01       		.uleb128 0x1
 3213 0400 9C       		.byte	0x9c
 3214 0401 42040000 		.4byte	0x442
 3215 0405 0B       		.uleb128 0xb
 3216 0406 02030000 		.4byte	.LASF52
 3217 040a 01       		.byte	0x1
 3218 040b 1F09     		.2byte	0x91f
 3219 040d 6B000000 		.4byte	0x6b
 3220 0411 02       		.uleb128 0x2
 3221 0412 91       		.byte	0x91
 3222 0413 6F       		.sleb128 -17
 3223 0414 0B       		.uleb128 0xb
 3224 0415 25040000 		.4byte	.LASF53
 3225 0419 01       		.byte	0x1
 3226 041a 1F09     		.2byte	0x91f
 3227 041c C6000000 		.4byte	0xc6
 3228 0420 02       		.uleb128 0x2
 3229 0421 91       		.byte	0x91
 3230 0422 68       		.sleb128 -24
 3231 0423 0C       		.uleb128 0xc
 3232 0424 53000000 		.4byte	.LASF54
 3233 0428 01       		.byte	0x1
 3234 0429 2109     		.2byte	0x921
 3235 042b C6000000 		.4byte	0xc6
 3236 042f 02       		.uleb128 0x2
 3237 0430 91       		.byte	0x91
 3238 0431 70       		.sleb128 -16
 3239 0432 0C       		.uleb128 0xc
 3240 0433 00000000 		.4byte	.LASF55
 3241 0437 01       		.byte	0x1
 3242 0438 2209     		.2byte	0x922
 3243 043a AC030000 		.4byte	0x3ac
 3244 043e 02       		.uleb128 0x2
 3245 043f 91       		.byte	0x91
 3246 0440 74       		.sleb128 -12
 3247 0441 00       		.byte	0
 3248 0442 0E       		.uleb128 0xe
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 111


 3249 0443 B4040000 		.4byte	.LASF58
 3250 0447 01       		.byte	0x1
 3251 0448 3B09     		.2byte	0x93b
 3252 044a C6000000 		.4byte	0xc6
 3253 044e 00000000 		.4byte	.LFB17
 3254 0452 36000000 		.4byte	.LFE17-.LFB17
 3255 0456 01       		.uleb128 0x1
 3256 0457 9C       		.byte	0x9c
 3257 0458 7B040000 		.4byte	0x47b
 3258 045c 0B       		.uleb128 0xb
 3259 045d 02030000 		.4byte	.LASF52
 3260 0461 01       		.byte	0x1
 3261 0462 3B09     		.2byte	0x93b
 3262 0464 6B000000 		.4byte	0x6b
 3263 0468 02       		.uleb128 0x2
 3264 0469 91       		.byte	0x91
 3265 046a 6F       		.sleb128 -17
 3266 046b 0C       		.uleb128 0xc
 3267 046c 00000000 		.4byte	.LASF55
 3268 0470 01       		.byte	0x1
 3269 0471 3D09     		.2byte	0x93d
 3270 0473 AC030000 		.4byte	0x3ac
 3271 0477 02       		.uleb128 0x2
 3272 0478 91       		.byte	0x91
 3273 0479 74       		.sleb128 -12
 3274 047a 00       		.byte	0
 3275 047b 0A       		.uleb128 0xa
 3276 047c 7C040000 		.4byte	.LASF59
 3277 0480 01       		.byte	0x1
 3278 0481 4E09     		.2byte	0x94e
 3279 0483 00000000 		.4byte	.LFB18
 3280 0487 A8000000 		.4byte	.LFE18-.LFB18
 3281 048b 01       		.uleb128 0x1
 3282 048c 9C       		.byte	0x9c
 3283 048d DD040000 		.4byte	0x4dd
 3284 0491 0B       		.uleb128 0xb
 3285 0492 02030000 		.4byte	.LASF52
 3286 0496 01       		.byte	0x1
 3287 0497 4E09     		.2byte	0x94e
 3288 0499 6B000000 		.4byte	0x6b
 3289 049d 02       		.uleb128 0x2
 3290 049e 91       		.byte	0x91
 3291 049f 5F       		.sleb128 -33
 3292 04a0 0B       		.uleb128 0xb
 3293 04a1 09030000 		.4byte	.LASF60
 3294 04a5 01       		.byte	0x1
 3295 04a6 4E09     		.2byte	0x94e
 3296 04a8 6B000000 		.4byte	0x6b
 3297 04ac 02       		.uleb128 0x2
 3298 04ad 91       		.byte	0x91
 3299 04ae 5E       		.sleb128 -34
 3300 04af 0C       		.uleb128 0xc
 3301 04b0 1B010000 		.4byte	.LASF23
 3302 04b4 01       		.byte	0x1
 3303 04b5 5009     		.2byte	0x950
 3304 04b7 6B000000 		.4byte	0x6b
 3305 04bb 02       		.uleb128 0x2
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 112


 3306 04bc 91       		.byte	0x91
 3307 04bd 6B       		.sleb128 -21
 3308 04be 0C       		.uleb128 0xc
 3309 04bf 8B010000 		.4byte	.LASF61
 3310 04c3 01       		.byte	0x1
 3311 04c4 5109     		.2byte	0x951
 3312 04c6 83000000 		.4byte	0x83
 3313 04ca 02       		.uleb128 0x2
 3314 04cb 91       		.byte	0x91
 3315 04cc 6C       		.sleb128 -20
 3316 04cd 0C       		.uleb128 0xc
 3317 04ce 07020000 		.4byte	.LASF62
 3318 04d2 01       		.byte	0x1
 3319 04d3 5209     		.2byte	0x952
 3320 04d5 83000000 		.4byte	0x83
 3321 04d9 02       		.uleb128 0x2
 3322 04da 91       		.byte	0x91
 3323 04db 64       		.sleb128 -28
 3324 04dc 00       		.byte	0
 3325 04dd 0E       		.uleb128 0xe
 3326 04de DB010000 		.4byte	.LASF63
 3327 04e2 01       		.byte	0x1
 3328 04e3 7009     		.2byte	0x970
 3329 04e5 6B000000 		.4byte	0x6b
 3330 04e9 00000000 		.4byte	.LFB19
 3331 04ed 58000000 		.4byte	.LFE19-.LFB19
 3332 04f1 01       		.uleb128 0x1
 3333 04f2 9C       		.byte	0x9c
 3334 04f3 16050000 		.4byte	0x516
 3335 04f7 0B       		.uleb128 0xb
 3336 04f8 02030000 		.4byte	.LASF52
 3337 04fc 01       		.byte	0x1
 3338 04fd 7009     		.2byte	0x970
 3339 04ff 6B000000 		.4byte	0x6b
 3340 0503 02       		.uleb128 0x2
 3341 0504 91       		.byte	0x91
 3342 0505 6F       		.sleb128 -17
 3343 0506 0C       		.uleb128 0xc
 3344 0507 09030000 		.4byte	.LASF60
 3345 050b 01       		.byte	0x1
 3346 050c 7209     		.2byte	0x972
 3347 050e 6B000000 		.4byte	0x6b
 3348 0512 02       		.uleb128 0x2
 3349 0513 91       		.byte	0x91
 3350 0514 77       		.sleb128 -9
 3351 0515 00       		.byte	0
 3352 0516 0D       		.uleb128 0xd
 3353 0517 FE040000 		.4byte	.LASF64
 3354 051b 01       		.byte	0x1
 3355 051c 8509     		.2byte	0x985
 3356 051e 00000000 		.4byte	.LFB20
 3357 0522 2C000000 		.4byte	.LFE20-.LFB20
 3358 0526 01       		.uleb128 0x1
 3359 0527 9C       		.byte	0x9c
 3360 0528 3C050000 		.4byte	0x53c
 3361 052c 0B       		.uleb128 0xb
 3362 052d 02030000 		.4byte	.LASF52
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 113


 3363 0531 01       		.byte	0x1
 3364 0532 8509     		.2byte	0x985
 3365 0534 6B000000 		.4byte	0x6b
 3366 0538 02       		.uleb128 0x2
 3367 0539 91       		.byte	0x91
 3368 053a 77       		.sleb128 -9
 3369 053b 00       		.byte	0
 3370 053c 11       		.uleb128 0x11
 3371 053d E2000000 		.4byte	.LASF65
 3372 0541 01       		.byte	0x1
 3373 0542 9709     		.2byte	0x997
 3374 0544 6B000000 		.4byte	0x6b
 3375 0548 00000000 		.4byte	.LFB21
 3376 054c 30000000 		.4byte	.LFE21-.LFB21
 3377 0550 01       		.uleb128 0x1
 3378 0551 9C       		.byte	0x9c
 3379 0552 66050000 		.4byte	0x566
 3380 0556 0B       		.uleb128 0xb
 3381 0557 02030000 		.4byte	.LASF52
 3382 055b 01       		.byte	0x1
 3383 055c 9709     		.2byte	0x997
 3384 055e 6B000000 		.4byte	0x6b
 3385 0562 02       		.uleb128 0x2
 3386 0563 91       		.byte	0x91
 3387 0564 77       		.sleb128 -9
 3388 0565 00       		.byte	0
 3389 0566 0D       		.uleb128 0xd
 3390 0567 46010000 		.4byte	.LASF66
 3391 056b 01       		.byte	0x1
 3392 056c A709     		.2byte	0x9a7
 3393 056e 00000000 		.4byte	.LFB22
 3394 0572 2C000000 		.4byte	.LFE22-.LFB22
 3395 0576 01       		.uleb128 0x1
 3396 0577 9C       		.byte	0x9c
 3397 0578 8C050000 		.4byte	0x58c
 3398 057c 0B       		.uleb128 0xb
 3399 057d 02030000 		.4byte	.LASF52
 3400 0581 01       		.byte	0x1
 3401 0582 A709     		.2byte	0x9a7
 3402 0584 6B000000 		.4byte	0x6b
 3403 0588 02       		.uleb128 0x2
 3404 0589 91       		.byte	0x91
 3405 058a 77       		.sleb128 -9
 3406 058b 00       		.byte	0
 3407 058c 0D       		.uleb128 0xd
 3408 058d 8A020000 		.4byte	.LASF67
 3409 0591 01       		.byte	0x1
 3410 0592 B509     		.2byte	0x9b5
 3411 0594 00000000 		.4byte	.LFB23
 3412 0598 2C000000 		.4byte	.LFE23-.LFB23
 3413 059c 01       		.uleb128 0x1
 3414 059d 9C       		.byte	0x9c
 3415 059e B2050000 		.4byte	0x5b2
 3416 05a2 0B       		.uleb128 0xb
 3417 05a3 02030000 		.4byte	.LASF52
 3418 05a7 01       		.byte	0x1
 3419 05a8 B509     		.2byte	0x9b5
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 114


 3420 05aa 6B000000 		.4byte	0x6b
 3421 05ae 02       		.uleb128 0x2
 3422 05af 91       		.byte	0x91
 3423 05b0 77       		.sleb128 -9
 3424 05b1 00       		.byte	0
 3425 05b2 0D       		.uleb128 0xd
 3426 05b3 07040000 		.4byte	.LASF68
 3427 05b7 01       		.byte	0x1
 3428 05b8 C409     		.2byte	0x9c4
 3429 05ba 00000000 		.4byte	.LFB24
 3430 05be 2C000000 		.4byte	.LFE24-.LFB24
 3431 05c2 01       		.uleb128 0x1
 3432 05c3 9C       		.byte	0x9c
 3433 05c4 D8050000 		.4byte	0x5d8
 3434 05c8 0B       		.uleb128 0xb
 3435 05c9 02030000 		.4byte	.LASF52
 3436 05cd 01       		.byte	0x1
 3437 05ce C409     		.2byte	0x9c4
 3438 05d0 6B000000 		.4byte	0x6b
 3439 05d4 02       		.uleb128 0x2
 3440 05d5 91       		.byte	0x91
 3441 05d6 77       		.sleb128 -9
 3442 05d7 00       		.byte	0
 3443 05d8 0D       		.uleb128 0xd
 3444 05d9 DF040000 		.4byte	.LASF69
 3445 05dd 01       		.byte	0x1
 3446 05de D309     		.2byte	0x9d3
 3447 05e0 00000000 		.4byte	.LFB25
 3448 05e4 16000000 		.4byte	.LFE25-.LFB25
 3449 05e8 01       		.uleb128 0x1
 3450 05e9 9C       		.byte	0x9c
 3451 05ea FE050000 		.4byte	0x5fe
 3452 05ee 0B       		.uleb128 0xb
 3453 05ef 30050000 		.4byte	.LASF45
 3454 05f3 01       		.byte	0x1
 3455 05f4 D309     		.2byte	0x9d3
 3456 05f6 6B000000 		.4byte	0x6b
 3457 05fa 02       		.uleb128 0x2
 3458 05fb 91       		.byte	0x91
 3459 05fc 77       		.sleb128 -9
 3460 05fd 00       		.byte	0
 3461 05fe 0F       		.uleb128 0xf
 3462 05ff B9000000 		.4byte	.LASF70
 3463 0603 01       		.byte	0x1
 3464 0604 EB09     		.2byte	0x9eb
 3465 0606 00000000 		.4byte	.LFB26
 3466 060a 24000000 		.4byte	.LFE26-.LFB26
 3467 060e 01       		.uleb128 0x1
 3468 060f 9C       		.byte	0x9c
 3469 0610 0A       		.uleb128 0xa
 3470 0611 AF050000 		.4byte	.LASF71
 3471 0615 01       		.byte	0x1
 3472 0616 FF09     		.2byte	0x9ff
 3473 0618 00000000 		.4byte	.LFB27
 3474 061c 4C000000 		.4byte	.LFE27-.LFB27
 3475 0620 01       		.uleb128 0x1
 3476 0621 9C       		.byte	0x9c
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 115


 3477 0622 36060000 		.4byte	0x636
 3478 0626 0B       		.uleb128 0xb
 3479 0627 C3040000 		.4byte	.LASF72
 3480 062b 01       		.byte	0x1
 3481 062c FF09     		.2byte	0x9ff
 3482 062e 83000000 		.4byte	0x83
 3483 0632 02       		.uleb128 0x2
 3484 0633 91       		.byte	0x91
 3485 0634 74       		.sleb128 -12
 3486 0635 00       		.byte	0
 3487 0636 0A       		.uleb128 0xa
 3488 0637 26050000 		.4byte	.LASF73
 3489 063b 01       		.byte	0x1
 3490 063c 160A     		.2byte	0xa16
 3491 063e 00000000 		.4byte	.LFB28
 3492 0642 28000000 		.4byte	.LFE28-.LFB28
 3493 0646 01       		.uleb128 0x1
 3494 0647 9C       		.byte	0x9c
 3495 0648 5C060000 		.4byte	0x65c
 3496 064c 0B       		.uleb128 0xb
 3497 064d 47060000 		.4byte	.LASF74
 3498 0651 01       		.byte	0x1
 3499 0652 160A     		.2byte	0xa16
 3500 0654 77000000 		.4byte	0x77
 3501 0658 02       		.uleb128 0x2
 3502 0659 91       		.byte	0x91
 3503 065a 76       		.sleb128 -10
 3504 065b 00       		.byte	0
 3505 065c 0A       		.uleb128 0xa
 3506 065d 0F010000 		.4byte	.LASF75
 3507 0661 01       		.byte	0x1
 3508 0662 240A     		.2byte	0xa24
 3509 0664 00000000 		.4byte	.LFB29
 3510 0668 84000000 		.4byte	.LFE29-.LFB29
 3511 066c 01       		.uleb128 0x1
 3512 066d 9C       		.byte	0x9c
 3513 066e 82060000 		.4byte	0x682
 3514 0672 0B       		.uleb128 0xb
 3515 0673 0A010000 		.4byte	.LASF33
 3516 0677 01       		.byte	0x1
 3517 0678 240A     		.2byte	0xa24
 3518 067a 83000000 		.4byte	0x83
 3519 067e 02       		.uleb128 0x2
 3520 067f 91       		.byte	0x91
 3521 0680 74       		.sleb128 -12
 3522 0681 00       		.byte	0
 3523 0682 12       		.uleb128 0x12
 3524 0683 E2030000 		.4byte	.LASF76
 3525 0687 01       		.byte	0x1
 3526 0688 440A     		.2byte	0xa44
 3527 068a 00000000 		.4byte	.LFB30
 3528 068e 24000000 		.4byte	.LFE30-.LFB30
 3529 0692 01       		.uleb128 0x1
 3530 0693 9C       		.byte	0x9c
 3531 0694 0A       		.uleb128 0xa
 3532 0695 F9010000 		.4byte	.LASF77
 3533 0699 01       		.byte	0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 116


 3534 069a 610A     		.2byte	0xa61
 3535 069c 00000000 		.4byte	.LFB31
 3536 06a0 60000000 		.4byte	.LFE31-.LFB31
 3537 06a4 01       		.uleb128 0x1
 3538 06a5 9C       		.byte	0x9c
 3539 06a6 B8060000 		.4byte	0x6b8
 3540 06aa 13       		.uleb128 0x13
 3541 06ab 6900     		.ascii	"i\000"
 3542 06ad 01       		.byte	0x1
 3543 06ae 630A     		.2byte	0xa63
 3544 06b0 83000000 		.4byte	0x83
 3545 06b4 02       		.uleb128 0x2
 3546 06b5 91       		.byte	0x91
 3547 06b6 74       		.sleb128 -12
 3548 06b7 00       		.byte	0
 3549 06b8 12       		.uleb128 0x12
 3550 06b9 49050000 		.4byte	.LASF78
 3551 06bd 01       		.byte	0x1
 3552 06be 800A     		.2byte	0xa80
 3553 06c0 00000000 		.4byte	.LFB32
 3554 06c4 20000000 		.4byte	.LFE32-.LFB32
 3555 06c8 01       		.uleb128 0x1
 3556 06c9 9C       		.byte	0x9c
 3557 06ca 0F       		.uleb128 0xf
 3558 06cb F0050000 		.4byte	.LASF79
 3559 06cf 01       		.byte	0x1
 3560 06d0 910A     		.2byte	0xa91
 3561 06d2 00000000 		.4byte	.LFB33
 3562 06d6 1C000000 		.4byte	.LFE33-.LFB33
 3563 06da 01       		.uleb128 0x1
 3564 06db 9C       		.byte	0x9c
 3565 06dc 0F       		.uleb128 0xf
 3566 06dd C9000000 		.4byte	.LASF80
 3567 06e1 01       		.byte	0x1
 3568 06e2 A10A     		.2byte	0xaa1
 3569 06e4 00000000 		.4byte	.LFB34
 3570 06e8 1C000000 		.4byte	.LFE34-.LFB34
 3571 06ec 01       		.uleb128 0x1
 3572 06ed 9C       		.byte	0x9c
 3573 06ee 0F       		.uleb128 0xf
 3574 06ef B7050000 		.4byte	.LASF81
 3575 06f3 01       		.byte	0x1
 3576 06f4 B10A     		.2byte	0xab1
 3577 06f6 00000000 		.4byte	.LFB35
 3578 06fa 1C000000 		.4byte	.LFE35-.LFB35
 3579 06fe 01       		.uleb128 0x1
 3580 06ff 9C       		.byte	0x9c
 3581 0700 0D       		.uleb128 0xd
 3582 0701 5B060000 		.4byte	.LASF82
 3583 0705 01       		.byte	0x1
 3584 0706 C20A     		.2byte	0xac2
 3585 0708 00000000 		.4byte	.LFB36
 3586 070c 20000000 		.4byte	.LFE36-.LFB36
 3587 0710 01       		.uleb128 0x1
 3588 0711 9C       		.byte	0x9c
 3589 0712 26070000 		.4byte	0x726
 3590 0716 0B       		.uleb128 0xb
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 117


 3591 0717 07020000 		.4byte	.LASF62
 3592 071b 01       		.byte	0x1
 3593 071c C20A     		.2byte	0xac2
 3594 071e 83000000 		.4byte	0x83
 3595 0722 02       		.uleb128 0x2
 3596 0723 91       		.byte	0x91
 3597 0724 74       		.sleb128 -12
 3598 0725 00       		.byte	0
 3599 0726 10       		.uleb128 0x10
 3600 0727 2A010000 		.4byte	.LASF84
 3601 072b 01       		.byte	0x1
 3602 072c D20A     		.2byte	0xad2
 3603 072e 83000000 		.4byte	0x83
 3604 0732 00000000 		.4byte	.LFB37
 3605 0736 18000000 		.4byte	.LFE37-.LFB37
 3606 073a 01       		.uleb128 0x1
 3607 073b 9C       		.byte	0x9c
 3608 073c 10       		.uleb128 0x10
 3609 073d 5C040000 		.4byte	.LASF85
 3610 0741 01       		.byte	0x1
 3611 0742 E20A     		.2byte	0xae2
 3612 0744 83000000 		.4byte	0x83
 3613 0748 00000000 		.4byte	.LFB38
 3614 074c 18000000 		.4byte	.LFE38-.LFB38
 3615 0750 01       		.uleb128 0x1
 3616 0751 9C       		.byte	0x9c
 3617 0752 10       		.uleb128 0x10
 3618 0753 1B020000 		.4byte	.LASF86
 3619 0757 01       		.byte	0x1
 3620 0758 320B     		.2byte	0xb32
 3621 075a 83000000 		.4byte	0x83
 3622 075e 00000000 		.4byte	.LFB39
 3623 0762 18000000 		.4byte	.LFE39-.LFB39
 3624 0766 01       		.uleb128 0x1
 3625 0767 9C       		.byte	0x9c
 3626 0768 0F       		.uleb128 0xf
 3627 0769 3E020000 		.4byte	.LASF87
 3628 076d 01       		.byte	0x1
 3629 076e 3F0B     		.2byte	0xb3f
 3630 0770 00000000 		.4byte	.LFB40
 3631 0774 14000000 		.4byte	.LFE40-.LFB40
 3632 0778 01       		.uleb128 0x1
 3633 0779 9C       		.byte	0x9c
 3634 077a 11       		.uleb128 0x11
 3635 077b 70050000 		.4byte	.LASF88
 3636 077f 01       		.byte	0x1
 3637 0780 620B     		.2byte	0xb62
 3638 0782 E7000000 		.4byte	0xe7
 3639 0786 00000000 		.4byte	.LFB41
 3640 078a 2C000000 		.4byte	.LFE41-.LFB41
 3641 078e 01       		.uleb128 0x1
 3642 078f 9C       		.byte	0x9c
 3643 0790 C2070000 		.4byte	0x7c2
 3644 0794 0B       		.uleb128 0xb
 3645 0795 02030000 		.4byte	.LASF52
 3646 0799 01       		.byte	0x1
 3647 079a 620B     		.2byte	0xb62
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 118


 3648 079c 83000000 		.4byte	0x83
 3649 07a0 02       		.uleb128 0x2
 3650 07a1 91       		.byte	0x91
 3651 07a2 6C       		.sleb128 -20
 3652 07a3 0B       		.uleb128 0xb
 3653 07a4 42040000 		.4byte	.LASF89
 3654 07a8 01       		.byte	0x1
 3655 07a9 620B     		.2byte	0xb62
 3656 07ab E7000000 		.4byte	0xe7
 3657 07af 02       		.uleb128 0x2
 3658 07b0 91       		.byte	0x91
 3659 07b1 68       		.sleb128 -24
 3660 07b2 0C       		.uleb128 0xc
 3661 07b3 5A000000 		.4byte	.LASF90
 3662 07b7 01       		.byte	0x1
 3663 07b8 640B     		.2byte	0xb64
 3664 07ba E7000000 		.4byte	0xe7
 3665 07be 02       		.uleb128 0x2
 3666 07bf 91       		.byte	0x91
 3667 07c0 74       		.sleb128 -12
 3668 07c1 00       		.byte	0
 3669 07c2 11       		.uleb128 0x11
 3670 07c3 53010000 		.4byte	.LASF91
 3671 07c7 01       		.byte	0x1
 3672 07c8 7A0B     		.2byte	0xb7a
 3673 07ca E7000000 		.4byte	0xe7
 3674 07ce 00000000 		.4byte	.LFB42
 3675 07d2 1C000000 		.4byte	.LFE42-.LFB42
 3676 07d6 01       		.uleb128 0x1
 3677 07d7 9C       		.byte	0x9c
 3678 07d8 EC070000 		.4byte	0x7ec
 3679 07dc 0B       		.uleb128 0xb
 3680 07dd 02030000 		.4byte	.LASF52
 3681 07e1 01       		.byte	0x1
 3682 07e2 7A0B     		.2byte	0xb7a
 3683 07e4 83000000 		.4byte	0x83
 3684 07e8 02       		.uleb128 0x2
 3685 07e9 91       		.byte	0x91
 3686 07ea 74       		.sleb128 -12
 3687 07eb 00       		.byte	0
 3688 07ec 14       		.uleb128 0x14
 3689 07ed 6E060000 		.4byte	.LASF105
 3690 07f1 01       		.byte	0x1
 3691 07f2 870B     		.2byte	0xb87
 3692 07f4 00000000 		.4byte	.LFB43
 3693 07f8 44000000 		.4byte	.LFE43-.LFB43
 3694 07fc 01       		.uleb128 0x1
 3695 07fd 9C       		.byte	0x9c
 3696 07fe 10080000 		.4byte	0x810
 3697 0802 13       		.uleb128 0x13
 3698 0803 6900     		.ascii	"i\000"
 3699 0805 01       		.byte	0x1
 3700 0806 890B     		.2byte	0xb89
 3701 0808 83000000 		.4byte	0x83
 3702 080c 02       		.uleb128 0x2
 3703 080d 91       		.byte	0x91
 3704 080e 74       		.sleb128 -12
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 119


 3705 080f 00       		.byte	0
 3706 0810 0D       		.uleb128 0xd
 3707 0811 0D020000 		.4byte	.LASF92
 3708 0815 01       		.byte	0x1
 3709 0816 A70B     		.2byte	0xba7
 3710 0818 00000000 		.4byte	.LFB44
 3711 081c C0000000 		.4byte	.LFE44-.LFB44
 3712 0820 01       		.uleb128 0x1
 3713 0821 9C       		.byte	0x9c
 3714 0822 36080000 		.4byte	0x836
 3715 0826 0B       		.uleb128 0xb
 3716 0827 A6050000 		.4byte	.LASF93
 3717 082b 01       		.byte	0x1
 3718 082c A70B     		.2byte	0xba7
 3719 082e 36080000 		.4byte	0x836
 3720 0832 02       		.uleb128 0x2
 3721 0833 91       		.byte	0x91
 3722 0834 74       		.sleb128 -12
 3723 0835 00       		.byte	0
 3724 0836 06       		.uleb128 0x6
 3725 0837 04       		.byte	0x4
 3726 0838 83000000 		.4byte	0x83
 3727 083c 15       		.uleb128 0x15
 3728 083d E7000000 		.4byte	0xe7
 3729 0841 4C080000 		.4byte	0x84c
 3730 0845 16       		.uleb128 0x16
 3731 0846 E0000000 		.4byte	0xe0
 3732 084a 04       		.byte	0x4
 3733 084b 00       		.byte	0
 3734 084c 17       		.uleb128 0x17
 3735 084d 85050000 		.4byte	.LASF94
 3736 0851 01       		.byte	0x1
 3737 0852 22       		.byte	0x22
 3738 0853 3C080000 		.4byte	0x83c
 3739 0857 05       		.uleb128 0x5
 3740 0858 03       		.byte	0x3
 3741 0859 00000000 		.4byte	CySysTickCallbacks
 3742 085d 18       		.uleb128 0x18
 3743 085e 6E040000 		.4byte	.LASF95
 3744 0862 01       		.byte	0x1
 3745 0863 1B       		.byte	0x1b
 3746 0864 83000000 		.4byte	0x83
 3747 0868 05       		.uleb128 0x5
 3748 0869 03       		.byte	0x3
 3749 086a 00000000 		.4byte	cydelayFreqHz
 3750 086e 18       		.uleb128 0x18
 3751 086f 6E010000 		.4byte	.LASF96
 3752 0873 01       		.byte	0x1
 3753 0874 1C       		.byte	0x1c
 3754 0875 83000000 		.4byte	0x83
 3755 0879 05       		.uleb128 0x5
 3756 087a 03       		.byte	0x3
 3757 087b 00000000 		.4byte	cydelayFreqKhz
 3758 087f 18       		.uleb128 0x18
 3759 0880 E1050000 		.4byte	.LASF97
 3760 0884 01       		.byte	0x1
 3761 0885 1D       		.byte	0x1d
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 120


 3762 0886 6B000000 		.4byte	0x6b
 3763 088a 05       		.uleb128 0x5
 3764 088b 03       		.byte	0x3
 3765 088c 00000000 		.4byte	cydelayFreqMhz
 3766 0890 18       		.uleb128 0x18
 3767 0891 EC010000 		.4byte	.LASF98
 3768 0895 01       		.byte	0x1
 3769 0896 1E       		.byte	0x1e
 3770 0897 83000000 		.4byte	0x83
 3771 089b 05       		.uleb128 0x5
 3772 089c 03       		.byte	0x3
 3773 089d 00000000 		.4byte	cydelay32kMs
 3774 08a1 18       		.uleb128 0x18
 3775 08a2 9B000000 		.4byte	.LASF99
 3776 08a6 01       		.byte	0x1
 3777 08a7 36       		.byte	0x36
 3778 08a8 83000000 		.4byte	0x83
 3779 08ac 05       		.uleb128 0x5
 3780 08ad 03       		.byte	0x3
 3781 08ae 00000000 		.4byte	CySysTickInitVar
 3782 08b2 15       		.uleb128 0x15
 3783 08b3 C2080000 		.4byte	0x8c2
 3784 08b7 C2080000 		.4byte	0x8c2
 3785 08bb 16       		.uleb128 0x16
 3786 08bc E0000000 		.4byte	0xe0
 3787 08c0 2D       		.byte	0x2d
 3788 08c1 00       		.byte	0
 3789 08c2 19       		.uleb128 0x19
 3790 08c3 6B000000 		.4byte	0x6b
 3791 08c7 18       		.uleb128 0x18
 3792 08c8 4B040000 		.4byte	.LASF100
 3793 08cc 01       		.byte	0x1
 3794 08cd 3B       		.byte	0x3b
 3795 08ce D8080000 		.4byte	0x8d8
 3796 08d2 05       		.uleb128 0x5
 3797 08d3 03       		.byte	0x3
 3798 08d4 00000000 		.4byte	cyImoFreqMhz2Reg
 3799 08d8 19       		.uleb128 0x19
 3800 08d9 B2080000 		.4byte	0x8b2
 3801 08dd 18       		.uleb128 0x18
 3802 08de 40000000 		.4byte	.LASF101
 3803 08e2 01       		.byte	0x1
 3804 08e3 5B       		.byte	0x5b
 3805 08e4 83000000 		.4byte	0x83
 3806 08e8 05       		.uleb128 0x5
 3807 08e9 03       		.byte	0x3
 3808 08ea 00000000 		.4byte	CySysClkPumpConfig
 3809 08ee 00       		.byte	0
 3810              		.section	.debug_abbrev,"",%progbits
 3811              	.Ldebug_abbrev0:
 3812 0000 01       		.uleb128 0x1
 3813 0001 11       		.uleb128 0x11
 3814 0002 01       		.byte	0x1
 3815 0003 25       		.uleb128 0x25
 3816 0004 0E       		.uleb128 0xe
 3817 0005 13       		.uleb128 0x13
 3818 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 121


 3819 0007 03       		.uleb128 0x3
 3820 0008 0E       		.uleb128 0xe
 3821 0009 1B       		.uleb128 0x1b
 3822 000a 0E       		.uleb128 0xe
 3823 000b 55       		.uleb128 0x55
 3824 000c 17       		.uleb128 0x17
 3825 000d 11       		.uleb128 0x11
 3826 000e 01       		.uleb128 0x1
 3827 000f 10       		.uleb128 0x10
 3828 0010 17       		.uleb128 0x17
 3829 0011 00       		.byte	0
 3830 0012 00       		.byte	0
 3831 0013 02       		.uleb128 0x2
 3832 0014 24       		.uleb128 0x24
 3833 0015 00       		.byte	0
 3834 0016 0B       		.uleb128 0xb
 3835 0017 0B       		.uleb128 0xb
 3836 0018 3E       		.uleb128 0x3e
 3837 0019 0B       		.uleb128 0xb
 3838 001a 03       		.uleb128 0x3
 3839 001b 0E       		.uleb128 0xe
 3840 001c 00       		.byte	0
 3841 001d 00       		.byte	0
 3842 001e 03       		.uleb128 0x3
 3843 001f 24       		.uleb128 0x24
 3844 0020 00       		.byte	0
 3845 0021 0B       		.uleb128 0xb
 3846 0022 0B       		.uleb128 0xb
 3847 0023 3E       		.uleb128 0x3e
 3848 0024 0B       		.uleb128 0xb
 3849 0025 03       		.uleb128 0x3
 3850 0026 08       		.uleb128 0x8
 3851 0027 00       		.byte	0
 3852 0028 00       		.byte	0
 3853 0029 04       		.uleb128 0x4
 3854 002a 16       		.uleb128 0x16
 3855 002b 00       		.byte	0
 3856 002c 03       		.uleb128 0x3
 3857 002d 0E       		.uleb128 0xe
 3858 002e 3A       		.uleb128 0x3a
 3859 002f 0B       		.uleb128 0xb
 3860 0030 3B       		.uleb128 0x3b
 3861 0031 05       		.uleb128 0x5
 3862 0032 49       		.uleb128 0x49
 3863 0033 13       		.uleb128 0x13
 3864 0034 00       		.byte	0
 3865 0035 00       		.byte	0
 3866 0036 05       		.uleb128 0x5
 3867 0037 35       		.uleb128 0x35
 3868 0038 00       		.byte	0
 3869 0039 49       		.uleb128 0x49
 3870 003a 13       		.uleb128 0x13
 3871 003b 00       		.byte	0
 3872 003c 00       		.byte	0
 3873 003d 06       		.uleb128 0x6
 3874 003e 0F       		.uleb128 0xf
 3875 003f 00       		.byte	0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 122


 3876 0040 0B       		.uleb128 0xb
 3877 0041 0B       		.uleb128 0xb
 3878 0042 49       		.uleb128 0x49
 3879 0043 13       		.uleb128 0x13
 3880 0044 00       		.byte	0
 3881 0045 00       		.byte	0
 3882 0046 07       		.uleb128 0x7
 3883 0047 15       		.uleb128 0x15
 3884 0048 00       		.byte	0
 3885 0049 27       		.uleb128 0x27
 3886 004a 19       		.uleb128 0x19
 3887 004b 00       		.byte	0
 3888 004c 00       		.byte	0
 3889 004d 08       		.uleb128 0x8
 3890 004e 16       		.uleb128 0x16
 3891 004f 00       		.byte	0
 3892 0050 03       		.uleb128 0x3
 3893 0051 0E       		.uleb128 0xe
 3894 0052 3A       		.uleb128 0x3a
 3895 0053 0B       		.uleb128 0xb
 3896 0054 3B       		.uleb128 0x3b
 3897 0055 0B       		.uleb128 0xb
 3898 0056 49       		.uleb128 0x49
 3899 0057 13       		.uleb128 0x13
 3900 0058 00       		.byte	0
 3901 0059 00       		.byte	0
 3902 005a 09       		.uleb128 0x9
 3903 005b 2E       		.uleb128 0x2e
 3904 005c 00       		.byte	0
 3905 005d 3F       		.uleb128 0x3f
 3906 005e 19       		.uleb128 0x19
 3907 005f 03       		.uleb128 0x3
 3908 0060 0E       		.uleb128 0xe
 3909 0061 3A       		.uleb128 0x3a
 3910 0062 0B       		.uleb128 0xb
 3911 0063 3B       		.uleb128 0x3b
 3912 0064 0B       		.uleb128 0xb
 3913 0065 27       		.uleb128 0x27
 3914 0066 19       		.uleb128 0x19
 3915 0067 11       		.uleb128 0x11
 3916 0068 01       		.uleb128 0x1
 3917 0069 12       		.uleb128 0x12
 3918 006a 06       		.uleb128 0x6
 3919 006b 40       		.uleb128 0x40
 3920 006c 18       		.uleb128 0x18
 3921 006d 9742     		.uleb128 0x2117
 3922 006f 19       		.uleb128 0x19
 3923 0070 00       		.byte	0
 3924 0071 00       		.byte	0
 3925 0072 0A       		.uleb128 0xa
 3926 0073 2E       		.uleb128 0x2e
 3927 0074 01       		.byte	0x1
 3928 0075 3F       		.uleb128 0x3f
 3929 0076 19       		.uleb128 0x19
 3930 0077 03       		.uleb128 0x3
 3931 0078 0E       		.uleb128 0xe
 3932 0079 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 123


 3933 007a 0B       		.uleb128 0xb
 3934 007b 3B       		.uleb128 0x3b
 3935 007c 05       		.uleb128 0x5
 3936 007d 27       		.uleb128 0x27
 3937 007e 19       		.uleb128 0x19
 3938 007f 11       		.uleb128 0x11
 3939 0080 01       		.uleb128 0x1
 3940 0081 12       		.uleb128 0x12
 3941 0082 06       		.uleb128 0x6
 3942 0083 40       		.uleb128 0x40
 3943 0084 18       		.uleb128 0x18
 3944 0085 9642     		.uleb128 0x2116
 3945 0087 19       		.uleb128 0x19
 3946 0088 01       		.uleb128 0x1
 3947 0089 13       		.uleb128 0x13
 3948 008a 00       		.byte	0
 3949 008b 00       		.byte	0
 3950 008c 0B       		.uleb128 0xb
 3951 008d 05       		.uleb128 0x5
 3952 008e 00       		.byte	0
 3953 008f 03       		.uleb128 0x3
 3954 0090 0E       		.uleb128 0xe
 3955 0091 3A       		.uleb128 0x3a
 3956 0092 0B       		.uleb128 0xb
 3957 0093 3B       		.uleb128 0x3b
 3958 0094 05       		.uleb128 0x5
 3959 0095 49       		.uleb128 0x49
 3960 0096 13       		.uleb128 0x13
 3961 0097 02       		.uleb128 0x2
 3962 0098 18       		.uleb128 0x18
 3963 0099 00       		.byte	0
 3964 009a 00       		.byte	0
 3965 009b 0C       		.uleb128 0xc
 3966 009c 34       		.uleb128 0x34
 3967 009d 00       		.byte	0
 3968 009e 03       		.uleb128 0x3
 3969 009f 0E       		.uleb128 0xe
 3970 00a0 3A       		.uleb128 0x3a
 3971 00a1 0B       		.uleb128 0xb
 3972 00a2 3B       		.uleb128 0x3b
 3973 00a3 05       		.uleb128 0x5
 3974 00a4 49       		.uleb128 0x49
 3975 00a5 13       		.uleb128 0x13
 3976 00a6 02       		.uleb128 0x2
 3977 00a7 18       		.uleb128 0x18
 3978 00a8 00       		.byte	0
 3979 00a9 00       		.byte	0
 3980 00aa 0D       		.uleb128 0xd
 3981 00ab 2E       		.uleb128 0x2e
 3982 00ac 01       		.byte	0x1
 3983 00ad 3F       		.uleb128 0x3f
 3984 00ae 19       		.uleb128 0x19
 3985 00af 03       		.uleb128 0x3
 3986 00b0 0E       		.uleb128 0xe
 3987 00b1 3A       		.uleb128 0x3a
 3988 00b2 0B       		.uleb128 0xb
 3989 00b3 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 124


 3990 00b4 05       		.uleb128 0x5
 3991 00b5 27       		.uleb128 0x27
 3992 00b6 19       		.uleb128 0x19
 3993 00b7 11       		.uleb128 0x11
 3994 00b8 01       		.uleb128 0x1
 3995 00b9 12       		.uleb128 0x12
 3996 00ba 06       		.uleb128 0x6
 3997 00bb 40       		.uleb128 0x40
 3998 00bc 18       		.uleb128 0x18
 3999 00bd 9742     		.uleb128 0x2117
 4000 00bf 19       		.uleb128 0x19
 4001 00c0 01       		.uleb128 0x1
 4002 00c1 13       		.uleb128 0x13
 4003 00c2 00       		.byte	0
 4004 00c3 00       		.byte	0
 4005 00c4 0E       		.uleb128 0xe
 4006 00c5 2E       		.uleb128 0x2e
 4007 00c6 01       		.byte	0x1
 4008 00c7 3F       		.uleb128 0x3f
 4009 00c8 19       		.uleb128 0x19
 4010 00c9 03       		.uleb128 0x3
 4011 00ca 0E       		.uleb128 0xe
 4012 00cb 3A       		.uleb128 0x3a
 4013 00cc 0B       		.uleb128 0xb
 4014 00cd 3B       		.uleb128 0x3b
 4015 00ce 05       		.uleb128 0x5
 4016 00cf 27       		.uleb128 0x27
 4017 00d0 19       		.uleb128 0x19
 4018 00d1 49       		.uleb128 0x49
 4019 00d2 13       		.uleb128 0x13
 4020 00d3 11       		.uleb128 0x11
 4021 00d4 01       		.uleb128 0x1
 4022 00d5 12       		.uleb128 0x12
 4023 00d6 06       		.uleb128 0x6
 4024 00d7 40       		.uleb128 0x40
 4025 00d8 18       		.uleb128 0x18
 4026 00d9 9642     		.uleb128 0x2116
 4027 00db 19       		.uleb128 0x19
 4028 00dc 01       		.uleb128 0x1
 4029 00dd 13       		.uleb128 0x13
 4030 00de 00       		.byte	0
 4031 00df 00       		.byte	0
 4032 00e0 0F       		.uleb128 0xf
 4033 00e1 2E       		.uleb128 0x2e
 4034 00e2 00       		.byte	0
 4035 00e3 3F       		.uleb128 0x3f
 4036 00e4 19       		.uleb128 0x19
 4037 00e5 03       		.uleb128 0x3
 4038 00e6 0E       		.uleb128 0xe
 4039 00e7 3A       		.uleb128 0x3a
 4040 00e8 0B       		.uleb128 0xb
 4041 00e9 3B       		.uleb128 0x3b
 4042 00ea 05       		.uleb128 0x5
 4043 00eb 27       		.uleb128 0x27
 4044 00ec 19       		.uleb128 0x19
 4045 00ed 11       		.uleb128 0x11
 4046 00ee 01       		.uleb128 0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 125


 4047 00ef 12       		.uleb128 0x12
 4048 00f0 06       		.uleb128 0x6
 4049 00f1 40       		.uleb128 0x40
 4050 00f2 18       		.uleb128 0x18
 4051 00f3 9742     		.uleb128 0x2117
 4052 00f5 19       		.uleb128 0x19
 4053 00f6 00       		.byte	0
 4054 00f7 00       		.byte	0
 4055 00f8 10       		.uleb128 0x10
 4056 00f9 2E       		.uleb128 0x2e
 4057 00fa 00       		.byte	0
 4058 00fb 3F       		.uleb128 0x3f
 4059 00fc 19       		.uleb128 0x19
 4060 00fd 03       		.uleb128 0x3
 4061 00fe 0E       		.uleb128 0xe
 4062 00ff 3A       		.uleb128 0x3a
 4063 0100 0B       		.uleb128 0xb
 4064 0101 3B       		.uleb128 0x3b
 4065 0102 05       		.uleb128 0x5
 4066 0103 27       		.uleb128 0x27
 4067 0104 19       		.uleb128 0x19
 4068 0105 49       		.uleb128 0x49
 4069 0106 13       		.uleb128 0x13
 4070 0107 11       		.uleb128 0x11
 4071 0108 01       		.uleb128 0x1
 4072 0109 12       		.uleb128 0x12
 4073 010a 06       		.uleb128 0x6
 4074 010b 40       		.uleb128 0x40
 4075 010c 18       		.uleb128 0x18
 4076 010d 9742     		.uleb128 0x2117
 4077 010f 19       		.uleb128 0x19
 4078 0110 00       		.byte	0
 4079 0111 00       		.byte	0
 4080 0112 11       		.uleb128 0x11
 4081 0113 2E       		.uleb128 0x2e
 4082 0114 01       		.byte	0x1
 4083 0115 3F       		.uleb128 0x3f
 4084 0116 19       		.uleb128 0x19
 4085 0117 03       		.uleb128 0x3
 4086 0118 0E       		.uleb128 0xe
 4087 0119 3A       		.uleb128 0x3a
 4088 011a 0B       		.uleb128 0xb
 4089 011b 3B       		.uleb128 0x3b
 4090 011c 05       		.uleb128 0x5
 4091 011d 27       		.uleb128 0x27
 4092 011e 19       		.uleb128 0x19
 4093 011f 49       		.uleb128 0x49
 4094 0120 13       		.uleb128 0x13
 4095 0121 11       		.uleb128 0x11
 4096 0122 01       		.uleb128 0x1
 4097 0123 12       		.uleb128 0x12
 4098 0124 06       		.uleb128 0x6
 4099 0125 40       		.uleb128 0x40
 4100 0126 18       		.uleb128 0x18
 4101 0127 9742     		.uleb128 0x2117
 4102 0129 19       		.uleb128 0x19
 4103 012a 01       		.uleb128 0x1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 126


 4104 012b 13       		.uleb128 0x13
 4105 012c 00       		.byte	0
 4106 012d 00       		.byte	0
 4107 012e 12       		.uleb128 0x12
 4108 012f 2E       		.uleb128 0x2e
 4109 0130 00       		.byte	0
 4110 0131 3F       		.uleb128 0x3f
 4111 0132 19       		.uleb128 0x19
 4112 0133 03       		.uleb128 0x3
 4113 0134 0E       		.uleb128 0xe
 4114 0135 3A       		.uleb128 0x3a
 4115 0136 0B       		.uleb128 0xb
 4116 0137 3B       		.uleb128 0x3b
 4117 0138 05       		.uleb128 0x5
 4118 0139 27       		.uleb128 0x27
 4119 013a 19       		.uleb128 0x19
 4120 013b 11       		.uleb128 0x11
 4121 013c 01       		.uleb128 0x1
 4122 013d 12       		.uleb128 0x12
 4123 013e 06       		.uleb128 0x6
 4124 013f 40       		.uleb128 0x40
 4125 0140 18       		.uleb128 0x18
 4126 0141 9642     		.uleb128 0x2116
 4127 0143 19       		.uleb128 0x19
 4128 0144 00       		.byte	0
 4129 0145 00       		.byte	0
 4130 0146 13       		.uleb128 0x13
 4131 0147 34       		.uleb128 0x34
 4132 0148 00       		.byte	0
 4133 0149 03       		.uleb128 0x3
 4134 014a 08       		.uleb128 0x8
 4135 014b 3A       		.uleb128 0x3a
 4136 014c 0B       		.uleb128 0xb
 4137 014d 3B       		.uleb128 0x3b
 4138 014e 05       		.uleb128 0x5
 4139 014f 49       		.uleb128 0x49
 4140 0150 13       		.uleb128 0x13
 4141 0151 02       		.uleb128 0x2
 4142 0152 18       		.uleb128 0x18
 4143 0153 00       		.byte	0
 4144 0154 00       		.byte	0
 4145 0155 14       		.uleb128 0x14
 4146 0156 2E       		.uleb128 0x2e
 4147 0157 01       		.byte	0x1
 4148 0158 03       		.uleb128 0x3
 4149 0159 0E       		.uleb128 0xe
 4150 015a 3A       		.uleb128 0x3a
 4151 015b 0B       		.uleb128 0xb
 4152 015c 3B       		.uleb128 0x3b
 4153 015d 05       		.uleb128 0x5
 4154 015e 27       		.uleb128 0x27
 4155 015f 19       		.uleb128 0x19
 4156 0160 11       		.uleb128 0x11
 4157 0161 01       		.uleb128 0x1
 4158 0162 12       		.uleb128 0x12
 4159 0163 06       		.uleb128 0x6
 4160 0164 40       		.uleb128 0x40
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 127


 4161 0165 18       		.uleb128 0x18
 4162 0166 9642     		.uleb128 0x2116
 4163 0168 19       		.uleb128 0x19
 4164 0169 01       		.uleb128 0x1
 4165 016a 13       		.uleb128 0x13
 4166 016b 00       		.byte	0
 4167 016c 00       		.byte	0
 4168 016d 15       		.uleb128 0x15
 4169 016e 01       		.uleb128 0x1
 4170 016f 01       		.byte	0x1
 4171 0170 49       		.uleb128 0x49
 4172 0171 13       		.uleb128 0x13
 4173 0172 01       		.uleb128 0x1
 4174 0173 13       		.uleb128 0x13
 4175 0174 00       		.byte	0
 4176 0175 00       		.byte	0
 4177 0176 16       		.uleb128 0x16
 4178 0177 21       		.uleb128 0x21
 4179 0178 00       		.byte	0
 4180 0179 49       		.uleb128 0x49
 4181 017a 13       		.uleb128 0x13
 4182 017b 2F       		.uleb128 0x2f
 4183 017c 0B       		.uleb128 0xb
 4184 017d 00       		.byte	0
 4185 017e 00       		.byte	0
 4186 017f 17       		.uleb128 0x17
 4187 0180 34       		.uleb128 0x34
 4188 0181 00       		.byte	0
 4189 0182 03       		.uleb128 0x3
 4190 0183 0E       		.uleb128 0xe
 4191 0184 3A       		.uleb128 0x3a
 4192 0185 0B       		.uleb128 0xb
 4193 0186 3B       		.uleb128 0x3b
 4194 0187 0B       		.uleb128 0xb
 4195 0188 49       		.uleb128 0x49
 4196 0189 13       		.uleb128 0x13
 4197 018a 02       		.uleb128 0x2
 4198 018b 18       		.uleb128 0x18
 4199 018c 00       		.byte	0
 4200 018d 00       		.byte	0
 4201 018e 18       		.uleb128 0x18
 4202 018f 34       		.uleb128 0x34
 4203 0190 00       		.byte	0
 4204 0191 03       		.uleb128 0x3
 4205 0192 0E       		.uleb128 0xe
 4206 0193 3A       		.uleb128 0x3a
 4207 0194 0B       		.uleb128 0xb
 4208 0195 3B       		.uleb128 0x3b
 4209 0196 0B       		.uleb128 0xb
 4210 0197 49       		.uleb128 0x49
 4211 0198 13       		.uleb128 0x13
 4212 0199 3F       		.uleb128 0x3f
 4213 019a 19       		.uleb128 0x19
 4214 019b 02       		.uleb128 0x2
 4215 019c 18       		.uleb128 0x18
 4216 019d 00       		.byte	0
 4217 019e 00       		.byte	0
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 128


 4218 019f 19       		.uleb128 0x19
 4219 01a0 26       		.uleb128 0x26
 4220 01a1 00       		.byte	0
 4221 01a2 49       		.uleb128 0x49
 4222 01a3 13       		.uleb128 0x13
 4223 01a4 00       		.byte	0
 4224 01a5 00       		.byte	0
 4225 01a6 00       		.byte	0
 4226              		.section	.debug_aranges,"",%progbits
 4227 0000 7C010000 		.4byte	0x17c
 4228 0004 0200     		.2byte	0x2
 4229 0006 00000000 		.4byte	.Ldebug_info0
 4230 000a 04       		.byte	0x4
 4231 000b 00       		.byte	0
 4232 000c 0000     		.2byte	0
 4233 000e 0000     		.2byte	0
 4234 0010 00000000 		.4byte	.LFB0
 4235 0014 1C000000 		.4byte	.LFE0-.LFB0
 4236 0018 00000000 		.4byte	.LFB1
 4237 001c 1C000000 		.4byte	.LFE1-.LFB1
 4238 0020 00000000 		.4byte	.LFB2
 4239 0024 48000000 		.4byte	.LFE2-.LFB2
 4240 0028 00000000 		.4byte	.LFB3
 4241 002c 50000000 		.4byte	.LFE3-.LFB3
 4242 0030 00000000 		.4byte	.LFB4
 4243 0034 34000000 		.4byte	.LFE4-.LFB4
 4244 0038 00000000 		.4byte	.LFB5
 4245 003c 48000000 		.4byte	.LFE5-.LFB5
 4246 0040 00000000 		.4byte	.LFB6
 4247 0044 EC010000 		.4byte	.LFE6-.LFB6
 4248 0048 00000000 		.4byte	.LFB7
 4249 004c 64000000 		.4byte	.LFE7-.LFB7
 4250 0050 00000000 		.4byte	.LFB8
 4251 0054 2C000000 		.4byte	.LFE8-.LFB8
 4252 0058 00000000 		.4byte	.LFB9
 4253 005c 18000000 		.4byte	.LFE9-.LFB9
 4254 0060 00000000 		.4byte	.LFB10
 4255 0064 14000000 		.4byte	.LFE10-.LFB10
 4256 0068 00000000 		.4byte	.LFB11
 4257 006c 30000000 		.4byte	.LFE11-.LFB11
 4258 0070 00000000 		.4byte	.LFB12
 4259 0074 24000000 		.4byte	.LFE12-.LFB12
 4260 0078 00000000 		.4byte	.LFB13
 4261 007c 1C000000 		.4byte	.LFE13-.LFB13
 4262 0080 00000000 		.4byte	.LFB14
 4263 0084 48000000 		.4byte	.LFE14-.LFB14
 4264 0088 00000000 		.4byte	.LFB15
 4265 008c 34000000 		.4byte	.LFE15-.LFB15
 4266 0090 00000000 		.4byte	.LFB16
 4267 0094 4C000000 		.4byte	.LFE16-.LFB16
 4268 0098 00000000 		.4byte	.LFB17
 4269 009c 36000000 		.4byte	.LFE17-.LFB17
 4270 00a0 00000000 		.4byte	.LFB18
 4271 00a4 A8000000 		.4byte	.LFE18-.LFB18
 4272 00a8 00000000 		.4byte	.LFB19
 4273 00ac 58000000 		.4byte	.LFE19-.LFB19
 4274 00b0 00000000 		.4byte	.LFB20
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 129


 4275 00b4 2C000000 		.4byte	.LFE20-.LFB20
 4276 00b8 00000000 		.4byte	.LFB21
 4277 00bc 30000000 		.4byte	.LFE21-.LFB21
 4278 00c0 00000000 		.4byte	.LFB22
 4279 00c4 2C000000 		.4byte	.LFE22-.LFB22
 4280 00c8 00000000 		.4byte	.LFB23
 4281 00cc 2C000000 		.4byte	.LFE23-.LFB23
 4282 00d0 00000000 		.4byte	.LFB24
 4283 00d4 2C000000 		.4byte	.LFE24-.LFB24
 4284 00d8 00000000 		.4byte	.LFB25
 4285 00dc 16000000 		.4byte	.LFE25-.LFB25
 4286 00e0 00000000 		.4byte	.LFB26
 4287 00e4 24000000 		.4byte	.LFE26-.LFB26
 4288 00e8 00000000 		.4byte	.LFB27
 4289 00ec 4C000000 		.4byte	.LFE27-.LFB27
 4290 00f0 00000000 		.4byte	.LFB28
 4291 00f4 28000000 		.4byte	.LFE28-.LFB28
 4292 00f8 00000000 		.4byte	.LFB29
 4293 00fc 84000000 		.4byte	.LFE29-.LFB29
 4294 0100 00000000 		.4byte	.LFB30
 4295 0104 24000000 		.4byte	.LFE30-.LFB30
 4296 0108 00000000 		.4byte	.LFB31
 4297 010c 60000000 		.4byte	.LFE31-.LFB31
 4298 0110 00000000 		.4byte	.LFB32
 4299 0114 20000000 		.4byte	.LFE32-.LFB32
 4300 0118 00000000 		.4byte	.LFB33
 4301 011c 1C000000 		.4byte	.LFE33-.LFB33
 4302 0120 00000000 		.4byte	.LFB34
 4303 0124 1C000000 		.4byte	.LFE34-.LFB34
 4304 0128 00000000 		.4byte	.LFB35
 4305 012c 1C000000 		.4byte	.LFE35-.LFB35
 4306 0130 00000000 		.4byte	.LFB36
 4307 0134 20000000 		.4byte	.LFE36-.LFB36
 4308 0138 00000000 		.4byte	.LFB37
 4309 013c 18000000 		.4byte	.LFE37-.LFB37
 4310 0140 00000000 		.4byte	.LFB38
 4311 0144 18000000 		.4byte	.LFE38-.LFB38
 4312 0148 00000000 		.4byte	.LFB39
 4313 014c 18000000 		.4byte	.LFE39-.LFB39
 4314 0150 00000000 		.4byte	.LFB40
 4315 0154 14000000 		.4byte	.LFE40-.LFB40
 4316 0158 00000000 		.4byte	.LFB41
 4317 015c 2C000000 		.4byte	.LFE41-.LFB41
 4318 0160 00000000 		.4byte	.LFB42
 4319 0164 1C000000 		.4byte	.LFE42-.LFB42
 4320 0168 00000000 		.4byte	.LFB43
 4321 016c 44000000 		.4byte	.LFE43-.LFB43
 4322 0170 00000000 		.4byte	.LFB44
 4323 0174 C0000000 		.4byte	.LFE44-.LFB44
 4324 0178 00000000 		.4byte	0
 4325 017c 00000000 		.4byte	0
 4326              		.section	.debug_ranges,"",%progbits
 4327              	.Ldebug_ranges0:
 4328 0000 00000000 		.4byte	.LFB0
 4329 0004 1C000000 		.4byte	.LFE0
 4330 0008 00000000 		.4byte	.LFB1
 4331 000c 1C000000 		.4byte	.LFE1
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 130


 4332 0010 00000000 		.4byte	.LFB2
 4333 0014 48000000 		.4byte	.LFE2
 4334 0018 00000000 		.4byte	.LFB3
 4335 001c 50000000 		.4byte	.LFE3
 4336 0020 00000000 		.4byte	.LFB4
 4337 0024 34000000 		.4byte	.LFE4
 4338 0028 00000000 		.4byte	.LFB5
 4339 002c 48000000 		.4byte	.LFE5
 4340 0030 00000000 		.4byte	.LFB6
 4341 0034 EC010000 		.4byte	.LFE6
 4342 0038 00000000 		.4byte	.LFB7
 4343 003c 64000000 		.4byte	.LFE7
 4344 0040 00000000 		.4byte	.LFB8
 4345 0044 2C000000 		.4byte	.LFE8
 4346 0048 00000000 		.4byte	.LFB9
 4347 004c 18000000 		.4byte	.LFE9
 4348 0050 00000000 		.4byte	.LFB10
 4349 0054 14000000 		.4byte	.LFE10
 4350 0058 00000000 		.4byte	.LFB11
 4351 005c 30000000 		.4byte	.LFE11
 4352 0060 00000000 		.4byte	.LFB12
 4353 0064 24000000 		.4byte	.LFE12
 4354 0068 00000000 		.4byte	.LFB13
 4355 006c 1C000000 		.4byte	.LFE13
 4356 0070 00000000 		.4byte	.LFB14
 4357 0074 48000000 		.4byte	.LFE14
 4358 0078 00000000 		.4byte	.LFB15
 4359 007c 34000000 		.4byte	.LFE15
 4360 0080 00000000 		.4byte	.LFB16
 4361 0084 4C000000 		.4byte	.LFE16
 4362 0088 00000000 		.4byte	.LFB17
 4363 008c 36000000 		.4byte	.LFE17
 4364 0090 00000000 		.4byte	.LFB18
 4365 0094 A8000000 		.4byte	.LFE18
 4366 0098 00000000 		.4byte	.LFB19
 4367 009c 58000000 		.4byte	.LFE19
 4368 00a0 00000000 		.4byte	.LFB20
 4369 00a4 2C000000 		.4byte	.LFE20
 4370 00a8 00000000 		.4byte	.LFB21
 4371 00ac 30000000 		.4byte	.LFE21
 4372 00b0 00000000 		.4byte	.LFB22
 4373 00b4 2C000000 		.4byte	.LFE22
 4374 00b8 00000000 		.4byte	.LFB23
 4375 00bc 2C000000 		.4byte	.LFE23
 4376 00c0 00000000 		.4byte	.LFB24
 4377 00c4 2C000000 		.4byte	.LFE24
 4378 00c8 00000000 		.4byte	.LFB25
 4379 00cc 16000000 		.4byte	.LFE25
 4380 00d0 00000000 		.4byte	.LFB26
 4381 00d4 24000000 		.4byte	.LFE26
 4382 00d8 00000000 		.4byte	.LFB27
 4383 00dc 4C000000 		.4byte	.LFE27
 4384 00e0 00000000 		.4byte	.LFB28
 4385 00e4 28000000 		.4byte	.LFE28
 4386 00e8 00000000 		.4byte	.LFB29
 4387 00ec 84000000 		.4byte	.LFE29
 4388 00f0 00000000 		.4byte	.LFB30
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 131


 4389 00f4 24000000 		.4byte	.LFE30
 4390 00f8 00000000 		.4byte	.LFB31
 4391 00fc 60000000 		.4byte	.LFE31
 4392 0100 00000000 		.4byte	.LFB32
 4393 0104 20000000 		.4byte	.LFE32
 4394 0108 00000000 		.4byte	.LFB33
 4395 010c 1C000000 		.4byte	.LFE33
 4396 0110 00000000 		.4byte	.LFB34
 4397 0114 1C000000 		.4byte	.LFE34
 4398 0118 00000000 		.4byte	.LFB35
 4399 011c 1C000000 		.4byte	.LFE35
 4400 0120 00000000 		.4byte	.LFB36
 4401 0124 20000000 		.4byte	.LFE36
 4402 0128 00000000 		.4byte	.LFB37
 4403 012c 18000000 		.4byte	.LFE37
 4404 0130 00000000 		.4byte	.LFB38
 4405 0134 18000000 		.4byte	.LFE38
 4406 0138 00000000 		.4byte	.LFB39
 4407 013c 18000000 		.4byte	.LFE39
 4408 0140 00000000 		.4byte	.LFB40
 4409 0144 14000000 		.4byte	.LFE40
 4410 0148 00000000 		.4byte	.LFB41
 4411 014c 2C000000 		.4byte	.LFE41
 4412 0150 00000000 		.4byte	.LFB42
 4413 0154 1C000000 		.4byte	.LFE42
 4414 0158 00000000 		.4byte	.LFB43
 4415 015c 44000000 		.4byte	.LFE43
 4416 0160 00000000 		.4byte	.LFB44
 4417 0164 C0000000 		.4byte	.LFE44
 4418 0168 00000000 		.4byte	0
 4419 016c 00000000 		.4byte	0
 4420              		.section	.debug_line,"",%progbits
 4421              	.Ldebug_line0:
 4422 0000 77040000 		.section	.debug_str,"MS",%progbits,1
 4422      02004D00 
 4422      00000201 
 4422      FB0E0D00 
 4422      01010101 
 4423              	.LASF55:
 4424 0000 72616D56 		.ascii	"ramVectorTable\000"
 4424      6563746F 
 4424      72546162 
 4424      6C6500
 4425              	.LASF34:
 4426 000f 62675472 		.ascii	"bgTrim4\000"
 4426      696D3400 
 4427              	.LASF10:
 4428 0017 75696E74 		.ascii	"uint16\000"
 4428      313600
 4429              	.LASF48:
 4430 001e 696E7453 		.ascii	"intState\000"
 4430      74617465 
 4430      00
 4431              	.LASF25:
 4432 0027 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4432      73436C6B 
 4432      57726974 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 132


 4432      65486663 
 4432      6C6B4469 
 4433              	.LASF101:
 4434 0040 43795379 		.ascii	"CySysClkPumpConfig\000"
 4434      73436C6B 
 4434      50756D70 
 4434      436F6E66 
 4434      696700
 4435              	.LASF54:
 4436 0053 6F6C6449 		.ascii	"oldIsr\000"
 4436      737200
 4437              	.LASF90:
 4438 005a 72657456 		.ascii	"retVal\000"
 4438      616C00
 4439              	.LASF47:
 4440 0061 43794469 		.ascii	"CyDisableInts\000"
 4440      7361626C 
 4440      65496E74 
 4440      7300
 4441              	.LASF37:
 4442 006f 63757272 		.ascii	"currentImoTrim2Value\000"
 4442      656E7449 
 4442      6D6F5472 
 4442      696D3256 
 4442      616C7565 
 4443              	.LASF7:
 4444 0084 6C6F6E67 		.ascii	"long long unsigned int\000"
 4444      206C6F6E 
 4444      6720756E 
 4444      7369676E 
 4444      65642069 
 4445              	.LASF99:
 4446 009b 43795379 		.ascii	"CySysTickInitVar\000"
 4446      73546963 
 4446      6B496E69 
 4446      74566172 
 4446      00
 4447              	.LASF49:
 4448 00ac 4379456E 		.ascii	"CyEnableInts\000"
 4448      61626C65 
 4448      496E7473 
 4448      00
 4449              	.LASF70:
 4450 00b9 4379536F 		.ascii	"CySoftwareReset\000"
 4450      66747761 
 4450      72655265 
 4450      73657400 
 4451              	.LASF80:
 4452 00c9 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4452      73546963 
 4452      6B456E61 
 4452      626C6549 
 4452      6E746572 
 4453              	.LASF65:
 4454 00e2 4379496E 		.ascii	"CyIntGetState\000"
 4454      74476574 
 4454      53746174 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 133


 4454      6500
 4455              	.LASF6:
 4456 00f0 6C6F6E67 		.ascii	"long long int\000"
 4456      206C6F6E 
 4456      6720696E 
 4456      7400
 4457              	.LASF0:
 4458 00fe 7369676E 		.ascii	"signed char\000"
 4458      65642063 
 4458      68617200 
 4459              	.LASF33:
 4460 010a 66726571 		.ascii	"freq\000"
 4460      00
 4461              	.LASF75:
 4462 010f 43794465 		.ascii	"CyDelayFreq\000"
 4462      6C617946 
 4462      72657100 
 4463              	.LASF23:
 4464 011b 696E7465 		.ascii	"interruptState\000"
 4464      72727570 
 4464      74537461 
 4464      746500
 4465              	.LASF84:
 4466 012a 43795379 		.ascii	"CySysTickGetReload\000"
 4466      73546963 
 4466      6B476574 
 4466      52656C6F 
 4466      616400
 4467              	.LASF4:
 4468 013d 6C6F6E67 		.ascii	"long int\000"
 4468      20696E74 
 4468      00
 4469              	.LASF66:
 4470 0146 4379496E 		.ascii	"CyIntDisable\000"
 4470      74446973 
 4470      61626C65 
 4470      00
 4471              	.LASF91:
 4472 0153 43795379 		.ascii	"CySysTickGetCallback\000"
 4472      73546963 
 4472      6B476574 
 4472      43616C6C 
 4472      6261636B 
 4473              	.LASF9:
 4474 0168 75696E74 		.ascii	"uint8\000"
 4474      3800
 4475              	.LASF96:
 4476 016e 63796465 		.ascii	"cydelayFreqKhz\000"
 4476      6C617946 
 4476      7265714B 
 4476      687A00
 4477              	.LASF28:
 4478 017d 656E6162 		.ascii	"enable\000"
 4478      6C6500
 4479              	.LASF13:
 4480 0184 646F7562 		.ascii	"double\000"
 4480      6C6500
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 134


 4481              	.LASF61:
 4482 018b 73686966 		.ascii	"shift\000"
 4482      7400
 4483              	.LASF42:
 4484 0191 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4484      734C7664 
 4484      436C6561 
 4484      72496E74 
 4484      65727275 
 4485              	.LASF11:
 4486 01a8 75696E74 		.ascii	"uint32\000"
 4486      333200
 4487              	.LASF57:
 4488 01af 4379496E 		.ascii	"CyIntSetVector\000"
 4488      74536574 
 4488      56656374 
 4488      6F7200
 4489              	.LASF50:
 4490 01be 6D61736B 		.ascii	"mask\000"
 4490      00
 4491              	.LASF43:
 4492 01c3 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4492      73436C6B 
 4492      47657453 
 4492      7973636C 
 4492      6B536F75 
 4493              	.LASF63:
 4494 01db 4379496E 		.ascii	"CyIntGetPriority\000"
 4494      74476574 
 4494      5072696F 
 4494      72697479 
 4494      00
 4495              	.LASF98:
 4496 01ec 63796465 		.ascii	"cydelay32kMs\000"
 4496      6C617933 
 4496      326B4D73 
 4496      00
 4497              	.LASF77:
 4498 01f9 43795379 		.ascii	"CySysTickInit\000"
 4498      73546963 
 4498      6B496E69 
 4498      7400
 4499              	.LASF62:
 4500 0207 76616C75 		.ascii	"value\000"
 4500      6500
 4501              	.LASF92:
 4502 020d 43794765 		.ascii	"CyGetUniqueId\000"
 4502      74556E69 
 4502      71756549 
 4502      6400
 4503              	.LASF86:
 4504 021b 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4504      73546963 
 4504      6B476574 
 4504      436F756E 
 4504      74466C61 
 4505              	.LASF8:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 135


 4506 0231 756E7369 		.ascii	"unsigned int\000"
 4506      676E6564 
 4506      20696E74 
 4506      00
 4507              	.LASF87:
 4508 023e 43795379 		.ascii	"CySysTickClear\000"
 4508      73546963 
 4508      6B436C65 
 4508      617200
 4509              	.LASF5:
 4510 024d 6C6F6E67 		.ascii	"long unsigned int\000"
 4510      20756E73 
 4510      69676E65 
 4510      6420696E 
 4510      7400
 4511              	.LASF83:
 4512 025f 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4512      734C7664 
 4512      47657449 
 4512      6E746572 
 4512      72757074 
 4513              	.LASF22:
 4514 027a 43795379 		.ascii	"CySysClkImoStop\000"
 4514      73436C6B 
 4514      496D6F53 
 4514      746F7000 
 4515              	.LASF67:
 4516 028a 4379496E 		.ascii	"CyIntSetPending\000"
 4516      74536574 
 4516      50656E64 
 4516      696E6700 
 4517              	.LASF44:
 4518 029a 43795379 		.ascii	"CySysGetResetReason\000"
 4518      73476574 
 4518      52657365 
 4518      74526561 
 4518      736F6E00 
 4519              	.LASF3:
 4520 02ae 73686F72 		.ascii	"short unsigned int\000"
 4520      7420756E 
 4520      7369676E 
 4520      65642069 
 4520      6E7400
 4521              	.LASF104:
 4522 02c1 433A5C55 		.ascii	"C:\\Users\\Rafael\\Documents\\PSoC Creator\\SD Card"
 4522      73657273 
 4522      5C526166 
 4522      61656C5C 
 4522      446F6375 
 4523 02ef 5C534443 		.ascii	"\\SDCard_Demo.cydsn\000"
 4523      6172645F 
 4523      44656D6F 
 4523      2E637964 
 4523      736E00
 4524              	.LASF52:
 4525 0302 6E756D62 		.ascii	"number\000"
 4525      657200
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 136


 4526              	.LASF60:
 4527 0309 7072696F 		.ascii	"priority\000"
 4527      72697479 
 4527      00
 4528              	.LASF32:
 4529 0312 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4529      73436C6B 
 4529      57726974 
 4529      65496D6F 
 4529      46726571 
 4530              	.LASF102:
 4531 0327 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4531      43313120 
 4531      352E342E 
 4531      31203230 
 4531      31363036 
 4532 035a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4532      20726576 
 4532      6973696F 
 4532      6E203233 
 4532      37373135 
 4533 038d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4533      66756E63 
 4533      74696F6E 
 4533      2D736563 
 4533      74696F6E 
 4534              	.LASF51:
 4535 03b5 4379496E 		.ascii	"CyIntSetSysVector\000"
 4535      74536574 
 4535      53797356 
 4535      6563746F 
 4535      7200
 4536              	.LASF26:
 4537 03c7 43795379 		.ascii	"CySysEnablePumpClock\000"
 4537      73456E61 
 4537      626C6550 
 4537      756D7043 
 4537      6C6F636B 
 4538              	.LASF16:
 4539 03dc 72656733 		.ascii	"reg32\000"
 4539      3200
 4540              	.LASF76:
 4541 03e2 43795379 		.ascii	"CySysTickStart\000"
 4541      73546963 
 4541      6B537461 
 4541      727400
 4542              	.LASF46:
 4543 03f1 72657475 		.ascii	"returnStatus\000"
 4543      726E5374 
 4543      61747573 
 4543      00
 4544              	.LASF19:
 4545 03fe 73697A65 		.ascii	"sizetype\000"
 4545      74797065 
 4545      00
 4546              	.LASF68:
 4547 0407 4379496E 		.ascii	"CyIntClearPending\000"
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 137


 4547      74436C65 
 4547      61725065 
 4547      6E64696E 
 4547      6700
 4548              	.LASF18:
 4549 0419 6C6F6E67 		.ascii	"long double\000"
 4549      20646F75 
 4549      626C6500 
 4550              	.LASF53:
 4551 0425 61646472 		.ascii	"address\000"
 4551      65737300 
 4552              	.LASF35:
 4553 042d 62675472 		.ascii	"bgTrim5\000"
 4553      696D3500 
 4554              	.LASF29:
 4555 0435 73797363 		.ascii	"sysclkSource\000"
 4555      6C6B536F 
 4555      75726365 
 4555      00
 4556              	.LASF89:
 4557 0442 66756E63 		.ascii	"function\000"
 4557      74696F6E 
 4557      00
 4558              	.LASF100:
 4559 044b 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 4559      6F467265 
 4559      714D687A 
 4559      32526567 
 4559      00
 4560              	.LASF85:
 4561 045c 43795379 		.ascii	"CySysTickGetValue\000"
 4561      73546963 
 4561      6B476574 
 4561      56616C75 
 4561      6500
 4562              	.LASF95:
 4563 046e 63796465 		.ascii	"cydelayFreqHz\000"
 4563      6C617946 
 4563      72657148 
 4563      7A00
 4564              	.LASF59:
 4565 047c 4379496E 		.ascii	"CyIntSetPriority\000"
 4565      74536574 
 4565      5072696F 
 4565      72697479 
 4565      00
 4566              	.LASF12:
 4567 048d 666C6F61 		.ascii	"float\000"
 4567      7400
 4568              	.LASF39:
 4569 0493 43795379 		.ascii	"CySysLvdEnable\000"
 4569      734C7664 
 4569      456E6162 
 4569      6C6500
 4570              	.LASF20:
 4571 04a2 63795379 		.ascii	"cySysTickCallback\000"
 4571      73546963 
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 138


 4571      6B43616C 
 4571      6C626163 
 4571      6B00
 4572              	.LASF58:
 4573 04b4 4379496E 		.ascii	"CyIntGetVector\000"
 4573      74476574 
 4573      56656374 
 4573      6F7200
 4574              	.LASF72:
 4575 04c3 6D696C6C 		.ascii	"milliseconds\000"
 4575      69736563 
 4575      6F6E6473 
 4575      00
 4576              	.LASF15:
 4577 04d0 72656738 		.ascii	"reg8\000"
 4577      00
 4578              	.LASF40:
 4579 04d5 74687265 		.ascii	"threshold\000"
 4579      73686F6C 
 4579      6400
 4580              	.LASF69:
 4581 04df 43794861 		.ascii	"CyHalt\000"
 4581      6C7400
 4582              	.LASF1:
 4583 04e6 756E7369 		.ascii	"unsigned char\000"
 4583      676E6564 
 4583      20636861 
 4583      7200
 4584              	.LASF2:
 4585 04f4 73686F72 		.ascii	"short int\000"
 4585      7420696E 
 4585      7400
 4586              	.LASF64:
 4587 04fe 4379496E 		.ascii	"CyIntEnable\000"
 4587      74456E61 
 4587      626C6500 
 4588              	.LASF56:
 4589 050a 4379496E 		.ascii	"CyIntGetSysVector\000"
 4589      74476574 
 4589      53797356 
 4589      6563746F 
 4589      7200
 4590              	.LASF27:
 4591 051c 636C6B53 		.ascii	"clkSelect\000"
 4591      656C6563 
 4591      7400
 4592              	.LASF73:
 4593 0526 43794465 		.ascii	"CyDelayUs\000"
 4593      6C617955 
 4593      7300
 4594              	.LASF45:
 4595 0530 72656173 		.ascii	"reason\000"
 4595      6F6E00
 4596              	.LASF14:
 4597 0537 63686172 		.ascii	"char\000"
 4597      00
 4598              	.LASF17:
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 139


 4599 053c 63796973 		.ascii	"cyisraddress\000"
 4599      72616464 
 4599      72657373 
 4599      00
 4600              	.LASF78:
 4601 0549 43795379 		.ascii	"CySysTickEnable\000"
 4601      73546963 
 4601      6B456E61 
 4601      626C6500 
 4602              	.LASF30:
 4603 0559 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4603      73436C6B 
 4603      57726974 
 4603      65537973 
 4603      636C6B44 
 4604              	.LASF88:
 4605 0570 43795379 		.ascii	"CySysTickSetCallback\000"
 4605      73546963 
 4605      6B536574 
 4605      43616C6C 
 4605      6261636B 
 4606              	.LASF94:
 4607 0585 43795379 		.ascii	"CySysTickCallbacks\000"
 4607      73546963 
 4607      6B43616C 
 4607      6C626163 
 4607      6B7300
 4608              	.LASF38:
 4609 0598 696D6F54 		.ascii	"imoTrim1Value\000"
 4609      72696D31 
 4609      56616C75 
 4609      6500
 4610              	.LASF93:
 4611 05a6 756E6971 		.ascii	"uniqueId\000"
 4611      75654964 
 4611      00
 4612              	.LASF71:
 4613 05af 43794465 		.ascii	"CyDelay\000"
 4613      6C617900 
 4614              	.LASF81:
 4615 05b7 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4615      73546963 
 4615      6B446973 
 4615      61626C65 
 4615      496E7465 
 4616              	.LASF41:
 4617 05d1 43795379 		.ascii	"CySysLvdDisable\000"
 4617      734C7664 
 4617      44697361 
 4617      626C6500 
 4618              	.LASF97:
 4619 05e1 63796465 		.ascii	"cydelayFreqMhz\000"
 4619      6C617946 
 4619      7265714D 
 4619      687A00
 4620              	.LASF79:
 4621 05f0 43795379 		.ascii	"CySysTickStop\000"
ARM GAS  C:\Users\Rafael\AppData\Local\Temp\ccVq6MsK.s 			page 140


 4621      73546963 
 4621      6B53746F 
 4621      7000
 4622              	.LASF31:
 4623 05fe 64697669 		.ascii	"divider\000"
 4623      64657200 
 4624              	.LASF21:
 4625 0606 43795379 		.ascii	"CySysClkImoStart\000"
 4625      73436C6B 
 4625      496D6F53 
 4625      74617274 
 4625      00
 4626              	.LASF36:
 4627 0617 6E657749 		.ascii	"newImoTrim2Value\000"
 4627      6D6F5472 
 4627      696D3256 
 4627      616C7565 
 4627      00
 4628              	.LASF103:
 4629 0628 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 4629      72617465 
 4629      645F536F 
 4629      75726365 
 4629      5C50536F 
 4630              	.LASF74:
 4631 0647 6D696372 		.ascii	"microseconds\000"
 4631      6F736563 
 4631      6F6E6473 
 4631      00
 4632              	.LASF24:
 4633 0654 746D7052 		.ascii	"tmpReg\000"
 4633      656700
 4634              	.LASF82:
 4635 065b 43795379 		.ascii	"CySysTickSetReload\000"
 4635      73546963 
 4635      6B536574 
 4635      52656C6F 
 4635      616400
 4636              	.LASF105:
 4637 066e 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4637      73546963 
 4637      6B536572 
 4637      76696365 
 4637      43616C6C 
 4638              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
